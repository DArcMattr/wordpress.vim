riml_include 'container'
riml_include 'command_registry'

" collections
riml_include 'buffer_collection'
riml_include 'project_collection'

" commands
riml_include 'change_current_buffer_command'
riml_include 'configure_buffer_command'
riml_include 'load_syntax_command'
riml_include 'load_project_registry_command'
riml_include 'configure_tags_command'
riml_include 'codex_search_command'

" utils
riml_include 'with_dir'
riml_include 'file_opener'
riml_include 'tags_option'

class Controller
  def initialize
    self.container = new Container({})
  end

  defm process(*args)
    registry = self.container.lookup('registry')
    return call(registry['run_action'], args, registry)
  end

  defm load
    self.configure_container()

    " commands
    self.load_commands()
  end

  defm configure_container
    c = self.container

    c.register('registry', 'CommandRegistry', true)
    c.register('buffer_collection', 'BufferCollection', true)
    c.register('project_collection', 'ProjectCollection', true)

    c.register('project', 'Project', false)
    c.register('with_dir', 'WithDir', false)
    c.register('file_opener', 'FileOpener', false)
    c.register('tags_option', 'TagsOption', true)
  end

  " initialization helpers
  defm load_commands
    c = self.container
    r = c.lookup('registry')

    r.add(new ConfigureBufferCommand(c))
    r.add(new ChangeCurrentBufferCommand(c))
    r.add(new LoadSyntaxCommand(c))
    r.add(new LoadProjectRegistryCommand(c))
    r.add(new ConfigureTagsCommand(c))
    r.add(new CodexSearchCommand(c))
  end

  defm lookup(key)
    return self.container.lookup(key)
  end
end
