if exists('g:wordpress_vim_phpcomplete_extensions_loaded')
  finish
end

" for testing - TODO: figure out how to debug in YCM headless
" runtime! misc/builtin.vim

" Function Extensions
let g:phpcomplete_builtin['functions']['wp_script_loader'] = {
\ 'wp_default_scripts(': 'object $scripts | void',
\ 'wp_default_styles(': 'object $styles | void',
\ 'wp_prototype_before_jquery(': 'array $js_array | array',
\ 'wp_just_in_time_script_localization(': 'void | void',
\ 'wp_style_loader_src(': 'string $src, string $handle | string',
\ 'print_head_scripts(': 'void | void',
\ 'print_footer_scripts(': 'void | void',
\ 'wp_print_head_scripts(': 'void | void',
\ 'wp_print_footer_scripts(': 'void | void',
\ 'wp_enqueue_scripts(': 'void | void',
\ 'print_admin_styles(': 'void | void',
\ 'print_late_styles(': 'void | void',
\ 'script_concat_settings(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_post_formats'] = {
\ 'get_post_format(': 'int|object $post | mixed',
\ 'has_post_format(': 'string|array $format, object|int $post | bool',
\ 'set_post_format(': 'int|object $post, string $format | mixed',
\ 'get_post_format_strings(': 'void | array',
\ 'get_post_format_slugs(': 'void | array',
\ 'get_post_format_string(': 'string $slug | string',
\ 'get_post_format_link(': 'string $format | string',
\}

let g:phpcomplete_builtin['functions']['wp_http'] = {
\ 'wp_safe_remote_request(': 'string $url, array $args | \WP_Error|array',
\ 'wp_safe_remote_get(': 'string $url, array $args | \WP_Error|array',
\ 'wp_safe_remote_post(': 'string $url, array $args | \WP_Error|array',
\ 'wp_safe_remote_head(': 'string $url, array $args | \WP_Error|array',
\ 'wp_remote_request(': 'string $url, array $args | \WP_Error|array',
\ 'wp_remote_get(': 'string $url, array $args | \WP_Error|array',
\ 'wp_remote_post(': 'string $url, array $args | \WP_Error|array',
\ 'wp_remote_head(': 'string $url, array $args | \WP_Error|array',
\ 'wp_remote_retrieve_headers(': 'array $response | array',
\ 'wp_remote_retrieve_header(': 'array $response, string $header | string',
\ 'wp_remote_retrieve_response_code(': 'array $response | string',
\ 'wp_remote_retrieve_response_message(': 'array $response | string',
\ 'wp_remote_retrieve_body(': 'array $response | string',
\ 'wp_http_supports(': 'array $capabilities, string $url | bool',
\ 'get_http_origin(': 'void | string',
\ 'get_allowed_http_origins(': 'void | array',
\ 'is_allowed_http_origin(': ' $origin | bool',
\ 'send_origin_headers(': 'void | bool|string',
\ 'wp_http_validate_url(': ' $url | mixed',
\ 'allowed_http_request_hosts(': 'bool $is_external, string $host | bool',
\ 'ms_allowed_http_request_hosts(': 'bool $is_external, string $host | bool',
\}

let g:phpcomplete_builtin['functions']['wp_cron'] = {
\ 'wp_schedule_single_event(': 'int $timestamp, string $hook, array $args | void',
\ 'wp_schedule_event(': 'int $timestamp, string $recurrence, string $hook, array $args | bool|null',
\ 'wp_reschedule_event(': 'int $timestamp, string $recurrence, string $hook, array $args | bool|null',
\ 'wp_unschedule_event(': 'int $timestamp, string $hook, array $args | void',
\ 'wp_clear_scheduled_hook(': 'string $hook, array $args | void',
\ 'wp_next_scheduled(': 'string $hook, array $args | bool|int',
\ 'spawn_cron(': ' $gmt_time | null',
\ 'wp_cron(': 'void | null',
\ 'wp_get_schedules(': 'void | array',
\ 'wp_get_schedule(': 'string $hook, array $args | string|bool',
\}

let g:phpcomplete_builtin['functions']['wp_rewrite'] = {
\ 'add_rewrite_rule(': 'string $regex, string $redirect, string $after | void',
\ 'add_rewrite_tag(': 'string $tag, string $regex, string $query | void',
\ 'add_permastruct(': 'string $name, string $struct, array $args | void',
\ 'add_feed(': 'string $feedname, callback $function | string',
\ 'flush_rewrite_rules(': 'bool $hard | void',
\ 'add_rewrite_endpoint(': 'string $name, int $places | void',
\ 'url_to_postid(': 'string $url | int',
\}

let g:phpcomplete_builtin['functions']['wp_ms_blogs'] = {
\ 'wpmu_update_blogs_date(': 'void | void',
\ 'get_blogaddress_by_id(': 'int $blog_id | string',
\ 'get_blogaddress_by_name(': 'string $blogname | string',
\ 'get_id_from_blogname(': 'string $slug | int',
\ 'get_blog_details(': 'int|string|array $fields, bool $get_all | object',
\ 'refresh_blog_details(': 'int $blog_id | void',
\ 'update_blog_details(': 'int $blog_id, array $details | bool',
\ 'clean_blog_cache(': '\stdClass $blog | void',
\ 'get_blog_option(': 'int $id, string $option, mixed $default | mixed',
\ 'add_blog_option(': 'int $id, string $option, mixed $value | bool',
\ 'delete_blog_option(': 'int $id, string $option | bool',
\ 'update_blog_option(': 'int $id, string $option, mixed $value,  $deprecated | bool',
\ 'switch_to_blog(': 'int $new_blog, bool $deprecated | bool',
\ 'restore_current_blog(': 'void | bool',
\ 'ms_is_switched(': 'void | bool',
\ 'is_archived(': 'int $id | string',
\ 'update_archived(': 'int $id, string $archived | string',
\ 'update_blog_status(': 'int $blog_id, string $pref, string $value,  $deprecated | string',
\ 'get_blog_status(': 'int $id, string $pref | bool',
\ 'get_last_updated(': 'mixed $deprecated, int $start, int $quantity | array',
\}

let g:phpcomplete_builtin['functions']['wp_taxonomy'] = {
\ 'create_initial_taxonomies(': 'void | void',
\ 'get_taxonomies(': 'array $args, string $output, string $operator | array',
\ 'get_object_taxonomies(': 'array|string|object $object, string $output | array',
\ 'get_taxonomy(': 'string $taxonomy | object|bool',
\ 'taxonomy_exists(': 'string $taxonomy | bool',
\ 'is_taxonomy_hierarchical(': 'string $taxonomy | bool',
\ 'register_taxonomy(': 'string $taxonomy, array|string $object_type, array|string $args | null|\WP_Error',
\ 'get_taxonomy_labels(': 'object $tax | object',
\ 'register_taxonomy_for_object_type(': 'string $taxonomy, string $object_type | bool',
\ 'unregister_taxonomy_for_object_type(': 'string $taxonomy, string $object_type | bool',
\ 'get_objects_in_term(': 'int|array $term_ids, string|array $taxonomies, array|string $args | \WP_Error|array',
\ 'get_tax_sql(': 'array $tax_query, string $primary_table, string $primary_id_column | array',
\ 'get_term(': 'int|object $term, string $taxonomy, string $output, string $filter | mixed|null|\WP_Error',
\ 'get_term_by(': 'string $field, string|int $value, string $taxonomy, string $output, string $filter | mixed',
\ 'get_term_children(': 'string $term_id, string $taxonomy | array|\WP_Error',
\ 'get_term_field(': 'string $field, int $term, string $taxonomy, string $context | mixed',
\ 'get_term_to_edit(': 'int|object $id, string $taxonomy | mixed|null|\WP_Error',
\ 'get_terms(': 'string|array $taxonomies, string|array $args | array|\WP_Error',
\ 'term_exists(': 'int|string $term, string $taxonomy, int $parent | mixed',
\ 'term_is_ancestor_of(': 'int|object $term1, int|object $term2, string $taxonomy | bool',
\ 'sanitize_term(': 'array|object $term, string $taxonomy, string $context | array|object',
\ 'sanitize_term_field(': 'string $field, string $value, int $term_id, string $taxonomy, string $context | mixed',
\ 'wp_count_terms(': 'string $taxonomy, array|string $args | int|\WP_Error',
\ 'wp_delete_object_term_relationships(': 'int $object_id, string|array $taxonomies | void',
\ 'wp_delete_term(': 'int $term, string $taxonomy, array|string $args | bool|\WP_Error',
\ 'wp_delete_category(': 'int $cat_ID | mixed',
\ 'wp_get_object_terms(': 'int|array $object_ids, string|array $taxonomies, array|string $args | array|\WP_Error',
\ 'wp_insert_term(': 'string $term, string $taxonomy, array|string $args | array|\WP_Error',
\ 'wp_set_object_terms(': 'int $object_id, array|int|string $terms, array|string $taxonomy, bool $append | array|\WP_Error',
\ 'wp_add_object_terms(': 'int $object_id, array|int|string $terms, array|string $taxonomy | array|\WP_Error',
\ 'wp_remove_object_terms(': 'int $object_id, array|int|string $terms, array|string $taxonomy | bool|\WP_Error',
\ 'wp_unique_term_slug(': 'string $slug, object $term | string',
\ 'wp_update_term(': 'int $term_id, string $taxonomy, array|string $args | array|\WP_Error',
\ 'wp_defer_term_counting(': 'bool $defer | bool',
\ 'wp_update_term_count(': 'int|array $terms, string $taxonomy,  $do_deferred | bool',
\ 'wp_update_term_count_now(': 'array $terms, string $taxonomy | bool',
\ 'clean_object_term_cache(': 'int|array $object_ids, array|string $object_type | void',
\ 'clean_term_cache(': 'int|array $ids, string $taxonomy, bool $clean_taxonomy | void',
\ 'get_object_term_cache(': 'int|array $id, string $taxonomy | bool|array',
\ 'update_object_term_cache(': 'string|array $object_ids, array|string $object_type | null|bool',
\ 'update_term_cache(': 'array $terms, string $taxonomy | void',
\ 'get_term_link(': 'object|int|string $term, string $taxonomy | string|\WP_Error',
\ 'the_taxonomies(': 'array $args | void',
\ 'get_the_taxonomies(': 'int $post, array $args | array',
\ 'get_post_taxonomies(': 'int $post | array',
\ 'is_object_in_term(': 'int $object_id, string $taxonomy, int|string|array $terms | bool|\WP_Error.',
\ 'is_object_in_taxonomy(': 'string $object_type, string $taxonomy | bool',
\ 'get_ancestors(': 'int $object_id, string $object_type | array',
\ 'wp_get_term_taxonomy_parent_id(': 'int $term_id, string $taxonomy | int|bool',
\ 'wp_check_term_hierarchy_for_loops(': 'int $parent, int $term_id, string $taxonomy | int',
\}

let g:phpcomplete_builtin['functions']['wp_query'] = {
\ 'get_query_var(': 'string $var | mixed',
\ 'get_queried_object(': 'void | object',
\ 'get_queried_object_id(': 'void | int',
\ 'set_query_var(': 'string $var, mixed $value | null',
\ 'query_posts(': 'string $query | array',
\ 'wp_reset_query(': 'void | void',
\ 'wp_reset_postdata(': 'void | void',
\ 'is_archive(': 'void | bool',
\ 'is_post_type_archive(': 'mixed $post_types | bool',
\ 'is_attachment(': 'void | bool',
\ 'is_author(': 'mixed $author | bool',
\ 'is_category(': 'mixed $category | bool',
\ 'is_tag(': 'mixed $tag | bool',
\ 'is_tax(': 'mixed $taxonomy, mixed $term | bool',
\ 'is_comments_popup(': 'void | bool',
\ 'is_date(': 'void | bool',
\ 'is_day(': 'void | bool',
\ 'is_feed(': 'string|array $feeds | bool',
\ 'is_comment_feed(': 'void | bool',
\ 'is_front_page(': 'void | bool',
\ 'is_home(': 'void | bool',
\ 'is_month(': 'void | bool',
\ 'is_page(': 'mixed $page | bool',
\ 'is_paged(': 'void | bool',
\ 'is_preview(': 'void | bool',
\ 'is_robots(': 'void | bool',
\ 'is_search(': 'void | bool',
\ 'is_single(': 'mixed $post | bool',
\ 'is_singular(': 'mixed $post_types | bool',
\ 'is_time(': 'void | bool',
\ 'is_trackback(': 'void | bool',
\ 'is_year(': 'void | bool',
\ 'is_404(': 'void | bool',
\ 'is_main_query(': 'void | bool',
\ 'have_posts(': 'void | bool',
\ 'in_the_loop(': 'void | bool',
\ 'rewind_posts(': 'void | null',
\ 'the_post(': 'void | void',
\ 'have_comments(': 'void | bool',
\ 'the_comment(': 'void | object',
\ 'wp_old_slug_redirect(': 'void | null',
\ 'setup_postdata(': 'object $post | bool',
\}

let g:phpcomplete_builtin['functions']['wp_functions_wp_scripts'] = {
\ 'wp_print_scripts(': 'array|bool $handles | array',
\ 'wp_register_script(': 'string $handle, string $src, array $deps, string|bool $ver, bool $in_footer | void',
\ 'wp_localize_script(': 'string $handle, string $object_name, array $l10n | bool',
\ 'wp_deregister_script(': 'string $handle | void',
\ 'wp_enqueue_script(': 'string $handle, string|bool $src, array $deps, string|bool $ver, bool $in_footer | void',
\ 'wp_dequeue_script(': 'string $handle | void',
\ 'wp_script_is(': 'string $handle, string $list | bool',
\}

let g:phpcomplete_builtin['functions']['wp_media'] = {
\ 'image_constrain_size_for_editor(': 'int $width, int $height, string|array $size,  $context | array',
\ 'image_hwstring(': 'int|string $width, int|string $height | string',
\ 'image_downsize(': 'int $id, array|string $size | bool|array',
\ 'add_image_size(': ' $name,  $width,  $height,  $crop | void',
\ 'set_post_thumbnail_size(': ' $width,  $height,  $crop | void',
\ 'get_image_tag(': 'int $id, string $alt, string $title, string $align, string $size | string',
\ 'wp_constrain_dimensions(': 'int $current_width, int $current_height, int $max_width, int $max_height | array',
\ 'image_resize_dimensions(': 'int $orig_w, int $orig_h, int $dest_w, int $dest_h, bool $crop | bool|array',
\ 'image_make_intermediate_size(': 'string $file, int $width, int $height, bool $crop | bool|array',
\ 'image_get_intermediate_size(': 'int $post_id, array|string $size | bool|array',
\ 'get_intermediate_image_sizes(': 'void | array',
\ 'wp_get_attachment_image_src(': 'int $attachment_id, string $size, bool $icon | bool|array',
\ 'wp_get_attachment_image(': 'int $attachment_id, string $size, bool $icon, mixed $attr | string',
\ 'img_caption_shortcode(': 'array $attr, string $content | string',
\ 'gallery_shortcode(': 'array $attr | string',
\ 'wp_mediaelement_fallback(': 'string $url | string',
\ 'wp_get_audio_extensions(': 'void | array',
\ 'wp_audio_shortcode(': 'array $attr, string $content | string',
\ 'wp_get_video_extensions(': 'void | array',
\ 'wp_video_shortcode(': 'array $attr, string $content | string',
\ 'previous_image_link(': 'string $size, string $text | string',
\ 'next_image_link(': 'string $size, string $text | string',
\ 'adjacent_image_link(': 'bool $prev,  $size,  $text | void',
\ 'get_attachment_taxonomies(': 'int|array|object $attachment | array',
\ 'get_taxonomies_for_attachments(': 'string $output | array',
\ 'wp_imagecreatetruecolor(': 'int $width, int $height | \image',
\ 'wp_embed_register_handler(': ' $id,  $regex,  $callback,  $priority | void',
\ 'wp_embed_unregister_handler(': ' $id,  $priority | void',
\ 'wp_embed_defaults(': 'void | array',
\ 'wp_expand_dimensions(': 'int $example_width, int $example_height, int $max_width, int $max_height | array',
\ 'wp_oembed_get(': 'string $url, array $args | bool|string',
\ 'wp_oembed_add_provider(': 'string $format, string $provider, boolean $regex | void',
\ 'wp_oembed_remove_provider(': 'string $format | void',
\ 'wp_maybe_load_embeds(': 'void | void',
\ 'wp_embed_handler_googlevideo(': 'array $matches, array $attr, string $url, array $rawattr | string',
\ 'wp_embed_handler_audio(': 'array $matches, array $attr, string $url, array $rawattr | string',
\ 'wp_embed_handler_video(': 'array $matches, array $attr, string $url, array $rawattr | string',
\ 'wp_convert_hr_to_bytes(': 'string $size | int',
\ 'wp_max_upload_size(': 'void | int',
\ 'wp_get_image_editor(': 'string $path, array $args | \WP_Image_Editor|\WP_Error',
\ 'wp_image_editor_supports(': 'string|array $args | boolean',
\ 'wp_plupload_default_settings(': 'void | void',
\ 'wp_prepare_attachment_for_js(': 'mixed $attachment | array',
\ 'wp_enqueue_media(': ' $args | void',
\ 'get_attached_media(': 'string $type, mixed $post | array',
\ 'get_media_embedded_in_content(': 'string $content, array $types | array',
\ 'get_post_galleries(': 'mixed $post, boolean $html | array',
\ 'get_post_gallery(': 'mixed $post, boolean $html | string|array',
\ 'get_post_galleries_images(': 'mixed $post | array',
\ 'get_post_gallery_images(': 'mixed $post | array',
\}

let g:phpcomplete_builtin['functions']['wp_formatting'] = {
\ 'wptexturize(': 'string $text | string',
\ 'wpautop(': 'string $pee, bool $br | string',
\ 'shortcode_unautop(': 'string $pee | string',
\ 'seems_utf8(': 'string $str | bool',
\ 'wp_specialchars_decode(': 'string $string, mixed $quote_style | string',
\ 'wp_check_invalid_utf8(': 'string $string, boolean $strip | string',
\ 'utf8_uri_encode(': 'string $utf8_string, int $length | string',
\ 'remove_accents(': 'string $string | string',
\ 'sanitize_file_name(': 'string $filename | string',
\ 'sanitize_user(': 'string $username, bool $strict | string',
\ 'sanitize_key(': 'string $key | string',
\ 'sanitize_title(': 'string $title, string $fallback_title, string $context | string',
\ 'sanitize_title_for_query(': 'string $title | string',
\ 'sanitize_title_with_dashes(': 'string $title, string $raw_title, string $context | string',
\ 'sanitize_sql_orderby(': 'string $orderby | string|bool',
\ 'sanitize_html_class(': 'string $class, string $fallback | string',
\ 'convert_chars(': 'string $content, string $deprecated | string',
\ 'balanceTags(': 'string $text, bool $force | string',
\ 'format_to_edit(': 'string $content, bool $richedit | string',
\ 'format_to_post(': 'string $content | string',
\ 'zeroise(': 'mixed $number, int $threshold | string',
\ 'backslashit(': 'string $string | string',
\ 'trailingslashit(': 'string $string | string',
\ 'untrailingslashit(': 'string $string | string',
\ 'addslashes_gpc(': 'string $gpc | string',
\ 'stripslashes_deep(': 'mixed $value | mixed',
\ 'urlencode_deep(': 'array|string $value | array|string',
\ 'rawurlencode_deep(': 'array|string $value | array|string',
\ 'antispambot(': 'string $email_address, int $hex_encoding | string',
\ 'make_clickable(': 'string $text | string',
\ 'wp_rel_nofollow(': 'string $text | string',
\ 'wp_rel_nofollow_callback(': 'array $matches | string',
\ 'translate_smiley(': 'array $matches | string',
\ 'convert_smilies(': 'string $text | string',
\ 'is_email(': 'string $email, boolean $deprecated | string|bool',
\ 'wp_iso_descrambler(': 'string $string | string',
\ 'get_gmt_from_date(': 'string $string, string $format | string',
\ 'get_date_from_gmt(': 'string $string, string $format | string',
\ 'iso8601_timezone_to_offset(': 'string $timezone | int|float',
\ 'iso8601_to_datetime(': 'string $date_string, string $timezone | string',
\ 'popuplinks(': 'string $text | string',
\ 'sanitize_email(': 'string $email | string',
\ 'human_time_diff(': 'int $from, int $to | string',
\ 'wp_trim_excerpt(': 'string $text | string',
\ 'wp_trim_words(': 'string $text, int $num_words, string $more | string',
\ 'ent2ncr(': 'string $text | string',
\ 'wp_richedit_pre(': 'string $text | string',
\ 'wp_htmledit_pre(': 'string $output | string',
\ 'esc_sql(': 'string|array $data | string|array',
\ 'esc_url(': 'string $url, array $protocols, string $_context | string',
\ 'esc_url_raw(': 'string $url, array $protocols | string',
\ 'htmlentities2(': 'string $myHTML | string',
\ 'esc_js(': 'string $text | string',
\ 'esc_html(': 'string $text | string',
\ 'esc_attr(': 'string $text | string',
\ 'esc_textarea(': 'string $text | string',
\ 'tag_escape(': 'string $tag_name | string',
\ 'like_escape(': 'string $text | string',
\ 'wp_make_link_relative(': 'string $link | string',
\ 'sanitize_option(': 'string $option, string $value | string',
\ 'wp_parse_str(': 'string $string, array $array | void',
\ 'wp_pre_kses_less_than(': 'string $text | string',
\ 'wp_pre_kses_less_than_callback(': 'array $matches | string',
\ 'wp_sprintf(': 'string $pattern | string',
\ 'wp_sprintf_l(': 'string $pattern, array $args | string',
\ 'wp_html_excerpt(': 'string $str, integer $count, string $more | string',
\ 'links_add_base_url(': 'string $content, string $base, array $attrs | string',
\ 'links_add_target(': 'string $content, string $target, array $tags | string',
\ 'normalize_whitespace(': 'string $str | string',
\ 'wp_strip_all_tags(': 'string $string, bool $remove_breaks | string',
\ 'sanitize_text_field(': 'string $str | string',
\ 'wp_basename(': 'string $path, string $suffix | string',
\ 'capital_P_dangit(': ' $text | void',
\ 'sanitize_mime_type(': 'string $mime_type | string',
\ 'sanitize_trackback_urls(': 'string $to_ping | string',
\ 'wp_slash(': 'string|array $value | string|array',
\ 'wp_unslash(': 'string|array $value | string|array',
\ 'get_url_in_content(': 'string $content | string',
\}

let g:phpcomplete_builtin['functions']['wp_admin_bar'] = {
\ 'wp_admin_bar_render(': 'void | void',
\ 'wp_admin_bar_wp_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_sidebar_toggle(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_my_account_item(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_my_account_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_site_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_my_sites_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_shortlink_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_edit_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_new_content_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_comments_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_appearance_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_updates_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_search_menu(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_add_secondary_groups(': '\WP_Admin_Bar $wp_admin_bar | void',
\ 'wp_admin_bar_header(': 'void | void',
\ 'show_admin_bar(': 'bool $show | void',
\ 'is_admin_bar_showing(': 'void | bool',
\}

let g:phpcomplete_builtin['functions']['wp_post_template'] = {
\ 'the_ID(': 'void | void',
\ 'get_the_ID(': 'void | int',
\ 'the_title(': 'string $before, string $after, bool $echo | null|string',
\ 'the_title_attribute(': 'string|array $args | string|null',
\ 'get_the_title(': 'int|object $post | string',
\ 'the_guid(': 'int $id | void',
\ 'get_the_guid(': 'int $id | string',
\ 'the_content(': 'string $more_link_text, bool $strip_teaser | void',
\ 'get_the_content(': 'string $more_link_text,  $strip_teaser | string',
\ 'the_excerpt(': 'void | void',
\ 'get_the_excerpt(': 'mixed $deprecated | string',
\ 'has_excerpt(': 'int $id | bool',
\ 'post_class(': 'string|array $class, int $post_id | void',
\ 'get_post_class(': 'string|array $class, int $post_id | array',
\ 'body_class(': 'string|array $class | void',
\ 'get_body_class(': 'string|array $class | array',
\ 'post_password_required(': 'int|\WP_Post $post | bool',
\ 'wp_link_pages(': 'string|array $args | string',
\ 'post_custom(': 'string $key | bool|string|array',
\ 'wp_dropdown_pages(': 'array|string $args | string',
\ 'wp_list_pages(': 'array|string $args | string',
\ 'wp_page_menu(': 'array|string $args | string',
\ 'walk_page_tree(': ' $pages,  $depth,  $current_page,  $r | void',
\ 'walk_page_dropdown_tree(': 'void | void',
\ 'the_attachment_link(': 'int $id, bool $fullsize, bool $deprecated, bool $permalink | void',
\ 'wp_get_attachment_link(': 'int $id, string $size, bool $permalink, bool $icon, string|bool $text | string',
\ 'prepend_attachment(': 'string $content | string',
\ 'get_the_password_form(': 'int|\WP_Post $post | string',
\ 'is_page_template(': 'string $template | bool',
\ 'get_page_template_slug(': 'int $post_id | string|bool',
\ 'wp_post_revision_title(': 'int|object $revision, bool $link | string',
\ 'wp_post_revision_title_expanded(': 'int|object $revision, bool $link | string',
\ 'wp_list_post_revisions(': 'int|object $post_id, string $type | null',
\ 'wp_382_css_hotfix(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_comment_template'] = {
\ 'get_comment_author(': 'int $comment_ID | string',
\ 'comment_author(': 'int $comment_ID | void',
\ 'get_comment_author_email(': 'int $comment_ID | string',
\ 'comment_author_email(': 'int $comment_ID | void',
\ 'comment_author_email_link(': 'string $linktext, string $before, string $after | void',
\ 'get_comment_author_email_link(': 'string $linktext, string $before, string $after | void',
\ 'get_comment_author_link(': 'int $comment_ID | string',
\ 'comment_author_link(': 'int $comment_ID | void',
\ 'get_comment_author_IP(': 'int $comment_ID | string',
\ 'comment_author_IP(': 'int $comment_ID | void',
\ 'get_comment_author_url(': 'int $comment_ID | string',
\ 'comment_author_url(': 'int $comment_ID | void',
\ 'get_comment_author_url_link(': 'string $linktext, string $before, string $after | string',
\ 'comment_author_url_link(': 'string $linktext, string $before, string $after | void',
\ 'comment_class(': 'string|array $class, int $comment_id, int|\WP_Post $post_id, bool $echo | void',
\ 'get_comment_class(': 'string|array $class, int $comment_id, int|\WP_Post $post_id | array',
\ 'get_comment_date(': 'string $d, int $comment_ID | string',
\ 'comment_date(': 'string $d, int $comment_ID | void',
\ 'get_comment_excerpt(': 'int $comment_ID | string',
\ 'comment_excerpt(': 'int $comment_ID | void',
\ 'get_comment_ID(': 'void | int',
\ 'comment_ID(': 'void | void',
\ 'get_comment_link(': 'mixed $comment, array $args | string',
\ 'get_comments_link(': 'int|\WP_Post $post_id | string',
\ 'comments_link(': 'string $deprecated, bool $deprecated_2 | void',
\ 'get_comments_number(': 'int|\WP_Post $post_id | int',
\ 'comments_number(': 'string $zero, string $one, string $more, string $deprecated | void',
\ 'get_comment_text(': 'int $comment_ID, array $args | string',
\ 'comment_text(': 'int $comment_ID, array $args | void',
\ 'get_comment_time(': 'string $d, bool $gmt, bool $translate | string',
\ 'comment_time(': 'string $d | void',
\ 'get_comment_type(': 'int $comment_ID | string',
\ 'comment_type(': 'string $commenttxt, string $trackbacktxt, string $pingbacktxt | void',
\ 'get_trackback_url(': 'void | string',
\ 'trackback_url(': 'bool $deprecated_echo | void|string',
\ 'trackback_rdf(': 'int $deprecated | void',
\ 'comments_open(': 'int|\WP_Post $post_id | bool',
\ 'pings_open(': 'int|\WP_Post $post_id | bool',
\ 'wp_comment_form_unfiltered_html_nonce(': 'void | void',
\ 'comments_template(': 'string $file, bool $separate_comments | null',
\ 'comments_popup_script(': 'int $width, int $height, string $file | void',
\ 'comments_popup_link(': 'string $zero, string $one, string $more, string $css_class, string $none | null',
\ 'get_comment_reply_link(': 'array $args, int $comment, int|\WP_Post $post | mixed',
\ 'comment_reply_link(': 'array $args, int $comment, int|\WP_Post $post | mixed',
\ 'get_post_reply_link(': 'array $args, int|\WP_Post $post | string|bool|null',
\ 'post_reply_link(': 'array $args, int|\WP_Post $post | string|bool|null',
\ 'get_cancel_comment_reply_link(': 'string $text | void',
\ 'cancel_comment_reply_link(': 'string $text | void',
\ 'get_comment_id_fields(': 'int $id | string',
\ 'comment_id_fields(': 'int $id | void',
\ 'comment_form_title(': 'string $noreplytext, string $replytext, string $linktoparent | void',
\ 'wp_list_comments(': 'string|array $args, array $comments | void',
\ 'comment_form(': 'array $args, int|\WP_Post $post_id | void',
\}

let g:phpcomplete_builtin['functions']['wp_general_template'] = {
\ 'get_header(': 'string $name | void',
\ 'get_footer(': 'string $name | void',
\ 'get_sidebar(': 'string $name | void',
\ 'get_template_part(': 'string $slug, string $name | void',
\ 'get_search_form(': 'boolean $echo | string|null',
\ 'wp_loginout(': 'string $redirect, boolean $echo | string|null',
\ 'wp_logout_url(': 'string $redirect | string',
\ 'wp_login_url(': 'string $redirect, bool $force_reauth | string',
\ 'wp_registration_url(': 'void | string',
\ 'wp_login_form(': 'array $args | string|null',
\ 'wp_lostpassword_url(': 'string $redirect | string',
\ 'wp_register(': 'string $before, string $after, boolean $echo | string|null',
\ 'wp_meta(': 'void | void',
\ 'bloginfo(': 'string $show | void',
\ 'get_bloginfo(': 'string $show, string $filter | string',
\ 'wp_title(': 'string $sep, bool $display, string $seplocation | string|null',
\ 'single_post_title(': 'string $prefix, bool $display | string|null',
\ 'post_type_archive_title(': 'string $prefix, bool $display | string|null',
\ 'single_cat_title(': 'string $prefix, bool $display | string|null',
\ 'single_tag_title(': 'string $prefix, bool $display | string|null',
\ 'single_term_title(': 'string $prefix, bool $display | string|null',
\ 'single_month_title(': 'string $prefix, bool $display | string|null',
\ 'get_archives_link(': 'string $url, string $text, string $format, string $before, string $after | string',
\ 'wp_get_archives(': 'string|array $args | string|null',
\ 'calendar_week_mod(': 'int $num | int',
\ 'get_calendar(': 'bool $initial, bool $echo | string|null',
\ 'delete_get_calendar_cache(': 'void | void',
\ 'allowed_tags(': 'void | string',
\ 'the_date_xml(': 'void | void',
\ 'the_date(': 'string $d, string $before, string $after, bool $echo | string|null',
\ 'get_the_date(': 'string $d | string|null',
\ 'the_modified_date(': 'string $d, string $before, string $after, bool $echo | string|null',
\ 'get_the_modified_date(': 'string $d | string',
\ 'the_time(': 'string $d | void',
\ 'get_the_time(': 'string $d, int|object $post | string',
\ 'get_post_time(': 'string $d, bool $gmt, int|object $post, bool $translate | string',
\ 'the_modified_time(': 'string $d | void',
\ 'get_the_modified_time(': 'string $d | string',
\ 'get_post_modified_time(': 'string $d, bool $gmt, int|object $post, bool $translate | string',
\ 'the_weekday(': 'void | void',
\ 'the_weekday_date(': 'string $before, string $after | void',
\ 'wp_head(': 'void | void',
\ 'wp_footer(': 'void | void',
\ 'feed_links(': 'array $args | void',
\ 'feed_links_extra(': 'array $args | void',
\ 'rsd_link(': 'void | void',
\ 'wlwmanifest_link(': 'void | void',
\ 'noindex(': 'void | void',
\ 'wp_no_robots(': 'void | void',
\ 'rich_edit_exists(': 'void | bool',
\ 'user_can_richedit(': 'void | bool',
\ 'wp_default_editor(': 'void | string',
\ 'wp_editor(': 'string $content, string $editor_id, array $settings | void',
\ 'get_search_query(': 'bool $escaped | string',
\ 'the_search_query(': 'void | void',
\ 'language_attributes(': 'string $doctype | void',
\ 'paginate_links(': 'string|array $args | array|string',
\ 'wp_admin_css_color(': 'string $key, string $name, string $url, array $colors, array $icons | void',
\ 'register_admin_color_schemes(': 'void | void',
\ 'wp_admin_css_uri(': 'string $file | void',
\ 'wp_admin_css(': 'string $file, bool $force_echo | void',
\ 'add_thickbox(': 'void | void',
\ 'wp_generator(': 'void | void',
\ 'the_generator(': 'string $type | void',
\ 'get_the_generator(': 'string $type | string',
\ 'checked(': 'mixed $checked, mixed $current, bool $echo | string',
\ 'selected(': 'mixed $selected, mixed $current, bool $echo | string',
\ 'disabled(': 'mixed $disabled, mixed $current, bool $echo | string',
\ 'wp_heartbeat_settings(': 'array $settings | array',
\}

let g:phpcomplete_builtin['functions']['wp_template'] = {
\ 'get_query_template(': 'string $type, array $templates | string',
\ 'get_index_template(': 'void | string',
\ 'get_404_template(': 'void | string',
\ 'get_archive_template(': 'void | string',
\ 'get_post_type_archive_template(': 'void | string',
\ 'get_author_template(': 'void | string',
\ 'get_category_template(': 'void | string',
\ 'get_tag_template(': 'void | string',
\ 'get_taxonomy_template(': 'void | string',
\ 'get_date_template(': 'void | string',
\ 'get_home_template(': 'void | string',
\ 'get_front_page_template(': 'void | string',
\ 'get_page_template(': 'void | string',
\ 'get_paged_template(': 'void | string',
\ 'get_search_template(': 'void | string',
\ 'get_single_template(': 'void | string',
\ 'get_attachment_template(': 'void | string',
\ 'get_comments_popup_template(': 'void | string',
\ 'locate_template(': 'string|array $template_names, bool $load, bool $require_once | string',
\ 'load_template(': 'string $_template_file, bool $require_once | void',
\}

let g:phpcomplete_builtin['functions']['wp_comment'] = {
\ 'check_comment(': 'string $author, string $email, string $url, string $comment, string $user_ip, string $user_agent, string $comment_type | bool',
\ 'get_approved_comments(': 'int $post_id | array',
\ 'get_comment(': 'object|string|int $comment, string $output | object|array|null',
\ 'get_comments(': 'mixed $args | array',
\ 'get_comment_statuses(': 'void | array',
\ 'get_lastcommentmodified(': 'string $timezone | string',
\ 'get_comment_count(': 'int $post_id | array',
\ 'add_comment_meta(': 'int $comment_id, string $meta_key, mixed $meta_value, bool $unique | int|bool',
\ 'delete_comment_meta(': 'int $comment_id, string $meta_key, mixed $meta_value | bool',
\ 'get_comment_meta(': 'int $comment_id, string $key, bool $single | mixed',
\ 'update_comment_meta(': 'int $comment_id, string $meta_key, mixed $meta_value, mixed $prev_value | bool',
\ 'wp_set_comment_cookies(': 'object $comment, object $user | void',
\ 'sanitize_comment_cookies(': 'void | void',
\ 'wp_allow_comment(': 'array $commentdata | mixed',
\ 'check_comment_flood_db(': 'string $ip, string $email, string $date | void',
\ 'separate_comments(': 'array $comments | array',
\ 'get_comment_pages_count(': 'array $comments, int $per_page, boolean $threaded | int',
\ 'get_page_of_comment(': 'int $comment_ID, array $args | int|null',
\ 'wp_blacklist_check(': 'string $author, string $email, string $url, string $comment, string $user_ip, string $user_agent | bool',
\ 'wp_count_comments(': 'int $post_id | object',
\ 'wp_delete_comment(': 'int $comment_id, bool $force_delete | bool',
\ 'wp_trash_comment(': 'int $comment_id | bool',
\ 'wp_untrash_comment(': 'int $comment_id | bool',
\ 'wp_spam_comment(': 'int $comment_id | bool',
\ 'wp_unspam_comment(': 'int $comment_id | bool',
\ 'wp_get_comment_status(': 'int $comment_id | string|bool',
\ 'wp_transition_comment_status(': 'string $new_status, string $old_status, object $comment | void',
\ 'wp_get_current_commenter(': 'void | array',
\ 'wp_insert_comment(': 'array $commentdata | int',
\ 'wp_filter_comment(': 'array $commentdata | array',
\ 'wp_throttle_comment_flood(': 'bool $block, int $time_lastcomment, int $time_newcomment | bool',
\ 'wp_new_comment(': 'array $commentdata | int',
\ 'wp_set_comment_status(': 'int $comment_id, string $comment_status, bool $wp_error | bool|\WP_Error',
\ 'wp_update_comment(': 'array $commentarr | int',
\ 'wp_defer_comment_counting(': 'bool $defer | \unknown',
\ 'wp_update_comment_count(': 'int $post_id, bool $do_deferred | bool',
\ 'wp_update_comment_count_now(': 'int $post_id | bool',
\ 'discover_pingback_server_uri(': 'string $url, int $deprecated | bool|string',
\ 'do_all_pings(': 'void | void',
\ 'do_trackbacks(': 'int $post_id | void',
\ 'generic_ping(': 'int $post_id | int',
\ 'pingback(': 'string $content, int $post_ID | void',
\ 'privacy_ping_filter(': 'mixed $sites | mixed',
\ 'trackback(': 'string $trackback_url, string $title, string $excerpt, int $ID | mixed',
\ 'weblog_ping(': 'string $server, string $path | void',
\ 'pingback_ping_source_uri(': 'string $source_uri | string',
\ 'xmlrpc_pingback_error(': '\IXR_Error $ixr_error | \IXR_Error',
\ 'clean_comment_cache(': 'int|array $ids | void',
\ 'update_comment_cache(': 'array $comments | void',
\}

let g:phpcomplete_builtin['functions']['wp_media_template'] = {
\ 'wp_print_media_templates(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_post'] = {
\ 'create_initial_post_types(': 'void | void',
\ 'get_attached_file(': 'int $attachment_id, bool $unfiltered | string|bool',
\ 'update_attached_file(': 'int $attachment_id, string $file | bool',
\ 'get_extended(': 'string $post | array',
\ 'get_post(': 'int|object $post, string $output, string $filter | \WP_Post|null',
\ 'get_post_ancestors(': 'int|object $post | array',
\ 'get_post_field(': 'string $field, int|object $post, string $context | string',
\ 'get_post_mime_type(': 'int $ID | string|bool',
\ 'get_post_status(': 'int $ID | string|bool',
\ 'get_post_statuses(': 'void | array',
\ 'get_page_statuses(': 'void | array',
\ 'register_post_status(': 'string $post_status, array|string $args | void',
\ 'get_post_status_object(': 'string $post_status | object',
\ 'get_post_stati(': 'array|string $args, string $output, string $operator | array',
\ 'is_post_type_hierarchical(': 'string $post_type | bool',
\ 'post_type_exists(': 'string $post_type | bool',
\ 'get_post_type(': 'int|object $post | string|bool',
\ 'get_post_type_object(': 'string $post_type | object',
\ 'get_post_types(': 'array|string $args, string $output, string $operator | array',
\ 'register_post_type(': 'string $post_type, array|string $args | object|\WP_Error',
\ 'get_post_type_capabilities(': 'object $args | object',
\ 'get_post_type_labels(': 'object $post_type_object | object',
\ 'add_post_type_support(': 'string $post_type, string|array $feature | void',
\ 'remove_post_type_support(': 'string $post_type, string $feature | void',
\ 'get_all_post_type_supports(': 'string $post_type | array',
\ 'post_type_supports(': 'string $post_type, string $feature | boolean',
\ 'set_post_type(': 'int $post_id, string $post_type | int',
\ 'get_posts(': 'array $args | array',
\ 'add_post_meta(': 'int $post_id, string $meta_key, mixed $meta_value, bool $unique | int|bool',
\ 'delete_post_meta(': 'int $post_id, string $meta_key, mixed $meta_value | bool',
\ 'get_post_meta(': 'int $post_id, string $key, bool $single | mixed',
\ 'update_post_meta(': 'int $post_id, string $meta_key, mixed $meta_value, mixed $prev_value | bool',
\ 'delete_post_meta_by_key(': 'string $post_meta_key | bool',
\ 'get_post_custom(': 'int $post_id | array',
\ 'get_post_custom_keys(': 'int $post_id | array|null',
\ 'get_post_custom_values(': 'string $key, int $post_id | array',
\ 'is_sticky(': 'int $post_id | bool',
\ 'sanitize_post(': 'object|\WP_Post|array $post, string $context | object|\WP_Post|array',
\ 'sanitize_post_field(': 'string $field, mixed $value, int $post_id, string $context | mixed',
\ 'stick_post(': 'int $post_id | void',
\ 'unstick_post(': 'int $post_id | void',
\ 'wp_count_posts(': 'string $type, string $perm | object',
\ 'wp_count_attachments(': 'string|array $mime_type | array',
\ 'get_post_mime_types(': 'void | array',
\ 'wp_match_mime_types(': 'string|array $wildcard_mime_types, string|array $real_mime_types | array',
\ 'wp_post_mime_type_where(': 'string|array $post_mime_types, string $table_alias | string',
\ 'wp_delete_post(': 'int $postid, bool $force_delete | mixed',
\ 'wp_trash_post(': 'int $post_id | mixed',
\ 'wp_untrash_post(': 'int $post_id | mixed',
\ 'wp_trash_post_comments(': 'int|object $post | mixed',
\ 'wp_untrash_post_comments(': 'int|object $post | mixed',
\ 'wp_get_post_categories(': 'int $post_id, array $args | array',
\ 'wp_get_post_tags(': 'int $post_id, array $args | array',
\ 'wp_get_post_terms(': 'int $post_id, string $taxonomy, array $args | array',
\ 'wp_get_recent_posts(': 'array $args, string $output | \unknown.',
\ 'wp_insert_post(': 'array $postarr, bool $wp_error | int|\WP_Error',
\ 'wp_update_post(': 'array|object $postarr, bool $wp_error | int|\WP_Error',
\ 'wp_publish_post(': 'int|object $post | void',
\ 'check_and_publish_future_post(': 'int $post_id | null',
\ 'wp_unique_post_slug(': 'string $slug, integer $post_ID, string $post_status, string $post_type, integer $post_parent | string',
\ 'wp_add_post_tags(': 'int $post_id, string $tags | bool|null',
\ 'wp_set_post_tags(': 'int $post_id, string $tags, bool $append | mixed',
\ 'wp_set_post_terms(': 'int $post_id, string $tags, string $taxonomy, bool $append | mixed',
\ 'wp_set_post_categories(': 'int $post_ID, array|int $post_categories, bool $append | bool|mixed',
\ 'wp_transition_post_status(': 'string $new_status, string $old_status, object $post | void',
\ 'add_ping(': 'int $post_id, string $uri | int',
\ 'get_enclosed(': 'int $post_id | array',
\ 'get_pung(': 'int $post_id | array',
\ 'get_to_ping(': 'int $post_id | array',
\ 'trackback_url_list(': 'string $tb_list, int $post_id | void',
\ 'get_all_page_ids(': 'void | array',
\ 'get_page_by_path(': 'string $page_path, string $output, string $post_type | \WP_Post|null',
\ 'get_page_by_title(': 'string $page_title, string $output, string $post_type | \WP_Post|null',
\ 'get_page_children(': 'int $page_id, array $pages | array',
\ 'get_page_hierarchy(': 'array $pages, int $page_id | array',
\ 'get_page_uri(': 'mixed $page | string|false',
\ 'get_pages(': 'mixed $args | array',
\ 'is_local_attachment(': 'string $url | bool',
\ 'wp_insert_attachment(': 'string|array $object, string $file, int $parent | int',
\ 'wp_delete_attachment(': 'int $post_id, bool $force_delete | mixed',
\ 'wp_get_attachment_metadata(': 'int $post_id, bool $unfiltered | string|bool',
\ 'wp_update_attachment_metadata(': 'int $post_id, array $data | int',
\ 'wp_get_attachment_url(': 'int $post_id | string',
\ 'wp_get_attachment_thumb_file(': 'int $post_id | mixed',
\ 'wp_get_attachment_thumb_url(': 'int $post_id | string|bool',
\ 'wp_attachment_is_image(': 'int $post_id | bool',
\ 'wp_mime_type_icon(': 'string|int $mime | string|bool',
\ 'wp_check_for_changed_slugs(': 'int $post_id, object $post, object $post_before | int',
\ 'get_private_posts_cap_sql(': 'string $post_type | string',
\ 'get_posts_by_author_sql(': 'string $post_type, bool $full, int $post_author, bool $public_only | string',
\ 'get_lastpostdate(': 'string $timezone | string',
\ 'get_lastpostmodified(': 'string $timezone | string',
\ 'update_post_cache(': 'array $posts | void',
\ 'clean_post_cache(': 'int|object $post | void',
\ 'update_post_caches(': 'array $posts, string $post_type, bool $update_term_cache, bool $update_meta_cache | void',
\ 'update_postmeta_cache(': 'array $post_ids | bool|array',
\ 'clean_attachment_cache(': 'int $id, bool $clean_terms | void',
\ 'wp_get_post_parent_id(': ' $post_ID | int|bool',
\ 'wp_check_post_hierarchy_for_loops(': 'int $post_parent, int $post_ID | int',
\ 'set_post_thumbnail(': 'int|object $post, int $thumbnail_id | bool',
\ 'delete_post_thumbnail(': 'int|object $post | bool',
\ 'wp_delete_auto_drafts(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_author_template'] = {
\ 'get_the_author(': 'string $deprecated | string',
\ 'the_author(': 'string $deprecated, string $deprecated_echo | string',
\ 'get_the_modified_author(': 'void | string',
\ 'the_modified_author(': 'void | string',
\ 'get_the_author_meta(': 'string $field, int $user_id | string',
\ 'the_author_meta(': 'string $field, int $user_id | void',
\ 'get_the_author_link(': 'void | void',
\ 'the_author_link(': 'void | void',
\ 'get_the_author_posts(': 'void | int',
\ 'the_author_posts(': 'void | void',
\ 'the_author_posts_link(': 'string $deprecated | void',
\ 'get_author_posts_url(': ' $author_id,  $author_nicename | string',
\ 'wp_list_authors(': 'array $args | null|string',
\ 'is_multi_author(': 'void | bool',
\}

let g:phpcomplete_builtin['functions']['wp_category'] = {
\ 'get_all_category_ids(': 'void | object',
\ 'get_categories(': 'string|array $args | array',
\ 'get_category(': 'int|object $category, string $output, string $filter | mixed',
\ 'get_category_by_path(': 'string $category_path, bool $full_match, string $output | null|object|array',
\ 'get_category_by_slug(': 'string $slug | object',
\ 'get_cat_ID(': 'string $cat_name | int',
\ 'get_cat_name(': 'int $cat_id | string',
\ 'cat_is_ancestor_of(': 'int|object $cat1, int|object $cat2 | bool',
\ 'sanitize_category(': 'object|array $category, string $context | object|array',
\ 'sanitize_category_field(': 'string $field, mixed $value, int $cat_id, string $context | mixed',
\ 'get_tags(': 'string|array $args | array',
\ 'get_tag(': 'int|object $tag, string $output, string $filter | object|array',
\ 'clean_category_cache(': 'int $id | void',
\}

let g:phpcomplete_builtin['functions']['wp_l10n'] = {
\ 'get_locale(': 'void | string',
\ 'translate(': 'string $text, string $domain | string',
\ 'before_last_bar(': 'string $string | string',
\ 'translate_with_gettext_context(': 'string $text, string $context, string $domain | string',
\ 'esc_attr__(': 'string $text, string $domain | string',
\ 'esc_html__(': 'string $text, string $domain | string',
\ 'esc_attr_e(': 'string $text, string $domain | void',
\ 'esc_html_e(': 'string $text, string $domain | void',
\ 'esc_attr_x(': 'string $text, string $context, string $domain | string',
\ 'esc_html_x(': 'string $text, string $context, string $domain | string',
\ 'translate_nooped_plural(': 'array $nooped_plural, int $count, string $domain | string',
\ 'load_textdomain(': 'string $domain, string $mofile | bool',
\ 'unload_textdomain(': 'string $domain | bool',
\ 'load_default_textdomain(': 'void | void',
\ 'load_plugin_textdomain(': 'string $domain, string $deprecated, string $plugin_rel_path | void',
\ 'load_muplugin_textdomain(': 'string $domain, string $mu_plugin_rel_path | bool',
\ 'load_theme_textdomain(': 'string $domain, string $path | bool',
\ 'load_child_theme_textdomain(': 'string $domain,  $path | bool',
\ 'get_translations_for_domain(': 'string $domain | \Translations',
\ 'is_textdomain_loaded(': 'string $domain | bool',
\ 'translate_user_role(': 'string $name | string',
\ 'get_available_languages(': 'string $dir | array',
\ 'wp_get_installed_translations(': 'string $type | array',
\ 'wp_get_pomo_file_data(': 'string $po_file | array',
\}

let g:phpcomplete_builtin['functions']['wp_link_template'] = {
\ 'the_permalink(': 'void | void',
\ 'user_trailingslashit(': 'string $string, string $type_of_url | string',
\ 'permalink_anchor(': 'string $mode | void',
\ 'get_permalink(': 'int|\WP_Post $id, bool $leavename | string|bool',
\ 'get_post_permalink(': 'int $id, bool $leavename, bool $sample | string',
\ 'post_permalink(': 'int $post_id, mixed $deprecated | string',
\ 'get_page_link(': 'int|object $post, bool $leavename, bool $sample | string',
\ 'get_attachment_link(': 'int|object $post, bool $leavename | string',
\ 'get_year_link(': 'int|bool $year | string',
\ 'get_month_link(': 'bool|int $year, bool|int $month | string',
\ 'get_day_link(': 'bool|int $year, bool|int $month, bool|int $day | string',
\ 'the_feed_link(': 'string $anchor, string $feed | void',
\ 'get_feed_link(': 'string $feed | string',
\ 'get_post_comments_feed_link(': 'int $post_id, string $feed | string',
\ 'post_comments_feed_link(': 'string $link_text, int $post_id, string $feed | string',
\ 'get_author_feed_link(': 'int $author_id, string $feed | string',
\ 'get_category_feed_link(': 'int $cat_id, string $feed | string',
\ 'get_term_feed_link(': 'int $term_id, string $taxonomy, string $feed | string',
\ 'get_tag_feed_link(': 'int $tag_id, string $feed | string',
\ 'get_edit_tag_link(': 'int $tag_id, string $taxonomy | string',
\ 'edit_tag_link(': 'string $link, string $before, string $after, object $tag | string',
\ 'get_edit_term_link(': 'int $term_id, string $taxonomy, string $object_type | string',
\ 'edit_term_link(': 'string $link, string $before, string $after, object $term,  $echo | string',
\ 'get_search_link(': 'string $query | string',
\ 'get_search_feed_link(': 'string $search_query, string $feed | string',
\ 'get_search_comments_feed_link(': 'string $search_query, string $feed | string',
\ 'get_post_type_archive_link(': 'string $post_type | string',
\ 'get_post_type_archive_feed_link(': 'string $post_type, string $feed | string',
\ 'get_edit_post_link(': 'int $id, string $context | string',
\ 'edit_post_link(': 'string $link, string $before, string $after, int $id | void',
\ 'get_delete_post_link(': 'int $id, string $deprecated, bool $force_delete | string',
\ 'get_edit_comment_link(': 'int $comment_id | string',
\ 'edit_comment_link(': 'string $link, string $before, string $after | string|null',
\ 'get_edit_bookmark_link(': 'int $link | string',
\ 'edit_bookmark_link(': 'string $link, string $before, string $after, int $bookmark | void',
\ 'get_edit_user_link(': 'int $user_id | string',
\ 'get_previous_post(': 'bool $in_same_term, array|string $excluded_terms, string $taxonomy | mixed',
\ 'get_next_post(': 'bool $in_same_term, array|string $excluded_terms, string $taxonomy | mixed',
\ 'get_adjacent_post(': 'bool $in_same_term, array|string $excluded_terms, bool $previous, string $taxonomy | mixed',
\ 'get_adjacent_post_rel_link(': 'string $title, bool $in_same_term, array|string $excluded_terms, bool $previous, string $taxonomy | string',
\ 'adjacent_posts_rel_link(': 'string $title, bool $in_same_term, array|string $excluded_terms, string $taxonomy | void',
\ 'adjacent_posts_rel_link_wp_head(': 'void | void',
\ 'next_post_rel_link(': 'string $title, bool $in_same_term, array|string $excluded_terms, string $taxonomy | void',
\ 'prev_post_rel_link(': 'string $title, bool $in_same_term, array|string $excluded_terms, string $taxonomy | void',
\ 'get_boundary_post(': 'bool $in_same_term, array|string $excluded_terms, bool $start, string $taxonomy | object',
\ 'get_previous_post_link(': ' $format,  $link,  $in_same_cat,  $excluded_terms,  $taxonomy | void',
\ 'previous_post_link(': 'string $format, string $link,  $in_same_cat, array|string $excluded_terms, string $taxonomy | void',
\ 'get_next_post_link(': 'string $format, string $link,  $in_same_cat, array|string $excluded_terms, string $taxonomy | string',
\ 'next_post_link(': 'string $format, string $link,  $in_same_cat, array|string $excluded_terms, string $taxonomy | void',
\ 'get_adjacent_post_link(': 'string $format, string $link,  $in_same_cat, array|string $excluded_terms, bool $previous, string $taxonomy | string',
\ 'adjacent_post_link(': 'string $format, string $link, bool $in_same_cat, array|string $excluded_terms, bool $previous, string $taxonomy | string',
\ 'get_pagenum_link(': 'int $pagenum, bool $escape | string',
\ 'get_next_posts_page_link(': 'int $max_page | string',
\ 'next_posts(': 'int $max_page, boolean $echo | void',
\ 'get_next_posts_link(': 'string $label, int $max_page | string|null',
\ 'next_posts_link(': 'string $label, int $max_page | void',
\ 'get_previous_posts_page_link(': 'void | string|null',
\ 'previous_posts(': 'boolean $echo | void',
\ 'get_previous_posts_link(': 'string $label | string|null',
\ 'previous_posts_link(': 'string $label | void',
\ 'get_posts_nav_link(': 'string|array $args | string',
\ 'posts_nav_link(': 'string $sep, string $prelabel, string $nxtlabel | void',
\ 'get_comments_pagenum_link(': 'int $pagenum,  $max_page | string',
\ 'get_next_comments_link(': 'string $label, int $max_page | string|null',
\ 'next_comments_link(': 'string $label, int $max_page | void',
\ 'get_previous_comments_link(': 'string $label | string|null',
\ 'previous_comments_link(': 'string $label | void',
\ 'paginate_comments_links(': 'string|array $args | string',
\ 'get_shortcut_link(': 'void | string',
\ 'home_url(': 'string $path, string $scheme | string',
\ 'get_home_url(': 'int $blog_id, string $path, string $scheme | string',
\ 'site_url(': 'string $path, string $scheme | string',
\ 'get_site_url(': 'int $blog_id, string $path, string $scheme | string',
\ 'admin_url(': 'string $path, string $scheme | string',
\ 'get_admin_url(': 'int $blog_id, string $path, string $scheme | string',
\ 'includes_url(': 'string $path, string $scheme | string',
\ 'content_url(': 'string $path | string',
\ 'plugins_url(': 'string $path, string $plugin | string',
\ 'network_site_url(': 'string $path, string $scheme | string',
\ 'network_home_url(': 'string $path, string $scheme | string',
\ 'network_admin_url(': 'string $path, string $scheme | string',
\ 'user_admin_url(': 'string $path, string $scheme | string',
\ 'self_admin_url(': 'string $path, string $scheme | string',
\ 'set_url_scheme(': 'string $url, string $scheme | string',
\ 'get_dashboard_url(': 'int $user_id, string $path, string $scheme | string',
\ 'get_edit_profile_url(': 'int $user, string $scheme | string',
\ 'rel_canonical(': 'void | void',
\ 'wp_get_shortlink(': 'int $id, string $context, bool $allow_slugs | string',
\ 'wp_shortlink_wp_head(': 'void | void',
\ 'wp_shortlink_header(': 'void | void',
\ 'the_shortlink(': 'string $text, string $title, string $before, string $after | void',
\}

let g:phpcomplete_builtin['functions']['wp_pluggable'] = {
\ 'wp_set_current_user(': 'int $id, string $name | \WP_User',
\ 'wp_get_current_user(': 'void | \WP_User',
\ 'get_currentuserinfo(': 'void | bool|null',
\ 'get_userdata(': 'int $user_id | \WP_User|bool',
\ 'get_user_by(': 'string $field, int|string $value | \WP_User|bool',
\ 'cache_users(': 'array $user_ids | void',
\ 'wp_mail(': 'string|array $to, string $subject, string $message, string|array $headers, string|array $attachments | bool',
\ 'wp_authenticate(': 'string $username, string $password | \WP_User|\WP_Error',
\ 'wp_logout(': 'void | void',
\ 'wp_validate_auth_cookie(': 'string $cookie, string $scheme | bool|int',
\ 'wp_generate_auth_cookie(': 'int $user_id, int $expiration, string $scheme | string',
\ 'wp_parse_auth_cookie(': 'string $cookie, string $scheme | array',
\ 'wp_set_auth_cookie(': 'int $user_id, bool $remember,  $secure | void',
\ 'wp_clear_auth_cookie(': 'void | void',
\ 'is_user_logged_in(': 'void | bool',
\ 'auth_redirect(': 'void | void',
\ 'check_admin_referer(': 'string $action, string $query_arg | void',
\ 'check_ajax_referer(': 'string $action, string $query_arg,  $die | void',
\ 'wp_redirect(': 'string $location, int $status | bool',
\ 'wp_sanitize_redirect(': ' $location | string',
\ 'wp_safe_redirect(': ' $location,  $status | void',
\ 'wp_validate_redirect(': 'string $location, string $default | string',
\ 'wp_notify_postauthor(': 'int $comment_id, string $deprecated | bool',
\ 'wp_notify_moderator(': 'int $comment_id | bool',
\ 'wp_password_change_notification(': 'object $user | void',
\ 'wp_new_user_notification(': 'int $user_id, string $plaintext_pass | void',
\ 'wp_nonce_tick(': 'void | int',
\ 'wp_verify_nonce(': 'string $nonce, string|int $action | bool',
\ 'wp_create_nonce(': 'string|int $action | string',
\ 'wp_salt(': 'string $scheme | string',
\ 'wp_hash(': 'string $data,  $scheme | string',
\ 'wp_hash_password(': 'string $password | string',
\ 'wp_check_password(': 'string $password, string $hash,  $user_id | bool',
\ 'wp_generate_password(': 'int $length, bool $special_chars, bool $extra_special_chars | string',
\ 'wp_rand(': 'int $min, int $max | int',
\ 'wp_set_password(': 'string $password, int $user_id | void',
\ 'get_avatar(': 'int|string|object $id_or_email, int $size, string $default, string $alt | string',
\ 'wp_text_diff(': 'string $left_string, string $right_string, string|array $args | string',
\}

let g:phpcomplete_builtin['functions']['wp_capabilities'] = {
\ 'map_meta_cap(': 'string $cap, int $user_id | array',
\ 'current_user_can(': 'string $capability | bool',
\ 'current_user_can_for_blog(': 'int $blog_id, string $capability | bool',
\ 'author_can(': 'int|object $post, string $capability | bool',
\ 'user_can(': 'int|object $user, string $capability | bool',
\ 'get_role(': 'string $role | \WP_Role|null',
\ 'add_role(': 'string $role, string $display_name, array $capabilities | \WP_Role|null',
\ 'remove_role(': 'string $role | void',
\ 'get_super_admins(': 'void | array',
\ 'is_super_admin(': 'int $user_id | bool',
\}

let g:phpcomplete_builtin['functions']['wp_option'] = {
\ 'get_option(': 'string $option, mixed $default | mixed',
\ 'wp_protect_special_option(': 'string $option | void',
\ 'form_option(': 'string $option | void',
\ 'wp_load_alloptions(': 'void | array',
\ 'wp_load_core_site_options(': 'int $site_id | void',
\ 'update_option(': 'string $option, mixed $value | bool',
\ 'add_option(': 'string $option, mixed $value, mixed $deprecated, bool $autoload | bool',
\ 'delete_option(': 'string $option | bool',
\ 'delete_transient(': 'string $transient | bool',
\ 'get_transient(': 'string $transient | mixed',
\ 'set_transient(': 'string $transient, mixed $value, int $expiration | bool',
\ 'wp_user_settings(': 'void | void',
\ 'get_user_setting(': 'string $name, string $default | mixed',
\ 'set_user_setting(': 'string $name, string $value | bool',
\ 'delete_user_setting(': 'mixed $names | bool',
\ 'get_all_user_settings(': 'void | array',
\ 'wp_set_all_user_settings(': 'array $user_settings | bool',
\ 'delete_all_user_settings(': 'void | void',
\ 'get_site_option(': 'string $option, mixed $default, bool $use_cache | mixed',
\ 'add_site_option(': 'string $option, mixed $value | bool',
\ 'delete_site_option(': 'string $option | bool',
\ 'update_site_option(': 'string $option, mixed $value | bool',
\ 'delete_site_transient(': 'string $transient | bool',
\ 'get_site_transient(': 'string $transient | mixed',
\ 'set_site_transient(': 'string $transient, mixed $value, int $expiration | bool',
\}

let g:phpcomplete_builtin['functions']['wp_nav_menu_template'] = {
\ 'wp_nav_menu(': 'array $args | void',
\ 'walk_nav_menu_tree(': ' $items,  $depth,  $r | void',
\}

let g:phpcomplete_builtin['functions']['wp_ms_load'] = {
\ 'is_subdomain_install(': 'void | bool',
\ 'wp_get_active_network_plugins(': 'void | array',
\ 'ms_site_check(': 'void | bool|string',
\ 'get_current_site_name(': ' $current_site | object',
\ 'wpmu_current_site(': 'void | object',
\ 'ms_not_installed(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_class_pop3'] = {
\ 'stripos(': ' $haystack,  $needle | void',
\}

let g:phpcomplete_builtin['functions']['wp_category_template'] = {
\ 'get_category_link(': 'int|object $category | string',
\ 'get_category_parents(': 'int $id, bool $link, string $separator, bool $nicename, array $visited | string|\WP_Error',
\ 'get_the_category(': 'int $id | array',
\ 'get_the_category_by_ID(': 'int $cat_ID | string|\WP_Error',
\ 'get_the_category_list(': 'string $separator, string $parents, int $post_id | string',
\ 'in_category(': 'int|string|array $category, int|object $post | bool',
\ 'the_category(': 'string $separator, string $parents, int $post_id | void',
\ 'category_description(': 'int $category | string',
\ 'wp_dropdown_categories(': 'string|array $args | string',
\ 'wp_list_categories(': 'string|array $args | string',
\ 'wp_tag_cloud(': 'array|string $args | array',
\ 'default_topic_count_text(': 'integer $count | string',
\ 'default_topic_count_scale(': 'integer $count | integer',
\ 'wp_generate_tag_cloud(': 'array $tags, string|array $args | string',
\ 'walk_category_tree(': 'void | void',
\ 'walk_category_dropdown_tree(': 'void | void',
\ 'get_tag_link(': 'int|object $tag | string',
\ 'get_the_tags(': 'int $id | array|bool',
\ 'get_the_tag_list(': 'string $before, string $sep, string $after, int $id | string|bool|\WP_Error',
\ 'the_tags(': 'string $before, string $sep, string $after | void',
\ 'tag_description(': 'int $tag | string',
\ 'term_description(': 'int $term, string $taxonomy | string',
\ 'get_the_terms(': 'int|object $post, string $taxonomy | array|bool|\WP_Error',
\ 'get_the_term_list(': 'int $id, string $taxonomy, string $before, string $sep, string $after | string|bool|\WP_Error',
\ 'the_terms(': 'int $id, string $taxonomy, string $before, string $sep, string $after | null|bool',
\ 'has_category(': 'string|int|array $category, int|object $post | bool',
\ 'has_tag(': 'string|int|array $tag, int|object $post | bool',
\ 'has_term(': 'string|int|array $term, string $taxonomy, int|object $post | bool',
\}

let g:phpcomplete_builtin['functions']['wp_kses'] = {
\ 'wp_kses(': 'string $string, array $allowed_html, array $allowed_protocols | string',
\ 'wp_kses_allowed_html(': 'string $context | array',
\ 'wp_kses_hook(': 'string $string, array $allowed_html, array $allowed_protocols | string',
\ 'wp_kses_version(': 'void | string',
\ 'wp_kses_split(': 'string $string, array $allowed_html, array $allowed_protocols | string',
\ 'wp_kses_split2(': 'string $string, array $allowed_html, array $allowed_protocols | string',
\ 'wp_kses_attr(': 'string $element, string $attr, array $allowed_html, array $allowed_protocols | string',
\ 'wp_kses_hair(': 'string $attr, array $allowed_protocols | array',
\ 'wp_kses_check_attr_val(': 'string $value, string $vless, string $checkname, mixed $checkvalue | bool',
\ 'wp_kses_bad_protocol(': 'string $string, array $allowed_protocols | string',
\ 'wp_kses_no_null(': 'string $string | string',
\ 'wp_kses_stripslashes(': 'string $string | string',
\ 'wp_kses_array_lc(': 'array $inarray | array',
\ 'wp_kses_js_entities(': 'string $string | string',
\ 'wp_kses_html_error(': 'string $string | string',
\ 'wp_kses_bad_protocol_once(': 'string $string, string $allowed_protocols,  $count | string',
\ 'wp_kses_bad_protocol_once2(': 'string $string, string $allowed_protocols | string',
\ 'wp_kses_normalize_entities(': 'string $string | string',
\ 'wp_kses_named_entities(': 'array $matches | string',
\ 'wp_kses_normalize_entities2(': 'array $matches | string',
\ 'wp_kses_normalize_entities3(': 'array $matches | string',
\ 'valid_unicode(': 'int $i | bool',
\ 'wp_kses_decode_entities(': 'string $string | string',
\ 'wp_filter_kses(': 'string $data | string',
\ 'wp_kses_data(': 'string $data | string',
\ 'wp_filter_post_kses(': 'string $data | string',
\ 'wp_kses_post(': 'string $data | string',
\ 'wp_filter_nohtml_kses(': 'string $data | string',
\ 'kses_init_filters(': 'void | void',
\ 'kses_remove_filters(': 'void | void',
\ 'kses_init(': 'void | void',
\ 'safecss_filter_attr(': ' $css,  $deprecated | void',
\}

let g:phpcomplete_builtin['functions']['wp_deprecated'] = {
\ 'remove_custom_background(': 'void | bool',
\}

let g:phpcomplete_builtin['functions']['wp_class_wp_customize_manager'] = {
\ 'sanitize_hex_color(': 'string $color | string|null',
\ 'sanitize_hex_color_no_hash(': 'string $color | string|null',
\ 'maybe_hash_hex_color(': 'string $color | string',
\}

let g:phpcomplete_builtin['functions']['wp_default_widgets'] = {
\ 'wp_widget_rss_output(': 'string|array|object $rss, array $args | void',
\ 'wp_widget_rss_form(': 'array|string $args, array $inputs | void',
\ 'wp_widget_rss_process(': 'array $widget_rss, bool $check_feed | array',
\ 'wp_widgets_init(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_wp_langs'] = {
\ 'mce_escape(': ' $text | void',
\ 'wp_mce_translation(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_user'] = {
\ 'wp_signon(': 'array $credentials, bool $secure_cookie | object',
\ 'wp_authenticate_username_password(': ' $user,  $username,  $password | void',
\ 'wp_authenticate_cookie(': ' $user,  $username,  $password | void',
\ 'wp_authenticate_spam_check(': ' $user | void',
\ 'count_user_posts(': 'int $userid | int',
\ 'count_many_users_posts(': 'array $users, string $post_type, bool $public_only | array',
\ 'get_current_user_id(': 'void | int',
\ 'get_user_option(': 'string $option, int $user, bool $deprecated | mixed',
\ 'update_user_option(': 'int $user_id, string $option_name, mixed $newvalue, bool $global | \unknown',
\ 'delete_user_option(': 'int $user_id, string $option_name, bool $global | \unknown',
\ 'get_users(': 'array $args | array',
\ 'get_blogs_of_user(': 'int $user_id, bool $all | array',
\ 'is_user_member_of_blog(': 'int $user_id, int $blog_id | bool',
\ 'add_user_meta(': 'int $user_id, string $meta_key, mixed $meta_value, bool $unique | int|bool',
\ 'delete_user_meta(': 'int $user_id, string $meta_key, mixed $meta_value | bool',
\ 'get_user_meta(': 'int $user_id, string $key, bool $single | mixed',
\ 'update_user_meta(': 'int $user_id, string $meta_key, mixed $meta_value, mixed $prev_value | bool',
\ 'count_users(': 'string $strategy | array',
\ 'setup_userdata(': 'int $for_user_id | void',
\ 'wp_dropdown_users(': 'string|array $args | string|null',
\ 'sanitize_user_field(': 'string $field, mixed $value, int $user_id, string $context | mixed',
\ 'update_user_caches(': 'object $user | void',
\ 'clean_user_cache(': '\WP_User|int $user | void',
\ 'username_exists(': 'string $username | null|int',
\ 'email_exists(': 'string $email | bool|int',
\ 'validate_username(': 'string $username | bool',
\ 'wp_insert_user(': 'mixed $userdata | int|\WP_Error',
\ 'wp_update_user(': 'mixed $userdata | int|\WP_Error',
\ 'wp_create_user(': 'string $username, string $password, string $email | int',
\ 'wp_get_user_contact_methods(': '\WP_User $user | array',
\ 'check_password_reset_key(': 'string $key, string $login | \WP_User|\WP_Error',
\ 'reset_password(': 'object $user, string $new_pass | void',
\ 'register_new_user(': 'string $user_login, string $user_email | int|\WP_Error',
\}

let g:phpcomplete_builtin['functions']['wp_canonical'] = {
\ 'lowercase_octets(': ' $matches | void',
\ 'redirect_canonical(': 'string $requested_url, bool $do_redirect | null|false|string',
\ 'redirect_guess_404_permalink(': 'void | bool|string',
\ 'wp_redirect_admin_locations(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_load'] = {
\ 'wp_unregister_GLOBALS(': 'void | null',
\ 'wp_fix_server_vars(': 'void | void',
\ 'wp_check_php_mysql_versions(': 'void | void',
\ 'wp_favicon_request(': 'void | void',
\ 'wp_maintenance(': 'void | void',
\ 'timer_start(': 'void | bool',
\ 'timer_stop(': 'int $display, int $precision | float',
\ 'wp_debug_mode(': 'void | void',
\ 'wp_set_lang_dir(': 'void | void',
\ 'require_wp_db(': 'void | void',
\ 'wp_set_wpdb_vars(': 'void | void',
\ 'wp_using_ext_object_cache(': 'bool $using | bool',
\ 'wp_start_object_cache(': 'void | void',
\ 'wp_not_installed(': 'void | void',
\ 'wp_get_mu_plugins(': 'void | array',
\ 'wp_get_active_and_valid_plugins(': 'void | array',
\ 'wp_set_internal_encoding(': 'void | void',
\ 'wp_magic_quotes(': 'void | void',
\ 'shutdown_action_hook(': 'void | void',
\ 'is_admin(': 'void | bool',
\ 'is_blog_admin(': 'void | bool',
\ 'is_network_admin(': 'void | bool',
\ 'is_user_admin(': 'void | bool',
\ 'is_multisite(': 'void | bool',
\ 'get_current_blog_id(': 'void | int',
\ 'wp_load_translations_early(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_wp_tinymce'] = {
\ 'get_file(': ' $path | void',
\}

let g:phpcomplete_builtin['functions']['wp_update'] = {
\ 'wp_version_check(': 'array $extra_stats, bool $force_check | mixed',
\ 'wp_update_plugins(': 'array $extra_stats | mixed',
\ 'wp_update_themes(': 'array $extra_stats | mixed',
\ 'wp_maybe_auto_update(': 'void | void',
\ 'wp_get_translation_updates(': 'void | void',
\ 'wp_get_update_data(': 'void | array',
\ 'wp_schedule_update_checks(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_plugin'] = {
\ 'add_filter(': 'string $tag, callback $function_to_add, int $priority, int $accepted_args | boolean',
\ 'has_filter(': 'string $tag, callback $function_to_check | mixed',
\ 'apply_filters(': 'string $tag, mixed $value | mixed',
\ 'apply_filters_ref_array(': 'string $tag, array $args | mixed',
\ 'remove_filter(': 'string $tag, callback $function_to_remove, int $priority | boolean',
\ 'remove_all_filters(': 'string $tag, int $priority | bool',
\ 'current_filter(': 'void | string',
\ 'add_action(': 'string $tag, callback $function_to_add, int $priority, int $accepted_args | void',
\ 'do_action(': 'string $tag,  $arg | null',
\ 'did_action(': 'string $tag | int',
\ 'do_action_ref_array(': 'string $tag, array $args | null',
\ 'has_action(': 'string $tag, callback $function_to_check | mixed',
\ 'remove_action(': 'string $tag, callback $function_to_remove, int $priority | boolean',
\ 'remove_all_actions(': 'string $tag, int $priority | bool',
\ 'plugin_basename(': 'string $file | string',
\ 'plugin_dir_path(': 'string $file | string',
\ 'plugin_dir_url(': 'string $file | string',
\ 'register_activation_hook(': 'string $file, callback $function | void',
\ 'register_deactivation_hook(': 'string $file, callback $function | void',
\ 'register_uninstall_hook(': 'string $file, callback $callback | void',
\}

let g:phpcomplete_builtin['functions']['wp_ms_functions'] = {
\ 'get_sitestats(': 'void | array',
\ 'get_admin_users_for_domain(': 'string $sitedomain, string $path | array',
\ 'get_active_blog_for_user(': 'int $user_id | object',
\ 'get_user_count(': 'void | int',
\ 'get_blog_count(': 'int $network_id | int',
\ 'get_blog_post(': 'int $blog_id, int $post_id | \WP_Post|null',
\ 'add_user_to_blog(': 'int $blog_id, int $user_id, string $role | bool',
\ 'remove_user_from_blog(': 'int $user_id, int $blog_id, string $reassign | bool',
\ 'create_empty_blog(': 'string $domain, string $path, string $weblog_title, int $site_id | int',
\ 'get_blog_permalink(': 'int $blog_id, int $post_id | string',
\ 'get_blog_id_from_url(': 'string $domain, string $path | int',
\ 'is_email_address_unsafe(': 'string $user_email | bool',
\ 'wpmu_validate_user_signup(': 'string $user_name, string $user_email | array',
\ 'wpmu_validate_blog_signup(': 'string $blogname, string $blog_title,  $user | array',
\ 'wpmu_signup_blog(': 'string $domain, string $path, string $title, string $user, string $user_email, array $meta | void',
\ 'wpmu_signup_user(': 'string $user, string $user_email, array $meta | void',
\ 'wpmu_signup_blog_notification(': 'string $domain, string $path, string $title, string $user, string $user_email, string $key, array $meta | bool',
\ 'wpmu_signup_user_notification(': 'string $user, string $user_email, string $key, array $meta | bool',
\ 'wpmu_activate_signup(': 'string $key | array',
\ 'wpmu_create_user(': 'string $user_name, string $password, string $email | mixed',
\ 'wpmu_create_blog(': 'string $domain, string $path, string $title, int $user_id, array $meta, int $site_id | mixed',
\ 'newblog_notify_siteadmin(': 'int $blog_id,  $deprecated | bool',
\ 'newuser_notify_siteadmin(': 'int $user_id | bool',
\ 'domain_exists(': 'string $domain, string $path, int $site_id | int',
\ 'insert_blog(': 'string $domain, string $path, int $site_id | int',
\ 'install_blog(': 'int $blog_id, string $blog_title | void',
\ 'wpmu_welcome_notification(': 'int $blog_id, int $user_id, string $password, string $title, array $meta | bool',
\ 'wpmu_welcome_user_notification(': 'int $user_id, string $password, array $meta | bool',
\ 'get_current_site(': 'void | object',
\ 'get_most_recent_post_of_user(': 'int $user_id | array',
\ 'get_dirsize(': 'string $directory | int',
\ 'recurse_dirsize(': 'string $directory | int',
\ 'check_upload_mimes(': 'array $mimes | array',
\ 'update_posts_count(': ' $deprecated | void',
\ 'wpmu_log_new_registrations(': 'int $blog_id, int $user_id | void',
\ 'global_terms(': 'int $term_id,  $deprecated | int',
\ 'redirect_this_site(': ' $deprecated | array',
\ 'upload_is_file_too_big(': 'array $upload | mixed',
\ 'signup_nonce_fields(': 'void | void',
\ 'signup_nonce_check(': 'array $result | array',
\ 'maybe_redirect_404(': 'void | void',
\ 'maybe_add_existing_user_to_blog(': 'void | void',
\ 'add_existing_user_to_blog(': 'array $details | void',
\ 'add_new_user_to_blog(': 'int $user_id, mixed $password, array $meta | void',
\ 'fix_phpmailer_messageid(': ' $phpmailer | void',
\ 'is_user_spammy(': 'string|\WP_User $user | bool',
\ 'update_blog_public(': 'int $old_value, int $value | bool',
\ 'is_user_option_local(': 'string $key, int $user_id, int $blog_id | bool',
\ 'users_can_register_signup_filter(': 'void | bool',
\ 'welcome_user_msg_filter(': 'string $text | string',
\ 'force_ssl_content(': 'string|bool $force | bool',
\ 'filter_SSL(': ' $url | string',
\ 'wp_schedule_update_network_counts(': 'void | void',
\ 'wp_update_network_counts(': 'void | void',
\ 'wp_maybe_update_network_site_counts(': 'void | void',
\ 'wp_maybe_update_network_user_counts(': 'void | void',
\ 'wp_update_network_site_counts(': 'void | void',
\ 'wp_update_network_user_counts(': 'void | void',
\ 'get_space_used(': 'void | int',
\ 'get_space_allowed(': 'void | int',
\ 'get_upload_space_available(': 'void | int',
\ 'is_upload_space_available(': 'void | bool',
\ 'upload_size_limit_filter(': ' $size | int',
\ 'wp_is_large_network(': 'string $using | bool',
\ 'wp_get_sites(': 'array $args | array',
\}

let g:phpcomplete_builtin['functions']['wp_default_constants'] = {
\ 'wp_initial_constants(': 'void | void',
\ 'wp_plugin_directory_constants(': 'void | void',
\ 'wp_cookie_constants(': 'void | void',
\ 'wp_ssl_constants(': 'void | void',
\ 'wp_functionality_constants(': 'void | void',
\ 'wp_templating_constants(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_ms_default_constants'] = {
\ 'ms_upload_constants(': 'void | void',
\ 'ms_cookie_constants(': 'void | void',
\ 'ms_file_constants(': 'void | void',
\ 'ms_subdomain_constants(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_functions'] = {
\ 'mysql2date(': 'string $format, string $date, bool $translate | string|int',
\ 'current_time(': 'string $type, int|bool $gmt | int|string',
\ 'date_i18n(': 'string $dateformatstring, int $unixtimestamp, bool $gmt | string',
\ 'number_format_i18n(': 'int $number, int $decimals | string',
\ 'size_format(': 'int|string $bytes, int $decimals | bool|string',
\ 'get_weekstartend(': 'string $mysqlstring, int $start_of_week | array',
\ 'maybe_unserialize(': 'string $original | mixed',
\ 'is_serialized(': 'mixed $data, bool $strict | bool',
\ 'is_serialized_string(': 'mixed $data | bool',
\ 'maybe_serialize(': 'mixed $data | mixed',
\ 'xmlrpc_getposttitle(': 'string $content | string',
\ 'xmlrpc_getpostcategory(': 'string $content | string|array',
\ 'xmlrpc_removepostdata(': 'string $content | string',
\ 'wp_extract_urls(': 'string $content | array',
\ 'do_enclose(': 'string $content, int $post_ID | void',
\ 'wp_get_http(': 'string $url, string|bool $file_path, int $red | bool|string',
\ 'wp_get_http_headers(': 'string $url, bool $deprecated | bool|string',
\ 'is_new_day(': 'void | int',
\ 'build_query(': 'array $data | string',
\ 'add_query_arg(': 'void | string',
\ 'remove_query_arg(': 'string|array $key, bool $query | string',
\ 'add_magic_quotes(': 'array $array | array',
\ 'wp_remote_fopen(': 'string $uri | bool|string',
\ 'wp(': 'string $query_vars | void',
\ 'get_status_header_desc(': 'int $code | string',
\ 'status_header(': 'int $code | void',
\ 'wp_get_nocache_headers(': 'void | array',
\ 'nocache_headers(': 'void | void',
\ 'cache_javascript_headers(': 'void | void',
\ 'get_num_queries(': 'void | int',
\ 'bool_from_yn(': 'string $yn | bool',
\ 'do_feed(': 'void | void',
\ 'do_feed_rdf(': 'void | void',
\ 'do_feed_rss(': 'void | void',
\ 'do_feed_rss2(': 'bool $for_comments | void',
\ 'do_feed_atom(': 'bool $for_comments | void',
\ 'do_robots(': 'void | void',
\ 'is_blog_installed(': 'void | bool',
\ 'wp_nonce_url(': 'string $actionurl, string $action, string $name | string',
\ 'wp_nonce_field(': 'string $action, string $name, bool $referer, bool $echo | string',
\ 'wp_referer_field(': 'bool $echo | string',
\ 'wp_original_referer_field(': 'bool $echo, string $jump_back_to | string',
\ 'wp_get_referer(': 'void | string|bool',
\ 'wp_get_original_referer(': 'void | string|bool',
\ 'wp_mkdir_p(': 'string $target | bool',
\ 'path_is_absolute(': 'string $path | bool',
\ 'path_join(': 'string $base, string $path | string',
\ 'get_temp_dir(': 'void | string',
\ 'wp_is_writable(': 'string $path | bool',
\ 'win_is_writable(': 'string $path | bool',
\ 'wp_upload_dir(': 'string $time | array',
\ 'wp_unique_filename(': 'string $dir, string $filename, mixed $unique_filename_callback | string',
\ 'wp_upload_bits(': 'string $name, null $deprecated, mixed $bits, string $time | array',
\ 'wp_ext2type(': 'string $ext | string|null',
\ 'wp_check_filetype(': 'string $filename, array $mimes | array',
\ 'wp_check_filetype_and_ext(': 'string $file, string $filename, array $mimes | array',
\ 'wp_get_mime_types(': 'void | array',
\ 'get_allowed_mime_types(': 'int|\WP_User $user | array',
\ 'wp_nonce_ays(': 'string $action | void',
\ 'wp_die(': 'string $message, string $title, string|array $args | void',
\ 'wp_send_json(': 'mixed $response | void',
\ 'wp_send_json_success(': 'mixed $data | void',
\ 'wp_send_json_error(': 'mixed $data | void',
\ 'smilies_init(': 'void | void',
\ 'wp_parse_args(': 'string|array $args, array $defaults | array',
\ 'wp_parse_id_list(': 'array|string $list | array',
\ 'wp_array_slice_assoc(': 'array $array, array $keys | array',
\ 'wp_filter_object_list(': 'array $list, array $args, string $operator, bool|string $field | array',
\ 'wp_list_filter(': 'array $list, array $args, string $operator | array',
\ 'wp_list_pluck(': 'array $list, int|string $field | array',
\ 'wp_maybe_load_widgets(': 'void | void',
\ 'wp_widgets_add_menu(': 'void | void',
\ 'wp_ob_end_flush_all(': 'void | void',
\ 'dead_db(': 'void | void',
\ 'absint(': 'mixed $maybeint | int',
\ 'url_is_accessable_via_ssl(': 'string $url | bool',
\ 'is_lighttpd_before_150(': 'void | bool',
\ 'apache_mod_loaded(': 'string $mod, bool $default | bool',
\ 'iis7_supports_permalinks(': 'void | bool',
\ 'validate_file(': 'string $file, array $allowed_files | int',
\ 'is_ssl(': 'void | bool',
\ 'force_ssl_login(': 'string|bool $force | bool',
\ 'force_ssl_admin(': 'string|bool $force | bool',
\ 'wp_guess_url(': 'void | string',
\ 'wp_suspend_cache_addition(': 'bool $suspend | bool',
\ 'wp_suspend_cache_invalidation(': 'bool $suspend | bool',
\ 'is_main_site(': 'int $site_id | bool',
\ 'is_main_network(': 'int $network_id | bool',
\ 'global_terms_enabled(': 'void | bool',
\ 'wp_timezone_override_offset(': 'void | float|bool',
\ 'wp_timezone_choice(': 'string $selected_zone | string',
\ 'wp_scheduled_delete(': 'void | void',
\ 'get_file_data(': 'string $file, array $default_headers, string $context | void',
\ 'send_nosniff_header(': 'void | \none',
\ 'wp_find_hierarchy_loop(': 'callback $callback, int $start, int $start_parent, array $callback_args | array',
\ 'wp_find_hierarchy_loop_tortoise_hare(': 'callback $callback, int $start, array $override, array $callback_args, bool $_return_loop | mixed',
\ 'send_frame_options_header(': 'void | \none',
\ 'wp_allowed_protocols(': 'void | array',
\ 'wp_debug_backtrace_summary(': 'string $ignore_class, int $skip_frames, bool $pretty | string|array',
\ 'wp_is_stream(': 'string $path | bool',
\ 'wp_checkdate(': ' $month,  $day,  $year,  $source_date | bool',
\ 'wp_auth_check_load(': 'void | void',
\ 'wp_auth_check_html(': 'void | void',
\ 'wp_auth_check(': ' $response,  $data | void',
\ 'get_tag_regex(': 'string $tag | string',
\ 'mbstring_binary_safe_encoding(': 'bool $reset | void',
\ 'reset_mbstring_encoding(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_theme'] = {
\ 'wp_get_themes(': 'array $args | Array',
\ 'wp_get_theme(': 'string $stylesheet, string $theme_root | \WP_Theme',
\ 'wp_clean_themes_cache(': 'bool $clear_update_cache | void',
\ 'is_child_theme(': 'void | bool',
\ 'get_stylesheet(': 'void | string',
\ 'get_stylesheet_directory(': 'void | string',
\ 'get_stylesheet_directory_uri(': 'void | string',
\ 'get_stylesheet_uri(': 'void | string',
\ 'get_locale_stylesheet_uri(': 'void | string',
\ 'get_template(': 'void | string',
\ 'get_template_directory(': 'void | string',
\ 'get_template_directory_uri(': 'void | string',
\ 'get_theme_roots(': 'void | array|string',
\ 'register_theme_directory(': 'string $directory | bool',
\ 'search_theme_directories(': 'bool $force | array',
\ 'get_theme_root(': 'string $stylesheet_or_template | string',
\ 'get_theme_root_uri(': 'string $stylesheet_or_template, string $theme_root | string',
\ 'get_raw_theme_root(': 'string $stylesheet_or_template, bool $skip_cache | string',
\ 'locale_stylesheet(': 'void | void',
\ 'preview_theme(': 'void | void',
\ 'preview_theme_ob_filter(': 'string $content | string',
\ 'preview_theme_ob_filter_callback(': 'array $matches | string',
\ 'switch_theme(': 'string $stylesheet | void',
\ 'validate_current_theme(': 'void | bool',
\ 'get_theme_mods(': 'void | array',
\ 'get_theme_mod(': 'string $name, bool|string $default | string',
\ 'set_theme_mod(': 'string $name, string $value | void',
\ 'remove_theme_mod(': 'string $name | null',
\ 'remove_theme_mods(': 'void | void',
\ 'get_header_textcolor(': 'void | string',
\ 'header_textcolor(': 'void | void',
\ 'display_header_text(': 'void | bool',
\ 'get_header_image(': 'void | string',
\ 'get_random_header_image(': 'void | string',
\ 'is_random_header_image(': 'string $type | boolean',
\ 'header_image(': 'void | void',
\ 'get_uploaded_header_images(': 'void | array',
\ 'get_custom_header(': 'void | object',
\ 'register_default_headers(': 'array $headers | void',
\ 'unregister_default_headers(': 'string|array $header | True',
\ 'get_background_image(': 'void | string',
\ 'background_image(': 'void | void',
\ 'get_background_color(': 'void | string',
\ 'background_color(': 'void | void',
\ 'add_editor_style(': 'mixed $stylesheet | void',
\ 'remove_editor_styles(': 'void | bool',
\ 'add_theme_support(': 'string $feature | void',
\ 'get_theme_support(': 'string $feature | array',
\ 'remove_theme_support(': 'string $feature | bool',
\ 'current_theme_supports(': 'string $feature | boolean',
\ 'require_if_theme_supports(': 'string $feature, string $include | void',
\ 'check_theme_switched(': 'void | void',
\ 'wp_customize_url(': 'string $stylesheet | void',
\ 'wp_customize_support_script(': 'void | void',
\}

let g:phpcomplete_builtin['functions']['wp_vars'] = {
\ 'wp_is_mobile(': 'void | bool',
\}

let g:phpcomplete_builtin['functions']['wp_compat'] = {
\ 'mb_substr(': ' $str,  $start,  $length,  $encoding | void',
\ 'hash_hmac(': ' $algo,  $data,  $key,  $raw_output | void',
\ 'json_encode(': ' $string | void',
\ 'json_decode(': ' $string,  $assoc_array | void',
\}

let g:phpcomplete_builtin['functions']['wp_bookmark'] = {
\ 'get_bookmark(': 'mixed $bookmark, string $output, string $filter | array|object',
\ 'get_bookmark_field(': 'string $field, int $bookmark, string $context | string',
\ 'get_bookmarks(': 'string|array $args | array',
\ 'sanitize_bookmark(': 'object|array $bookmark, string $context | object|array',
\ 'sanitize_bookmark_field(': 'string $field, mixed $value, int $bookmark_id, string $context | mixed',
\ 'clean_bookmark_cache(': ' $bookmark_id | void',
\}

let g:phpcomplete_builtin['functions']['wp_functions_wp_styles'] = {
\ 'wp_print_styles(': 'array|bool $handles | array',
\ 'wp_add_inline_style(': 'string $handle, string $data | bool',
\ 'wp_register_style(': 'string $handle, string|bool $src, array $deps, string|bool $ver, string $media | void',
\ 'wp_deregister_style(': 'string $handle | void',
\ 'wp_enqueue_style(': 'string $handle, string|bool $src, array $deps, string|bool $ver, string $media | void',
\ 'wp_dequeue_style(': 'string $handle | void',
\ 'wp_style_is(': 'string $handle, string $list | bool',
\ 'wp_style_add_data(': 'string $handle, string $key,  $value | bool',
\}

let g:phpcomplete_builtin['functions']['wp_feed'] = {
\ 'get_bloginfo_rss(': 'string $show | string',
\ 'bloginfo_rss(': 'string $show | void',
\ 'get_default_feed(': 'void | string',
\ 'get_wp_title_rss(': 'string $sep | string',
\ 'wp_title_rss(': 'string $sep | void',
\ 'get_the_title_rss(': 'void | string',
\ 'the_title_rss(': 'void | void',
\ 'get_the_content_feed(': 'string $feed_type | string',
\ 'the_content_feed(': 'string $feed_type | void',
\ 'the_excerpt_rss(': 'void | void',
\ 'the_permalink_rss(': 'void | void',
\ 'comments_link_feed(': 'void | \none',
\ 'comment_guid(': 'int|object $comment_id | void',
\ 'get_comment_guid(': 'int|object $comment_id | bool|string',
\ 'comment_link(': 'void | void',
\ 'get_comment_author_rss(': 'void | string',
\ 'comment_author_rss(': 'void | void',
\ 'comment_text_rss(': 'void | void',
\ 'get_the_category_rss(': 'string $type | string',
\ 'the_category_rss(': 'string $type | void',
\ 'html_type_rss(': 'void | void',
\ 'rss_enclosure(': 'void | void',
\ 'atom_enclosure(': 'void | void',
\ 'prep_atom_text_construct(': 'string $data | array',
\ 'self_link(': 'void | void',
\ 'feed_content_type(': ' $type | void',
\ 'fetch_feed(': 'mixed $url | \WP_Error|\SimplePie',
\}

let g:phpcomplete_builtin['functions']['wp_meta'] = {
\ 'add_metadata(': 'string $meta_type, int $object_id, string $meta_key, mixed $meta_value, bool $unique | int|bool',
\ 'update_metadata(': 'string $meta_type, int $object_id, string $meta_key, mixed $meta_value, mixed $prev_value | bool',
\ 'delete_metadata(': 'string $meta_type, int $object_id, string $meta_key, mixed $meta_value, bool $delete_all | bool',
\ 'get_metadata(': 'string $meta_type, int $object_id, string $meta_key, bool $single | string|array',
\ 'metadata_exists(': 'string $meta_type, int $object_id, string $meta_key | boolean',
\ 'get_metadata_by_mid(': 'string $meta_type, int $meta_id | object',
\ 'update_metadata_by_mid(': 'string $meta_type, int $meta_id, string $meta_value, string $meta_key | bool',
\ 'delete_metadata_by_mid(': 'string $meta_type, int $meta_id | bool',
\ 'update_meta_cache(': 'string $meta_type, int|array $object_ids | mixed',
\ 'get_meta_sql(': 'array $meta_query, string $type, string $primary_table, string $primary_id_column, object $context | \array(',
\ 'is_protected_meta(': 'string $meta_key,  $meta_type | bool',
\ 'sanitize_meta(': 'string $meta_key, mixed $meta_value, string $meta_type | mixed',
\ 'register_meta(': 'string $meta_type, string $meta_key, string|array $sanitize_callback, string|array $auth_callback | void',
\}

let g:phpcomplete_builtin['functions']['wp_locale'] = {
\ 'is_rtl(': 'void | bool',
\}

let g:phpcomplete_builtin['functions']['wp_class_simplepie'] = {
\ 'wp_simplepie_autoload(': ' $class | void',
\}

let g:phpcomplete_builtin['functions']['wp_nav_menu'] = {
\ 'wp_get_nav_menu_object(': 'string $menu | mixed',
\ 'is_nav_menu(': 'int|string $menu | bool',
\ 'register_nav_menus(': 'array $locations | void',
\ 'unregister_nav_menu(': 'array $location | bool',
\ 'register_nav_menu(': 'string $location, string $description | void',
\ 'get_registered_nav_menus(': 'void | array',
\ 'get_nav_menu_locations(': 'void | array',
\ 'has_nav_menu(': 'string $location | bool',
\ 'is_nav_menu_item(': 'int $menu_item_id | bool',
\ 'wp_create_nav_menu(': 'string $menu_name | mixed',
\ 'wp_delete_nav_menu(': 'string $menu | mixed',
\ 'wp_update_nav_menu_object(': 'int $menu_id, array $menu_data | int|\error',
\ 'wp_update_nav_menu_item(': 'int $menu_id, int $menu_item_db_id, array $menu_item_data | int',
\ 'wp_get_nav_menus(': 'array $args | array',
\ 'wp_get_nav_menu_items(': 'string $menu, string $args | mixed',
\ 'wp_setup_nav_menu_item(': 'object $menu_item | object',
\ 'wp_get_associated_nav_menu_items(': 'int $object_id, string $object_type, string $taxonomy | array',
\}

let g:phpcomplete_builtin['functions']['wp_general'] = {
\ 'getRequestParam(': 'String $name, String $default_value | String',
\ 'getLogger(': 'void | void',
\ 'debug(': ' $msg | void',
\ 'info(': ' $msg | void',
\ 'error(': ' $msg | void',
\ 'warn(': ' $msg | void',
\ 'fatal(': ' $msg | void',
\}

let g:phpcomplete_builtin['functions']['wp_googlespell'] = {
\ 'mb_substr(': ' $str,  $start,  $len,  $encoding | void',
\}

let g:phpcomplete_builtin['functions']['wp_widgets'] = {
\ 'register_widget(': 'string $widget_class | void',
\ 'unregister_widget(': 'string $widget_class | void',
\ 'register_sidebars(': 'int $number, string|array $args | void',
\ 'register_sidebar(': 'string|array $args | string',
\ 'unregister_sidebar(': 'string $name | void',
\ 'wp_register_sidebar_widget(': 'int|string $id, string $name, callback $output_callback, array|string $options | null',
\ 'wp_widget_description(': 'int|string $id | string',
\ 'wp_sidebar_description(': 'int|string $id | string',
\ 'wp_unregister_sidebar_widget(': 'int|string $id | void',
\ 'wp_register_widget_control(': 'int|string $id, string $name, callback $control_callback, array|string $options | void',
\ 'wp_unregister_widget_control(': 'int|string $id | void',
\ 'dynamic_sidebar(': 'int|string $index | bool',
\ 'is_active_widget(': 'string $callback, int $widget_id, string $id_base, bool $skip_inactive | mixed',
\ 'is_dynamic_sidebar(': 'void | bool',
\ 'is_active_sidebar(': 'mixed $index | bool',
\ 'wp_get_sidebars_widgets(': 'bool $deprecated | array',
\ 'wp_set_sidebars_widgets(': 'array $sidebars_widgets | void',
\ 'wp_get_widget_defaults(': 'void | array',
\ 'wp_convert_widget_settings(': ' $base_name,  $option_name,  $settings | array',
\ 'the_widget(': 'string $widget, array $instance, array $args | void',
\ 'retrieve_widgets(': ' $theme_changed | void',
\}

let g:phpcomplete_builtin['functions']['wp_rss'] = {
\ 'fetch_rss(': 'string $url | bool|\MagpieRSS',
\ 'init(': 'void | void',
\ 'is_info(': ' $sc | void',
\ 'is_success(': ' $sc | void',
\ 'is_redirect(': ' $sc | void',
\ 'is_error(': ' $sc | void',
\ 'is_client_error(': ' $sc | void',
\ 'is_server_error(': ' $sc | void',
\ 'parse_w3cdtf(': ' $date_str | void',
\ 'wp_rss(': 'string $url, int $num_items | void',
\ 'get_rss(': 'string $url, int $num_items | bool',
\}

let g:phpcomplete_builtin['functions']['wp_revision'] = {
\ 'wp_save_post_revision(': 'int $post_id | mixed',
\ 'wp_get_post_autosave(': 'int $post_id, int $user_id | object|bool',
\ 'wp_is_post_revision(': 'int|object $post | bool|int',
\ 'wp_is_post_autosave(': 'int|object $post | bool|int',
\ 'wp_get_post_revision(': 'int|object $post, string $output, string $filter | mixed',
\ 'wp_restore_post_revision(': 'int|object $revision_id, array $fields | mixed',
\ 'wp_delete_post_revision(': 'int|object $revision_id | mixed',
\ 'wp_get_post_revisions(': 'int|object $post_id,  $args | array',
\ 'wp_revisions_enabled(': 'object $post | bool',
\ 'wp_revisions_to_keep(': 'object $post | int',
\}

let g:phpcomplete_builtin['functions']['wp_cache'] = {
\ 'wp_cache_add(': 'int|string $key, mixed $data, string $group, int $expire | bool',
\ 'wp_cache_close(': 'void | bool',
\ 'wp_cache_decr(': 'int|string $key, int $offset, string $group | false|int',
\ 'wp_cache_delete(': 'int|string $key, string $group | bool',
\ 'wp_cache_flush(': 'void | bool',
\ 'wp_cache_get(': 'int|string $key, string $group, bool $force,  $found | bool|mixed',
\ 'wp_cache_incr(': 'int|string $key, int $offset, string $group | false|int',
\ 'wp_cache_init(': 'void | void',
\ 'wp_cache_replace(': 'int|string $key, mixed $data, string $group, int $expire | bool',
\ 'wp_cache_set(': 'int|string $key, mixed $data, string $group, int $expire | bool',
\ 'wp_cache_switch_to_blog(': 'int $blog_id | void',
\ 'wp_cache_add_global_groups(': 'string|array $groups | void',
\ 'wp_cache_add_non_persistent_groups(': 'string|array $groups | void',
\}

let g:phpcomplete_builtin['functions']['wp_post_thumbnail_template'] = {
\ 'has_post_thumbnail(': 'int $post_id | bool',
\ 'get_post_thumbnail_id(': 'int $post_id | int',
\ 'the_post_thumbnail(': 'string|array $size, string|array $attr | void',
\ 'update_post_thumbnail_cache(': 'object $wp_query | void',
\ 'get_the_post_thumbnail(': 'int $post_id, string $size, string|array $attr | void',
\}

let g:phpcomplete_builtin['functions']['wp_shortcodes'] = {
\ 'add_shortcode(': 'string $tag, callable $func | void',
\ 'remove_shortcode(': 'string $tag | void',
\ 'remove_all_shortcodes(': 'void | void',
\ 'shortcode_exists(': 'string $tag | boolean',
\ 'has_shortcode(': ' $content, string $tag | boolean',
\ 'do_shortcode(': 'string $content | string',
\ 'get_shortcode_regex(': 'void | string',
\ 'do_shortcode_tag(': 'array $m | mixed',
\ 'shortcode_parse_atts(': 'string $text | array',
\ 'shortcode_atts(': 'array $pairs, array $atts, string $shortcode | array',
\ 'strip_shortcodes(': 'string $content | string',
\ 'strip_shortcode_tag(': ' $m | void',
\}

let g:phpcomplete_builtin['functions']['wp_class_wp_error'] = {
\ 'is_wp_error(': 'mixed $thing | bool',
\}

let g:phpcomplete_builtin['functions']['wp_bookmark_template'] = {
\ 'wp_list_bookmarks(': 'string|array $args | string|null',
\}

" Class Extensions
let g:phpcomplete_builtin['classes']['wp_xdiff'] = {
\'text_diff_engine_xdiff': {
\  'name': 'Text_Diff_Engine_xdiff',
\  'methods': {
\    'diff': { 'signature': ' $from_lines,  $to_lines', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_parser'] = {
\'simplepie_http_parser': {
\  'name': 'SimplePie_HTTP_Parser',
\  'properties': {
\    '$http_version': {'initializer': '0.0', 'type': 'float'},
\    '$status_code': {'initializer': '0', 'type': 'int'},
\    '$reason': {'initializer': '', 'type': 'string'},
\    '$headers': {'initializer': 'array', 'type': 'array'},
\    '$body': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $data', 'return_type': 'void'},
\    'parse': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_ixr'] = {
\'ixr_value': {
\  'name': 'IXR_Value',
\  'properties': {
\    '$data': {'initializer': '', 'type': ''},
\    '$type': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_Value': { 'signature': ' $data,  $type', 'return_type': 'void'},
\    'calculateType': { 'signature': 'void', 'return_type': 'void'},
\    'getXml': { 'signature': 'void', 'return_type': 'void'},
\    'isStruct': { 'signature': '\unknown_type $array', 'return_type': 'boolean'},
\  },
\},
\'ixr_message': {
\  'name': 'IXR_Message',
\  'properties': {
\    '$message': {'initializer': '', 'type': ''},
\    '$messageType': {'initializer': '', 'type': ''},
\    '$faultCode': {'initializer': '', 'type': ''},
\    '$faultString': {'initializer': '', 'type': ''},
\    '$methodName': {'initializer': '', 'type': ''},
\    '$params': {'initializer': '', 'type': ''},
\    '$_arraystructs': {'initializer': 'array', 'type': ''},
\    '$_arraystructstypes': {'initializer': 'array', 'type': ''},
\    '$_currentStructName': {'initializer': 'array', 'type': ''},
\    '$_param': {'initializer': '', 'type': ''},
\    '$_value': {'initializer': '', 'type': ''},
\    '$_currentTag': {'initializer': '', 'type': ''},
\    '$_currentTagContents': {'initializer': '', 'type': ''},
\    '$_parser': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_Message': { 'signature': ' $message', 'return_type': 'void'},
\    'parse': { 'signature': 'void', 'return_type': 'void'},
\    'tag_open': { 'signature': ' $parser,  $tag,  $attr', 'return_type': 'void'},
\    'cdata': { 'signature': ' $parser,  $cdata', 'return_type': 'void'},
\    'tag_close': { 'signature': ' $parser,  $tag', 'return_type': 'void'},
\  },
\},
\'ixr_server': {
\  'name': 'IXR_Server',
\  'properties': {
\    '$data': {'initializer': '', 'type': ''},
\    '$callbacks': {'initializer': 'array', 'type': ''},
\    '$message': {'initializer': '', 'type': ''},
\    '$capabilities': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_Server': { 'signature': ' $callbacks,  $data,  $wait', 'return_type': 'void'},
\    'serve': { 'signature': ' $data', 'return_type': 'void'},
\    'call': { 'signature': ' $methodname,  $args', 'return_type': 'void'},
\    'error': { 'signature': ' $error,  $message', 'return_type': 'void'},
\    'output': { 'signature': ' $xml', 'return_type': 'void'},
\    'hasMethod': { 'signature': ' $method', 'return_type': 'void'},
\    'setCapabilities': { 'signature': 'void', 'return_type': 'void'},
\    'getCapabilities': { 'signature': ' $args', 'return_type': 'void'},
\    'setCallbacks': { 'signature': 'void', 'return_type': 'void'},
\    'listMethods': { 'signature': ' $args', 'return_type': 'void'},
\    'multiCall': { 'signature': ' $methodcalls', 'return_type': 'void'},
\  },
\},
\'ixr_request': {
\  'name': 'IXR_Request',
\  'properties': {
\    '$method': {'initializer': '', 'type': ''},
\    '$args': {'initializer': '', 'type': ''},
\    '$xml': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_Request': { 'signature': ' $method,  $args', 'return_type': 'void'},
\    'getLength': { 'signature': 'void', 'return_type': 'void'},
\    'getXml': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'ixr_client': {
\  'name': 'IXR_Client',
\  'properties': {
\    '$server': {'initializer': '', 'type': ''},
\    '$port': {'initializer': '', 'type': ''},
\    '$path': {'initializer': '', 'type': ''},
\    '$useragent': {'initializer': '', 'type': ''},
\    '$response': {'initializer': '', 'type': ''},
\    '$message': {'initializer': 'false', 'type': ''},
\    '$debug': {'initializer': 'false', 'type': ''},
\    '$timeout': {'initializer': '', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\    '$error': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    'IXR_Client': { 'signature': ' $server,  $path,  $port,  $timeout', 'return_type': 'void'},
\    'query': { 'signature': 'void', 'return_type': 'void'},
\    'getResponse': { 'signature': 'void', 'return_type': 'void'},
\    'isError': { 'signature': 'void', 'return_type': 'void'},
\    'getErrorCode': { 'signature': 'void', 'return_type': 'void'},
\    'getErrorMessage': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'ixr_error': {
\  'name': 'IXR_Error',
\  'properties': {
\    '$code': {'initializer': '', 'type': ''},
\    '$message': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_Error': { 'signature': ' $code,  $message', 'return_type': 'void'},
\    'getXml': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'ixr_date': {
\  'name': 'IXR_Date',
\  'properties': {
\    '$year': {'initializer': '', 'type': ''},
\    '$month': {'initializer': '', 'type': ''},
\    '$day': {'initializer': '', 'type': ''},
\    '$hour': {'initializer': '', 'type': ''},
\    '$minute': {'initializer': '', 'type': ''},
\    '$second': {'initializer': '', 'type': ''},
\    '$timezone': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_Date': { 'signature': ' $time', 'return_type': 'void'},
\    'parseTimestamp': { 'signature': ' $timestamp', 'return_type': 'void'},
\    'parseIso': { 'signature': ' $iso', 'return_type': 'void'},
\    'getIso': { 'signature': 'void', 'return_type': 'void'},
\    'getXml': { 'signature': 'void', 'return_type': 'void'},
\    'getTimestamp': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'ixr_base64': {
\  'name': 'IXR_Base64',
\  'properties': {
\    '$data': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_Base64': { 'signature': ' $data', 'return_type': 'void'},
\    'getXml': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'ixr_introspectionserver': {
\  'name': 'IXR_IntrospectionServer',
\  'properties': {
\    '$signatures': {'initializer': '', 'type': ''},
\    '$help': {'initializer': '', 'type': ''},
\    '$data': {'initializer': '', 'type': ''},
\    '$callbacks': {'initializer': 'array', 'type': ''},
\    '$message': {'initializer': '', 'type': ''},
\    '$capabilities': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'IXR_IntrospectionServer': { 'signature': 'void', 'return_type': 'void'},
\    'addCallback': { 'signature': ' $method,  $callback,  $args,  $help', 'return_type': 'void'},
\    'call': { 'signature': ' $methodname,  $args', 'return_type': 'void'},
\    'methodSignature': { 'signature': ' $method', 'return_type': 'void'},
\    'methodHelp': { 'signature': ' $method', 'return_type': 'void'},
\    'IXR_Server': { 'signature': ' $callbacks,  $data,  $wait', 'return_type': 'void'},
\    'serve': { 'signature': ' $data', 'return_type': 'void'},
\    'error': { 'signature': ' $error,  $message', 'return_type': 'void'},
\    'output': { 'signature': ' $xml', 'return_type': 'void'},
\    'hasMethod': { 'signature': ' $method', 'return_type': 'void'},
\    'setCapabilities': { 'signature': 'void', 'return_type': 'void'},
\    'getCapabilities': { 'signature': ' $args', 'return_type': 'void'},
\    'setCallbacks': { 'signature': 'void', 'return_type': 'void'},
\    'listMethods': { 'signature': ' $args', 'return_type': 'void'},
\    'multiCall': { 'signature': ' $methodcalls', 'return_type': 'void'},
\  },
\},
\'ixr_clientmulticall': {
\  'name': 'IXR_ClientMulticall',
\  'properties': {
\    '$calls': {'initializer': 'array', 'type': ''},
\    '$server': {'initializer': '', 'type': ''},
\    '$port': {'initializer': '', 'type': ''},
\    '$path': {'initializer': '', 'type': ''},
\    '$useragent': {'initializer': '', 'type': ''},
\    '$response': {'initializer': '', 'type': ''},
\    '$message': {'initializer': 'false', 'type': ''},
\    '$debug': {'initializer': 'false', 'type': ''},
\    '$timeout': {'initializer': '', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\    '$error': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    'IXR_ClientMulticall': { 'signature': ' $server,  $path,  $port', 'return_type': 'void'},
\    'addCall': { 'signature': 'void', 'return_type': 'void'},
\    'query': { 'signature': 'void', 'return_type': 'void'},
\    'IXR_Client': { 'signature': ' $server,  $path,  $port,  $timeout', 'return_type': 'void'},
\    'getResponse': { 'signature': 'void', 'return_type': 'void'},
\    'isError': { 'signature': 'void', 'return_type': 'void'},
\    'getErrorCode': { 'signature': 'void', 'return_type': 'void'},
\    'getErrorMessage': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_registry'] = {
\'simplepie_registry': {
\  'name': 'SimplePie_Registry',
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'register': { 'signature': 'string $type, string $class, bool $legacy', 'return_type': 'bool'},
\    'get_class': { 'signature': 'string $type', 'return_type': 'string|null'},
\    'create': { 'signature': 'string $type, array $parameters', 'return_type': 'object'},
\    'call': { 'signature': 'string $type, string $method, array $parameters', 'return_type': 'mixed'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_cache'] = {
\'simplepie_cache': {
\  'name': 'SimplePie_Cache',
\  'static_properties': {
\  },
\  'static_methods': {
\    'get_handler': { 'signature': 'string $location, string $filename, string $extension', 'return_type': '\SimplePie_Cache_Base'},
\    'register': { 'signature': 'string $type, string $class', 'return_type': 'void'},
\    'parse_URL': { 'signature': 'string $url', 'return_type': 'array'},
\  },
\  'methods': {
\    'create': { 'signature': ' $location,  $filename,  $extension', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_snoopy'] = {
\'snoopy': {
\  'name': 'Snoopy',
\  'properties': {
\    '$host': {'initializer': '"www.php.net"', 'type': ''},
\    '$port': {'initializer': '80', 'type': ''},
\    '$proxy_host': {'initializer': '""', 'type': ''},
\    '$proxy_port': {'initializer': '""', 'type': ''},
\    '$proxy_user': {'initializer': '""', 'type': ''},
\    '$proxy_pass': {'initializer': '""', 'type': ''},
\    '$agent': {'initializer': '"Snoopy v1.2.4"', 'type': ''},
\    '$referer': {'initializer': '""', 'type': ''},
\    '$cookies': {'initializer': 'array', 'type': ''},
\    '$rawheaders': {'initializer': 'array', 'type': ''},
\    '$maxredirs': {'initializer': '5', 'type': ''},
\    '$lastredirectaddr': {'initializer': '""', 'type': ''},
\    '$offsiteok': {'initializer': 'true', 'type': ''},
\    '$maxframes': {'initializer': '0', 'type': ''},
\    '$expandlinks': {'initializer': 'true', 'type': ''},
\    '$passcookies': {'initializer': 'true', 'type': ''},
\    '$user': {'initializer': '""', 'type': ''},
\    '$pass': {'initializer': '""', 'type': ''},
\    '$accept': {'initializer': '"image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*"', 'type': ''},
\    '$results': {'initializer': '""', 'type': ''},
\    '$error': {'initializer': '""', 'type': ''},
\    '$response_code': {'initializer': '""', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\    '$maxlength': {'initializer': '500000', 'type': ''},
\    '$read_timeout': {'initializer': '0', 'type': ''},
\    '$timed_out': {'initializer': 'false', 'type': ''},
\    '$status': {'initializer': '0', 'type': ''},
\    '$temp_dir': {'initializer': '"/tmp"', 'type': ''},
\    '$curl_path': {'initializer': '"/usr/local/bin/curl"', 'type': ''},
\    '$_maxlinelen': {'initializer': '4096', 'type': ''},
\    '$_httpmethod': {'initializer': '"GET"', 'type': ''},
\    '$_httpversion': {'initializer': '"HTTP/1.0"', 'type': ''},
\    '$_submit_method': {'initializer': '"POST"', 'type': ''},
\    '$_submit_type': {'initializer': '"application/x-www-form-urlencoded"', 'type': ''},
\    '$_mime_boundary': {'initializer': '""', 'type': ''},
\    '$_redirectaddr': {'initializer': 'false', 'type': ''},
\    '$_redirectdepth': {'initializer': '0', 'type': ''},
\    '$_frameurls': {'initializer': 'array', 'type': ''},
\    '$_framedepth': {'initializer': '0', 'type': ''},
\    '$_isproxy': {'initializer': 'false', 'type': ''},
\    '$_fp_timeout': {'initializer': '30', 'type': ''},
\  },
\  'methods': {
\    'fetch': { 'signature': ' $URI', 'return_type': 'void'},
\    'submit': { 'signature': ' $URI,  $formvars,  $formfiles', 'return_type': 'void'},
\    'fetchlinks': { 'signature': ' $URI', 'return_type': 'void'},
\    'fetchform': { 'signature': ' $URI', 'return_type': 'void'},
\    'fetchtext': { 'signature': ' $URI', 'return_type': 'void'},
\    'submitlinks': { 'signature': ' $URI,  $formvars,  $formfiles', 'return_type': 'void'},
\    'submittext': { 'signature': ' $URI,  $formvars,  $formfiles', 'return_type': 'void'},
\    'set_submit_multipart': { 'signature': 'void', 'return_type': 'void'},
\    'set_submit_normal': { 'signature': 'void', 'return_type': 'void'},
\    '_striplinks': { 'signature': ' $document', 'return_type': 'void'},
\    '_stripform': { 'signature': ' $document', 'return_type': 'void'},
\    '_striptext': { 'signature': ' $document', 'return_type': 'void'},
\    '_expandlinks': { 'signature': ' $links,  $URI', 'return_type': 'void'},
\    '_httprequest': { 'signature': ' $url,  $fp,  $URI,  $http_method,  $content_type,  $body', 'return_type': 'void'},
\    '_httpsrequest': { 'signature': ' $url,  $URI,  $http_method,  $content_type,  $body', 'return_type': 'void'},
\    'setcookies': { 'signature': 'void', 'return_type': 'void'},
\    '_check_timeout': { 'signature': ' $fp', 'return_type': 'void'},
\    '_connect': { 'signature': ' $fp', 'return_type': 'void'},
\    '_disconnect': { 'signature': ' $fp', 'return_type': 'void'},
\    '_prepare_post_body': { 'signature': ' $formvars,  $formfiles', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_rewrite'] = {
\'wp_rewrite': {
\  'name': 'WP_Rewrite',
\  'properties': {
\    '$permalink_structure': {'initializer': '', 'type': 'string'},
\    '$use_trailing_slashes': {'initializer': '', 'type': 'bool'},
\    '$author_base': {'initializer': 'author', 'type': 'string'},
\    '$author_structure': {'initializer': '', 'type': 'string'},
\    '$date_structure': {'initializer': '', 'type': 'string'},
\    '$page_structure': {'initializer': '', 'type': 'string'},
\    '$search_base': {'initializer': 'search', 'type': 'string'},
\    '$search_structure': {'initializer': '', 'type': 'string'},
\    '$comments_base': {'initializer': 'comments', 'type': 'string'},
\    '$pagination_base': {'initializer': 'page', 'type': 'string'},
\    '$feed_base': {'initializer': 'feed', 'type': 'string'},
\    '$comments_feed_structure': {'initializer': '', 'type': 'string'},
\    '$feed_structure': {'initializer': '', 'type': 'string'},
\    '$front': {'initializer': '', 'type': 'string'},
\    '$root': {'initializer': '', 'type': 'string'},
\    '$index': {'initializer': 'index.php', 'type': 'string'},
\    '$matches': {'initializer': '', 'type': 'string'},
\    '$rules': {'initializer': '', 'type': 'array'},
\    '$extra_rules': {'initializer': 'array', 'type': 'array'},
\    '$extra_rules_top': {'initializer': 'array', 'type': 'array'},
\    '$non_wp_rules': {'initializer': 'array', 'type': 'array'},
\    '$extra_permastructs': {'initializer': 'array', 'type': 'array'},
\    '$endpoints': {'initializer': '', 'type': 'array'},
\    '$use_verbose_rules': {'initializer': 'false', 'type': 'bool'},
\    '$use_verbose_page_rules': {'initializer': 'true', 'type': 'bool'},
\    '$rewritecode': {'initializer': 'array', 'type': 'array'},
\    '$rewritereplace': {'initializer': 'array', 'type': 'array'},
\    '$queryreplace': {'initializer': 'array', 'type': 'array'},
\    '$feeds': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    'using_permalinks': { 'signature': 'void', 'return_type': 'bool'},
\    'using_index_permalinks': { 'signature': 'void', 'return_type': 'bool'},
\    'using_mod_rewrite_permalinks': { 'signature': 'void', 'return_type': 'bool'},
\    'preg_index': { 'signature': 'int $number', 'return_type': 'string'},
\    'page_uri_index': { 'signature': 'void', 'return_type': 'array'},
\    'page_rewrite_rules': { 'signature': 'void', 'return_type': 'array'},
\    'get_date_permastruct': { 'signature': 'void', 'return_type': 'bool|string'},
\    'get_year_permastruct': { 'signature': 'void', 'return_type': 'bool|string'},
\    'get_month_permastruct': { 'signature': 'void', 'return_type': 'bool|string'},
\    'get_day_permastruct': { 'signature': 'void', 'return_type': 'bool|string'},
\    'get_category_permastruct': { 'signature': 'void', 'return_type': 'bool|string'},
\    'get_tag_permastruct': { 'signature': 'void', 'return_type': 'bool|string'},
\    'get_extra_permastruct': { 'signature': 'string $name', 'return_type': 'string|bool'},
\    'get_author_permastruct': { 'signature': 'void', 'return_type': 'string|bool'},
\    'get_search_permastruct': { 'signature': 'void', 'return_type': 'string|bool'},
\    'get_page_permastruct': { 'signature': 'void', 'return_type': 'string|bool'},
\    'get_feed_permastruct': { 'signature': 'void', 'return_type': 'string|bool'},
\    'get_comment_feed_permastruct': { 'signature': 'void', 'return_type': 'string|bool'},
\    'add_rewrite_tag': { 'signature': 'string $tag, string $regex, string $query', 'return_type': 'void'},
\    'generate_rewrite_rules': { 'signature': 'string $permalink_structure, int $ep_mask, bool $paged, bool $feed, bool $forcomments, bool $walk_dirs, bool $endpoints', 'return_type': 'array'},
\    'generate_rewrite_rule': { 'signature': 'string $permalink_structure, bool $walk_dirs', 'return_type': 'array'},
\    'rewrite_rules': { 'signature': 'void', 'return_type': 'array'},
\    'wp_rewrite_rules': { 'signature': 'void', 'return_type': 'array'},
\    'mod_rewrite_rules': { 'signature': 'void', 'return_type': 'string'},
\    'iis7_url_rewrite_rules': { 'signature': ' $add_parent_tags', 'return_type': 'string'},
\    'add_rule': { 'signature': 'string $regex, string $redirect, string $after', 'return_type': 'void'},
\    'add_external_rule': { 'signature': 'string $regex, string $redirect', 'return_type': 'void'},
\    'add_endpoint': { 'signature': 'string $name, int $places', 'return_type': 'void'},
\    'add_permastruct': { 'signature': 'string $name, string $struct, array $args', 'return_type': 'void'},
\    'flush_rules': { 'signature': 'bool $hard', 'return_type': 'void'},
\    'init': { 'signature': 'void', 'return_type': 'void'},
\    'set_permalink_structure': { 'signature': 'string $permalink_structure', 'return_type': 'void'},
\    'set_category_base': { 'signature': 'string $category_base', 'return_type': 'void'},
\    'set_tag_base': { 'signature': 'string $tag_base', 'return_type': 'void'},
\    '__construct': { 'signature': 'void', 'return_type': '\WP_Rewrite'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_phpmailer'] = {
\'phpmailer': {
\  'name': 'PHPMailer',
\  'static_methods': {
\    'ValidateAddress': { 'signature': 'string $address', 'return_type': 'boolean'},
\    'RFCDate': { 'signature': 'void', 'return_type': 'string'},
\    '_mime_types': { 'signature': 'string $ext', 'return_type': 'string'},
\  },
\  'properties': {
\    '$Priority': {'initializer': '3', 'type': 'int'},
\    '$CharSet': {'initializer': 'iso-8859-1', 'type': 'string'},
\    '$ContentType': {'initializer': 'text/plain', 'type': 'string'},
\    '$Encoding': {'initializer': '8bit', 'type': 'string'},
\    '$ErrorInfo': {'initializer': '', 'type': 'string'},
\    '$From': {'initializer': 'root@localhost', 'type': 'string'},
\    '$FromName': {'initializer': 'Root User', 'type': 'string'},
\    '$Sender': {'initializer': '', 'type': 'string'},
\    '$ReturnPath': {'initializer': '', 'type': 'string'},
\    '$Subject': {'initializer': '', 'type': 'string'},
\    '$Body': {'initializer': '', 'type': 'string'},
\    '$AltBody': {'initializer': '', 'type': 'string'},
\    '$WordWrap': {'initializer': '0', 'type': 'int'},
\    '$Mailer': {'initializer': 'mail', 'type': 'string'},
\    '$Sendmail': {'initializer': '/usr/sbin/sendmail', 'type': 'string'},
\    '$UseSendmailOptions': {'initializer': 'true', 'type': 'boolean'},
\    '$PluginDir': {'initializer': '', 'type': 'string'},
\    '$ConfirmReadingTo': {'initializer': '', 'type': 'string'},
\    '$Hostname': {'initializer': '', 'type': 'string'},
\    '$MessageID': {'initializer': '', 'type': 'string'},
\    '$MessageDate': {'initializer': '', 'type': 'string'},
\    '$Host': {'initializer': 'localhost', 'type': 'string'},
\    '$Port': {'initializer': '25', 'type': 'int'},
\    '$Helo': {'initializer': '', 'type': 'string'},
\    '$SMTPSecure': {'initializer': '', 'type': 'string'},
\    '$SMTPAuth': {'initializer': 'false', 'type': 'bool'},
\    '$Username': {'initializer': '', 'type': 'string'},
\    '$Password': {'initializer': '', 'type': 'string'},
\    '$AuthType': {'initializer': '', 'type': ''},
\    '$Realm': {'initializer': '', 'type': ''},
\    '$Workstation': {'initializer': '', 'type': ''},
\    '$Timeout': {'initializer': '10', 'type': 'int'},
\    '$SMTPDebug': {'initializer': 'false', 'type': 'bool'},
\    '$Debugoutput': {'initializer': '"echo"', 'type': 'string'},
\    '$SMTPKeepAlive': {'initializer': 'false', 'type': 'bool'},
\    '$SingleTo': {'initializer': 'false', 'type': 'bool'},
\    '$SingleToArray': {'initializer': 'array', 'type': 'bool'},
\    '$LE': {'initializer': '"\n"', 'type': 'string'},
\    '$DKIM_selector': {'initializer': '', 'type': 'string'},
\    '$DKIM_identity': {'initializer': '', 'type': 'string'},
\    '$DKIM_passphrase': {'initializer': '', 'type': 'string'},
\    '$DKIM_domain': {'initializer': '', 'type': 'string'},
\    '$DKIM_private': {'initializer': '', 'type': 'string'},
\    '$action_function': {'initializer': '', 'type': 'string'},
\    '$Version': {'initializer': '5.2.4', 'type': 'string'},
\    '$XMailer': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'boolean $exceptions', 'return_type': 'void'},
\    'IsHTML': { 'signature': 'bool $ishtml', 'return_type': 'void'},
\    'IsSMTP': { 'signature': 'void', 'return_type': 'void'},
\    'IsMail': { 'signature': 'void', 'return_type': 'void'},
\    'IsSendmail': { 'signature': 'void', 'return_type': 'void'},
\    'IsQmail': { 'signature': 'void', 'return_type': 'void'},
\    'AddAddress': { 'signature': 'string $address, string $name', 'return_type': 'boolean'},
\    'AddCC': { 'signature': 'string $address, string $name', 'return_type': 'boolean'},
\    'AddBCC': { 'signature': 'string $address, string $name', 'return_type': 'boolean'},
\    'AddReplyTo': { 'signature': 'string $address, string $name', 'return_type': 'boolean'},
\    'SetFrom': { 'signature': 'string $address, string $name, int $auto', 'return_type': 'boolean'},
\    'Send': { 'signature': 'void', 'return_type': 'bool'},
\    'PreSend': { 'signature': 'void', 'return_type': 'bool'},
\    'PostSend': { 'signature': 'void', 'return_type': 'bool'},
\    'SmtpConnect': { 'signature': 'void', 'return_type': 'bool'},
\    'SmtpClose': { 'signature': 'void', 'return_type': 'void'},
\    'SetLanguage': { 'signature': 'string $langcode, string $lang_path', 'return_type': 'bool'},
\    'GetTranslations': { 'signature': 'void', 'return_type': 'array'},
\    'AddrAppend': { 'signature': 'string $type, array $addr', 'return_type': 'string'},
\    'AddrFormat': { 'signature': 'string $addr', 'return_type': 'string'},
\    'WrapText': { 'signature': 'string $message, integer $length, boolean $qp_mode', 'return_type': 'string'},
\    'UTF8CharBoundary': { 'signature': 'string $encodedText, int $maxLength', 'return_type': 'int'},
\    'SetWordWrap': { 'signature': 'void', 'return_type': 'void'},
\    'CreateHeader': { 'signature': 'void', 'return_type': 'string'},
\    'GetMailMIME': { 'signature': 'void', 'return_type': 'string'},
\    'GetSentMIMEMessage': { 'signature': 'void', 'return_type': 'string'},
\    'CreateBody': { 'signature': 'void', 'return_type': 'string'},
\    'HeaderLine': { 'signature': 'string $name, string $value', 'return_type': 'string'},
\    'TextLine': { 'signature': 'string $value', 'return_type': 'string'},
\    'AddAttachment': { 'signature': 'string $path, string $name, string $encoding, string $type', 'return_type': 'bool'},
\    'GetAttachments': { 'signature': 'void', 'return_type': 'array'},
\    'EncodeString': { 'signature': 'string $str, string $encoding', 'return_type': 'string'},
\    'EncodeHeader': { 'signature': 'string $str, string $position', 'return_type': 'string'},
\    'HasMultiBytes': { 'signature': 'string $str', 'return_type': 'bool'},
\    'Base64EncodeWrapMB': { 'signature': 'string $str, string $lf', 'return_type': 'string'},
\    'EncodeQP': { 'signature': 'string $string, integer $line_max, boolean $space_conv', 'return_type': 'string'},
\    'EncodeQ': { 'signature': 'string $str, string $position', 'return_type': 'string'},
\    'AddStringAttachment': { 'signature': 'string $string, string $filename, string $encoding, string $type', 'return_type': 'void'},
\    'AddEmbeddedImage': { 'signature': 'string $path, string $cid, string $name, string $encoding, string $type', 'return_type': 'bool'},
\    'AddStringEmbeddedImage': { 'signature': 'string $string, string $cid, string $name, string $encoding, string $type', 'return_type': 'bool'},
\    'InlineImageExists': { 'signature': 'void', 'return_type': 'bool'},
\    'AttachmentExists': { 'signature': 'void', 'return_type': 'bool'},
\    'AlternativeExists': { 'signature': 'void', 'return_type': 'bool'},
\    'ClearAddresses': { 'signature': 'void', 'return_type': 'void'},
\    'ClearCCs': { 'signature': 'void', 'return_type': 'void'},
\    'ClearBCCs': { 'signature': 'void', 'return_type': 'void'},
\    'ClearReplyTos': { 'signature': 'void', 'return_type': 'void'},
\    'ClearAllRecipients': { 'signature': 'void', 'return_type': 'void'},
\    'ClearAttachments': { 'signature': 'void', 'return_type': 'void'},
\    'ClearCustomHeaders': { 'signature': 'void', 'return_type': 'void'},
\    'IsError': { 'signature': 'void', 'return_type': 'bool'},
\    'FixEOL': { 'signature': 'string $str', 'return_type': 'string'},
\    'AddCustomHeader': { 'signature': 'string $name, string $value', 'return_type': 'void'},
\    'MsgHTML': { 'signature': 'string $message, string $basedir', 'return_type': 'string'},
\    'set': { 'signature': 'string $name, mixed $value', 'return_type': 'bool'},
\    'SecureHeader': { 'signature': 'string $str', 'return_type': 'string'},
\    'Sign': { 'signature': 'mixed $cert_filename, string $key_filename, string $key_pass', 'return_type': 'void'},
\    'DKIM_QP': { 'signature': 'string $txt', 'return_type': 'string'},
\    'DKIM_Sign': { 'signature': 'string $s', 'return_type': 'string'},
\    'DKIM_HeaderC': { 'signature': 'string $s', 'return_type': 'string'},
\    'DKIM_BodyC': { 'signature': 'string $body', 'return_type': 'string'},
\    'DKIM_Add': { 'signature': 'string $headers_line, string $subject, string $body', 'return_type': 'string'},
\  },
\},
\'phpmailerexception': {
\  'name': 'phpmailerException',
\  'methods': {
\    'errorMessage': { 'signature': 'void', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_pspellshell'] = {
\'pspellshell': {
\  'name': 'PSpellShell',
\  'methods': {
\    'checkWords': { 'signature': '\{String} $lang, \{Array} $words', 'return_type': '\{Array}'},
\    'getSuggestions': { 'signature': '\{String} $lang, \{String} $word', 'return_type': '\{Array}'},
\    '_getCMD': { 'signature': ' $lang', 'return_type': 'void'},
\    'SpellChecker': { 'signature': 'mixed $config', 'return_type': 'void'},
\    'loopback': { 'signature': 'void', 'return_type': '\{Array}'},
\    'throwError': { 'signature': '\{String} $str', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_source'] = {
\'simplepie_source': {
\  'name': 'SimplePie_Source',
\  'properties': {
\    '$item': {'initializer': '', 'type': ''},
\    '$data': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $item,  $data', 'return_type': 'void'},
\    'set_registry': { 'signature': '\SimplePie_Registry $registry', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'void'},
\    'get_source_tags': { 'signature': ' $namespace,  $tag', 'return_type': 'void'},
\    'get_base': { 'signature': ' $element', 'return_type': 'void'},
\    'sanitize': { 'signature': ' $data,  $type,  $base', 'return_type': 'void'},
\    'get_item': { 'signature': 'void', 'return_type': 'void'},
\    'get_title': { 'signature': 'void', 'return_type': 'void'},
\    'get_category': { 'signature': ' $key', 'return_type': 'void'},
\    'get_categories': { 'signature': 'void', 'return_type': 'void'},
\    'get_author': { 'signature': ' $key', 'return_type': 'void'},
\    'get_authors': { 'signature': 'void', 'return_type': 'void'},
\    'get_contributor': { 'signature': ' $key', 'return_type': 'void'},
\    'get_contributors': { 'signature': 'void', 'return_type': 'void'},
\    'get_link': { 'signature': ' $key,  $rel', 'return_type': 'void'},
\    'get_permalink': { 'signature': 'void', 'return_type': 'void'},
\    'get_links': { 'signature': ' $rel', 'return_type': 'void'},
\    'get_description': { 'signature': 'void', 'return_type': 'void'},
\    'get_copyright': { 'signature': 'void', 'return_type': 'void'},
\    'get_language': { 'signature': 'void', 'return_type': 'void'},
\    'get_latitude': { 'signature': 'void', 'return_type': 'void'},
\    'get_longitude': { 'signature': 'void', 'return_type': 'void'},
\    'get_image_url': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_db'] = {
\'simplepie_cache_db': {
\  'name': 'SimplePie_Cache_DB',
\  'static_methods': {
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_taxonomy'] = {
\'wp_tax_query': {
\  'name': 'WP_Tax_Query',
\  'static_properties': {
\  },
\  'properties': {
\    '$queries': {'initializer': 'array', 'type': 'array'},
\    '$relation': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'array $tax_query', 'return_type': 'void'},
\    'get_sql': { 'signature': 'string $primary_table, string $primary_id_column', 'return_type': 'array'},
\    'transform_query': { 'signature': ' $query, string $resulting_field', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_query'] = {
\'wp_query': {
\  'name': 'WP_Query',
\  'properties': {
\    '$query': {'initializer': '', 'type': 'array'},
\    '$query_vars': {'initializer': 'array', 'type': 'array'},
\    '$tax_query': {'initializer': '', 'type': 'object'},
\    '$meta_query': {'initializer': 'false', 'type': 'object'},
\    '$date_query': {'initializer': 'false', 'type': 'object'},
\    '$queried_object': {'initializer': '', 'type': 'object|array'},
\    '$queried_object_id': {'initializer': '', 'type': 'int'},
\    '$request': {'initializer': '', 'type': 'string'},
\    '$posts': {'initializer': '', 'type': 'array'},
\    '$post_count': {'initializer': '0', 'type': 'int'},
\    '$current_post': {'initializer': '-1', 'type': 'int'},
\    '$in_the_loop': {'initializer': 'false', 'type': 'bool'},
\    '$post': {'initializer': '', 'type': '\WP_Post'},
\    '$comments': {'initializer': '', 'type': 'array'},
\    '$comment_count': {'initializer': '0', 'type': 'int'},
\    '$current_comment': {'initializer': '-1', 'type': 'int'},
\    '$comment': {'initializer': '', 'type': 'int'},
\    '$found_posts': {'initializer': '0', 'type': 'int'},
\    '$max_num_pages': {'initializer': '0', 'type': 'int'},
\    '$max_num_comment_pages': {'initializer': '0', 'type': 'int'},
\    '$is_single': {'initializer': 'false', 'type': 'bool'},
\    '$is_preview': {'initializer': 'false', 'type': 'bool'},
\    '$is_page': {'initializer': 'false', 'type': 'bool'},
\    '$is_archive': {'initializer': 'false', 'type': 'bool'},
\    '$is_date': {'initializer': 'false', 'type': 'bool'},
\    '$is_year': {'initializer': 'false', 'type': 'bool'},
\    '$is_month': {'initializer': 'false', 'type': 'bool'},
\    '$is_day': {'initializer': 'false', 'type': 'bool'},
\    '$is_time': {'initializer': 'false', 'type': 'bool'},
\    '$is_author': {'initializer': 'false', 'type': 'bool'},
\    '$is_category': {'initializer': 'false', 'type': 'bool'},
\    '$is_tag': {'initializer': 'false', 'type': 'bool'},
\    '$is_tax': {'initializer': 'false', 'type': 'bool'},
\    '$is_search': {'initializer': 'false', 'type': 'bool'},
\    '$is_feed': {'initializer': 'false', 'type': 'bool'},
\    '$is_comment_feed': {'initializer': 'false', 'type': 'bool'},
\    '$is_trackback': {'initializer': 'false', 'type': 'bool'},
\    '$is_home': {'initializer': 'false', 'type': 'bool'},
\    '$is_404': {'initializer': 'false', 'type': 'bool'},
\    '$is_comments_popup': {'initializer': 'false', 'type': 'bool'},
\    '$is_paged': {'initializer': 'false', 'type': 'bool'},
\    '$is_admin': {'initializer': 'false', 'type': 'bool'},
\    '$is_attachment': {'initializer': 'false', 'type': 'bool'},
\    '$is_singular': {'initializer': 'false', 'type': 'bool'},
\    '$is_robots': {'initializer': 'false', 'type': 'bool'},
\    '$is_posts_page': {'initializer': 'false', 'type': 'bool'},
\    '$is_post_type_archive': {'initializer': 'false', 'type': 'bool'},
\    '$query_vars_hash': {'initializer': 'false', 'type': ''},
\    '$query_vars_changed': {'initializer': 'true', 'type': ''},
\    '$thumbnails_cached': {'initializer': 'false', 'type': 'bool'},
\  },
\  'methods': {
\    'init_query_flags': { 'signature': 'void', 'return_type': 'void'},
\    'init': { 'signature': 'void', 'return_type': 'void'},
\    'parse_query_vars': { 'signature': 'void', 'return_type': 'void'},
\    'fill_query_vars': { 'signature': 'array $array', 'return_type': 'array'},
\    'parse_query': { 'signature': 'string|array $query', 'return_type': 'void'},
\    'parse_tax_query': { 'signature': ' $q', 'return_type': 'void'},
\    'set_404': { 'signature': 'void', 'return_type': 'void'},
\    'get': { 'signature': 'string $query_var', 'return_type': 'mixed'},
\    'set': { 'signature': 'string $query_var, mixed $value', 'return_type': 'void'},
\    'get_posts': { 'signature': 'void', 'return_type': 'array'},
\    'set_found_posts': { 'signature': ' $q,  $limits', 'return_type': 'void'},
\    'next_post': { 'signature': 'void', 'return_type': '\WP_Post'},
\    'the_post': { 'signature': 'void', 'return_type': 'void'},
\    'have_posts': { 'signature': 'void', 'return_type': 'bool'},
\    'rewind_posts': { 'signature': 'void', 'return_type': 'void'},
\    'next_comment': { 'signature': 'void', 'return_type': 'object'},
\    'the_comment': { 'signature': 'void', 'return_type': 'void'},
\    'have_comments': { 'signature': 'void', 'return_type': 'bool'},
\    'rewind_comments': { 'signature': 'void', 'return_type': 'void'},
\    'query': { 'signature': 'string $query', 'return_type': 'array'},
\    'get_queried_object': { 'signature': 'void', 'return_type': 'object'},
\    'get_queried_object_id': { 'signature': 'void', 'return_type': 'int'},
\    '__construct': { 'signature': 'string $query', 'return_type': '\WP_Query'},
\    'is_archive': { 'signature': 'void', 'return_type': 'bool'},
\    'is_post_type_archive': { 'signature': 'mixed $post_types', 'return_type': 'bool'},
\    'is_attachment': { 'signature': 'void', 'return_type': 'bool'},
\    'is_author': { 'signature': 'mixed $author', 'return_type': 'bool'},
\    'is_category': { 'signature': 'mixed $category', 'return_type': 'bool'},
\    'is_tag': { 'signature': 'mixed $tag', 'return_type': 'bool'},
\    'is_tax': { 'signature': 'mixed $taxonomy,  $term', 'return_type': 'bool'},
\    'is_comments_popup': { 'signature': 'void', 'return_type': 'bool'},
\    'is_date': { 'signature': 'void', 'return_type': 'bool'},
\    'is_day': { 'signature': 'void', 'return_type': 'bool'},
\    'is_feed': { 'signature': 'string|array $feeds', 'return_type': 'bool'},
\    'is_comment_feed': { 'signature': 'void', 'return_type': 'bool'},
\    'is_front_page': { 'signature': 'void', 'return_type': 'bool'},
\    'is_home': { 'signature': 'void', 'return_type': 'bool'},
\    'is_month': { 'signature': 'void', 'return_type': 'bool'},
\    'is_page': { 'signature': 'mixed $page', 'return_type': 'bool'},
\    'is_paged': { 'signature': 'void', 'return_type': 'bool'},
\    'is_preview': { 'signature': 'void', 'return_type': 'bool'},
\    'is_robots': { 'signature': 'void', 'return_type': 'bool'},
\    'is_search': { 'signature': 'void', 'return_type': 'bool'},
\    'is_single': { 'signature': 'mixed $post', 'return_type': 'bool'},
\    'is_singular': { 'signature': 'mixed $post_types', 'return_type': 'bool'},
\    'is_time': { 'signature': 'void', 'return_type': 'bool'},
\    'is_trackback': { 'signature': 'void', 'return_type': 'bool'},
\    'is_year': { 'signature': 'void', 'return_type': 'bool'},
\    'is_404': { 'signature': 'void', 'return_type': 'bool'},
\    'is_main_query': { 'signature': 'void', 'return_type': 'bool'},
\    'reset_postdata': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_dts'] = {
\'getid3_dts': {
\  'name': 'getid3_dts',
\  'static_properties': {
\    '$syncwords': {'initializer': 'array', 'type': ''},
\  },
\  'static_methods': {
\    'bitrateLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'sampleRateLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'bitPerSampleLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'numChannelsLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'channelArrangementLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'dialogNormalization': { 'signature': ' $index,  $version', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_wp_db'] = {
\'wpdb': {
\  'name': 'wpdb',
\  'properties': {
\    '$show_errors': {'initializer': 'false', 'type': 'bool'},
\    '$suppress_errors': {'initializer': 'false', 'type': 'bool'},
\    '$last_error': {'initializer': '', 'type': 'string'},
\    '$num_queries': {'initializer': '0', 'type': 'int'},
\    '$num_rows': {'initializer': '0', 'type': 'int'},
\    '$rows_affected': {'initializer': '0', 'type': 'int'},
\    '$insert_id': {'initializer': '0', 'type': 'int'},
\    '$last_query': {'initializer': '', 'type': 'array'},
\    '$last_result': {'initializer': '', 'type': 'array|null'},
\    '$queries': {'initializer': '', 'type': 'array'},
\    '$prefix': {'initializer': '', 'type': 'string'},
\    '$ready': {'initializer': 'false', 'type': 'bool'},
\    '$blogid': {'initializer': '0', 'type': 'int'},
\    '$siteid': {'initializer': '0', 'type': 'int'},
\    '$tables': {'initializer': 'array', 'type': 'array'},
\    '$old_tables': {'initializer': 'array', 'type': 'array'},
\    '$global_tables': {'initializer': 'array', 'type': 'array'},
\    '$ms_global_tables': {'initializer': 'array', 'type': 'array'},
\    '$comments': {'initializer': '', 'type': 'string'},
\    '$commentmeta': {'initializer': '', 'type': 'string'},
\    '$links': {'initializer': '', 'type': 'string'},
\    '$options': {'initializer': '', 'type': 'string'},
\    '$postmeta': {'initializer': '', 'type': 'string'},
\    '$posts': {'initializer': '', 'type': 'string'},
\    '$terms': {'initializer': '', 'type': 'string'},
\    '$term_relationships': {'initializer': '', 'type': 'string'},
\    '$term_taxonomy': {'initializer': '', 'type': 'string'},
\    '$usermeta': {'initializer': '', 'type': 'string'},
\    '$users': {'initializer': '', 'type': 'string'},
\    '$blogs': {'initializer': '', 'type': 'string'},
\    '$blog_versions': {'initializer': '', 'type': 'string'},
\    '$registration_log': {'initializer': '', 'type': 'string'},
\    '$signups': {'initializer': '', 'type': 'string'},
\    '$site': {'initializer': '', 'type': 'string'},
\    '$sitecategories': {'initializer': '', 'type': 'string'},
\    '$sitemeta': {'initializer': '', 'type': 'string'},
\    '$field_types': {'initializer': 'array', 'type': 'array'},
\    '$charset': {'initializer': '', 'type': 'string'},
\    '$collate': {'initializer': '', 'type': 'string'},
\    '$func_call': {'initializer': '', 'type': 'string'},
\    '$is_mysql': {'initializer': 'null', 'type': 'bool'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $dbuser, string $dbpassword, string $dbname, string $dbhost', 'return_type': 'void'},
\    '__destruct': { 'signature': 'void', 'return_type': 'bool'},
\    '__get': { 'signature': 'string $name', 'return_type': 'mixed'},
\    '__set': { 'signature': 'string $name, mixed $value', 'return_type': 'void'},
\    '__isset': { 'signature': 'string $name', 'return_type': 'bool'},
\    '__unset': { 'signature': 'string $name', 'return_type': 'void'},
\    'init_charset': { 'signature': 'void', 'return_type': 'void'},
\    'set_charset': { 'signature': 'resource $dbh, string $charset, string $collate', 'return_type': 'void'},
\    'set_prefix': { 'signature': 'string $prefix, bool $set_table_names', 'return_type': 'string|\WP_Error'},
\    'set_blog_id': { 'signature': 'int $blog_id, int $site_id', 'return_type': 'string'},
\    'get_blog_prefix': { 'signature': 'int $blog_id', 'return_type': 'string'},
\    'tables': { 'signature': 'string $scope, bool $prefix, int $blog_id', 'return_type': 'array'},
\    'select': { 'signature': 'string $db, resource $dbh', 'return_type': 'null'},
\    '_weak_escape': { 'signature': 'string $string', 'return_type': 'string'},
\    '_real_escape': { 'signature': 'string $string', 'return_type': 'string'},
\    '_escape': { 'signature': 'string|array $data', 'return_type': 'string|array'},
\    'escape': { 'signature': 'mixed $data', 'return_type': 'mixed'},
\    'escape_by_ref': { 'signature': 'string $string', 'return_type': 'void'},
\    'prepare': { 'signature': 'string $query, array|mixed $args', 'return_type': 'null|false|string'},
\    'print_error': { 'signature': 'string $str', 'return_type': 'bool'},
\    'show_errors': { 'signature': 'bool $show', 'return_type': 'bool'},
\    'hide_errors': { 'signature': 'void', 'return_type': 'bool'},
\    'suppress_errors': { 'signature': 'bool $suppress', 'return_type': 'bool'},
\    'flush': { 'signature': 'void', 'return_type': 'void'},
\    'db_connect': { 'signature': 'void', 'return_type': 'void'},
\    'query': { 'signature': 'string $query', 'return_type': 'int|false'},
\    'insert': { 'signature': 'string $table, array $data, array|string $format', 'return_type': 'int|false'},
\    'replace': { 'signature': 'string $table, array $data, array|string $format', 'return_type': 'int|false'},
\    '_insert_replace_helper': { 'signature': 'string $table, array $data, array|string $format, string $type', 'return_type': 'int|false'},
\    'update': { 'signature': 'string $table, array $data, array $where, array|string $format, array|string $where_format', 'return_type': 'int|false'},
\    'delete': { 'signature': 'string $table, array $where, array|string $where_format', 'return_type': 'int|false'},
\    'get_var': { 'signature': 'string|null $query, int $x, int $y', 'return_type': 'string|null'},
\    'get_row': { 'signature': 'string|null $query, string $output, int $y', 'return_type': 'mixed'},
\    'get_col': { 'signature': 'string|null $query, int $x', 'return_type': 'array'},
\    'get_results': { 'signature': 'string $query, string $output', 'return_type': 'mixed'},
\    'get_col_info': { 'signature': 'string $info_type, int $col_offset', 'return_type': 'mixed'},
\    'timer_start': { 'signature': 'void', 'return_type': 'true'},
\    'timer_stop': { 'signature': 'void', 'return_type': 'float'},
\    'bail': { 'signature': 'string $message, string $error_code', 'return_type': 'false|void'},
\    'check_database_version': { 'signature': 'void', 'return_type': '\WP_Error'},
\    'supports_collation': { 'signature': 'void', 'return_type': 'bool'},
\    'get_charset_collate': { 'signature': 'void', 'return_type': 'string'},
\    'has_cap': { 'signature': 'string $db_cap', 'return_type': 'bool'},
\    'get_caller': { 'signature': 'void', 'return_type': 'string'},
\    'db_version': { 'signature': 'void', 'return_type': 'false|string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_video_flv'] = {
\'getid3_flv': {
\  'name': 'getid3_flv',
\  'properties': {
\    '$max_frames': {'initializer': '100000', 'type': ''},
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'FLVaudioFormat': { 'signature': ' $id', 'return_type': 'void'},
\    'FLVaudioRate': { 'signature': ' $id', 'return_type': 'void'},
\    'FLVaudioBitDepth': { 'signature': ' $id', 'return_type': 'void'},
\    'FLVvideoCodec': { 'signature': ' $id', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\'amfstream': {
\  'name': 'AMFStream',
\  'properties': {
\    '$bytes': {'initializer': '', 'type': ''},
\    '$pos': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'AMFStream': { 'signature': ' $bytes', 'return_type': 'void'},
\    'readByte': { 'signature': 'void', 'return_type': 'void'},
\    'readInt': { 'signature': 'void', 'return_type': 'void'},
\    'readLong': { 'signature': 'void', 'return_type': 'void'},
\    'readDouble': { 'signature': 'void', 'return_type': 'void'},
\    'readUTF': { 'signature': 'void', 'return_type': 'void'},
\    'readLongUTF': { 'signature': 'void', 'return_type': 'void'},
\    'read': { 'signature': ' $length', 'return_type': 'void'},
\    'peekByte': { 'signature': 'void', 'return_type': 'void'},
\    'peekInt': { 'signature': 'void', 'return_type': 'void'},
\    'peekLong': { 'signature': 'void', 'return_type': 'void'},
\    'peekDouble': { 'signature': 'void', 'return_type': 'void'},
\    'peekUTF': { 'signature': 'void', 'return_type': 'void'},
\    'peekLongUTF': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'amfreader': {
\  'name': 'AMFReader',
\  'properties': {
\    '$stream': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'AMFReader': { 'signature': ' $stream', 'return_type': 'void'},
\    'readData': { 'signature': 'void', 'return_type': 'void'},
\    'readDouble': { 'signature': 'void', 'return_type': 'void'},
\    'readBoolean': { 'signature': 'void', 'return_type': 'void'},
\    'readString': { 'signature': 'void', 'return_type': 'void'},
\    'readObject': { 'signature': 'void', 'return_type': 'void'},
\    'readMixedArray': { 'signature': 'void', 'return_type': 'void'},
\    'readArray': { 'signature': 'void', 'return_type': 'void'},
\    'readDate': { 'signature': 'void', 'return_type': 'void'},
\    'readLongString': { 'signature': 'void', 'return_type': 'void'},
\    'readXML': { 'signature': 'void', 'return_type': 'void'},
\    'readTypedObject': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'avcsequenceparametersetreader': {
\  'name': 'AVCSequenceParameterSetReader',
\  'properties': {
\    '$sps': {'initializer': '', 'type': ''},
\    '$start': {'initializer': '0', 'type': ''},
\    '$currentBytes': {'initializer': '0', 'type': ''},
\    '$currentBits': {'initializer': '0', 'type': ''},
\    '$width': {'initializer': '', 'type': ''},
\    '$height': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'AVCSequenceParameterSetReader': { 'signature': ' $sps', 'return_type': 'void'},
\    'readData': { 'signature': 'void', 'return_type': 'void'},
\    'skipBits': { 'signature': ' $bits', 'return_type': 'void'},
\    'getBit': { 'signature': 'void', 'return_type': 'void'},
\    'getBits': { 'signature': ' $bits', 'return_type': 'void'},
\    'expGolombUe': { 'signature': 'void', 'return_type': 'void'},
\    'expGolombSe': { 'signature': 'void', 'return_type': 'void'},
\    'getWidth': { 'signature': 'void', 'return_type': 'void'},
\    'getHeight': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_diff'] = {
\'text_diff': {
\  'name': 'Text_Diff',
\  'static_methods': {
\    'trimNewlines': { 'signature': 'string $line, integer $key', 'return_type': 'void'},
\  },
\  'properties': {
\    '$_edits': {'initializer': '', 'type': 'array'},
\  },
\  'methods': {
\    'Text_Diff': { 'signature': 'string $engine, array $params', 'return_type': 'void'},
\    'getDiff': { 'signature': 'void', 'return_type': 'void'},
\    'countAddedLines': { 'signature': 'void', 'return_type': 'integer'},
\    'countDeletedLines': { 'signature': 'void', 'return_type': 'integer'},
\    'reverse': { 'signature': 'void', 'return_type': '\Text_Diff'},
\    'isEmpty': { 'signature': 'void', 'return_type': 'boolean'},
\    'lcs': { 'signature': 'void', 'return_type': 'integer'},
\    'getOriginal': { 'signature': 'void', 'return_type': 'array'},
\    'getFinal': { 'signature': 'void', 'return_type': 'array'},
\    '_getTempDir': { 'signature': 'void', 'return_type': 'string'},
\    '_check': { 'signature': ' $from_lines,  $to_lines', 'return_type': 'void'},
\  },
\},
\'text_mappeddiff': {
\  'name': 'Text_MappedDiff',
\  'static_methods': {
\    'trimNewlines': { 'signature': 'string $line, integer $key', 'return_type': 'void'},
\  },
\  'properties': {
\    '$_edits': {'initializer': '', 'type': 'array'},
\  },
\  'methods': {
\    'Text_MappedDiff': { 'signature': 'array $from_lines, array $to_lines, array $mapped_from_lines, array $mapped_to_lines', 'return_type': 'void'},
\    'Text_Diff': { 'signature': 'string $engine, array $params', 'return_type': 'void'},
\    'getDiff': { 'signature': 'void', 'return_type': 'void'},
\    'countAddedLines': { 'signature': 'void', 'return_type': 'integer'},
\    'countDeletedLines': { 'signature': 'void', 'return_type': 'integer'},
\    'reverse': { 'signature': 'void', 'return_type': '\Text_Diff'},
\    'isEmpty': { 'signature': 'void', 'return_type': 'boolean'},
\    'lcs': { 'signature': 'void', 'return_type': 'integer'},
\    'getOriginal': { 'signature': 'void', 'return_type': 'array'},
\    'getFinal': { 'signature': 'void', 'return_type': 'array'},
\    '_getTempDir': { 'signature': 'void', 'return_type': 'string'},
\    '_check': { 'signature': ' $from_lines,  $to_lines', 'return_type': 'void'},
\  },
\},
\'text_diff_op': {
\  'name': 'Text_Diff_Op',
\  'properties': {
\    '$orig': {'initializer': '', 'type': ''},
\    '$final': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'reverse': { 'signature': 'void', 'return_type': 'void'},
\    'norig': { 'signature': 'void', 'return_type': 'void'},
\    'nfinal': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'text_diff_op_copy': {
\  'name': 'Text_Diff_Op_copy',
\  'properties': {
\    '$orig': {'initializer': '', 'type': ''},
\    '$final': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'Text_Diff_Op_copy': { 'signature': ' $orig,  $final', 'return_type': 'void'},
\    'reverse': { 'signature': 'void', 'return_type': 'void'},
\    'norig': { 'signature': 'void', 'return_type': 'void'},
\    'nfinal': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'text_diff_op_delete': {
\  'name': 'Text_Diff_Op_delete',
\  'properties': {
\    '$orig': {'initializer': '', 'type': ''},
\    '$final': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'Text_Diff_Op_delete': { 'signature': ' $lines', 'return_type': 'void'},
\    'reverse': { 'signature': 'void', 'return_type': 'void'},
\    'norig': { 'signature': 'void', 'return_type': 'void'},
\    'nfinal': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'text_diff_op_add': {
\  'name': 'Text_Diff_Op_add',
\  'properties': {
\    '$orig': {'initializer': '', 'type': ''},
\    '$final': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'Text_Diff_Op_add': { 'signature': ' $lines', 'return_type': 'void'},
\    'reverse': { 'signature': 'void', 'return_type': 'void'},
\    'norig': { 'signature': 'void', 'return_type': 'void'},
\    'nfinal': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'text_diff_op_change': {
\  'name': 'Text_Diff_Op_change',
\  'properties': {
\    '$orig': {'initializer': '', 'type': ''},
\    '$final': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'Text_Diff_Op_change': { 'signature': ' $orig,  $final', 'return_type': 'void'},
\    'reverse': { 'signature': 'void', 'return_type': 'void'},
\    'norig': { 'signature': 'void', 'return_type': 'void'},
\    'nfinal': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_mysql'] = {
\'simplepie_cache_mysql': {
\  'name': 'SimplePie_Cache_MySQL',
\  'static_methods': {
\  },
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $location, string $name, string $type', 'return_type': 'void'},
\    'save': { 'signature': 'array|\SimplePie $data', 'return_type': 'bool'},
\    'load': { 'signature': 'void', 'return_type': 'array'},
\    'mtime': { 'signature': 'void', 'return_type': 'int'},
\    'touch': { 'signature': 'void', 'return_type': 'bool'},
\    'unlink': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_restriction'] = {
\'simplepie_restriction': {
\  'name': 'SimplePie_Restriction',
\  'properties': {
\    '$relationship': {'initializer': '', 'type': 'string'},
\    '$type': {'initializer': '', 'type': 'string'},
\    '$value': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $relationship,  $type,  $value', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_relationship': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_type': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_value': { 'signature': 'void', 'return_type': 'string|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_video_riff'] = {
\'getid3_riff': {
\  'name': 'getid3_riff',
\  'static_methods': {
\    'parseComments': { 'signature': ' $RIFFinfoArray,  $CommentsTargetArray', 'return_type': 'void'},
\    'parseWAVEFORMATex': { 'signature': ' $WaveFormatExData', 'return_type': 'void'},
\    'ParseBITMAPINFOHEADER': { 'signature': ' $BITMAPINFOHEADER,  $littleEndian', 'return_type': 'void'},
\    'ParseDIVXTAG': { 'signature': ' $DIVXTAG,  $raw', 'return_type': 'void'},
\    'waveSNDMtagLookup': { 'signature': ' $tagshortname', 'return_type': 'void'},
\    'wFormatTagLookup': { 'signature': ' $wFormatTag', 'return_type': 'void'},
\    'fourccLookup': { 'signature': ' $fourcc', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'ParseRIFF': { 'signature': ' $startoffset,  $maxoffset', 'return_type': 'void'},
\    'ParseRIFFdata': { 'signature': ' $RIFFdata', 'return_type': 'void'},
\    'parseWavPackHeader': { 'signature': ' $WavPackChunkData', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_native'] = {
\'text_diff_engine_native': {
\  'name': 'Text_Diff_Engine_native',
\  'methods': {
\    'diff': { 'signature': ' $from_lines,  $to_lines', 'return_type': 'void'},
\    '_diag': { 'signature': ' $xoff,  $xlim,  $yoff,  $ylim,  $nchunks', 'return_type': 'void'},
\    '_lcsPos': { 'signature': ' $ypos', 'return_type': 'void'},
\    '_compareseq': { 'signature': ' $xoff,  $xlim,  $yoff,  $ylim', 'return_type': 'void'},
\    '_shiftBoundaries': { 'signature': ' $lines,  $changed,  $other_changed', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_gzdecode'] = {
\'simplepie_gzdecode': {
\  'name': 'SimplePie_gzdecode',
\  'properties': {
\    '$compressed_data': {'initializer': '', 'type': 'string'},
\    '$compressed_size': {'initializer': '', 'type': 'int'},
\    '$min_compressed_size': {'initializer': '18', 'type': 'int'},
\    '$position': {'initializer': '0', 'type': 'int'},
\    '$flags': {'initializer': '', 'type': 'int'},
\    '$data': {'initializer': '', 'type': 'string'},
\    '$MTIME': {'initializer': '', 'type': 'int'},
\    '$XFL': {'initializer': '', 'type': 'int'},
\    '$OS': {'initializer': '', 'type': 'int'},
\    '$SI1': {'initializer': '', 'type': 'string'},
\    '$SI2': {'initializer': '', 'type': 'string'},
\    '$extra_field': {'initializer': '', 'type': 'string'},
\    '$filename': {'initializer': '', 'type': 'string'},
\    '$comment': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__set': { 'signature': 'string $name, mixed $value', 'return_type': 'void'},
\    '__construct': { 'signature': 'string $data', 'return_type': 'void'},
\    'parse': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_rating'] = {
\'simplepie_rating': {
\  'name': 'SimplePie_Rating',
\  'properties': {
\    '$scheme': {'initializer': '', 'type': 'string'},
\    '$value': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $scheme,  $value', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_scheme': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_value': { 'signature': 'void', 'return_type': 'string|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_translations'] = {
\'translations': {
\  'name': 'Translations',
\  'properties': {
\    '$entries': {'initializer': 'array', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'add_entry': { 'signature': ' $entry', 'return_type': 'bool'},
\    'add_entry_or_merge': { 'signature': ' $entry', 'return_type': 'void'},
\    'set_header': { 'signature': 'string $header, string $value', 'return_type': 'void'},
\    'set_headers': { 'signature': ' $headers', 'return_type': 'void'},
\    'get_header': { 'signature': ' $header', 'return_type': 'void'},
\    'translate_entry': { 'signature': ' $entry', 'return_type': 'void'},
\    'translate': { 'signature': ' $singular,  $context', 'return_type': 'void'},
\    'select_plural_form': { 'signature': 'integer $count', 'return_type': 'void'},
\    'get_plural_forms_count': { 'signature': 'void', 'return_type': 'void'},
\    'translate_plural': { 'signature': ' $singular,  $plural,  $count,  $context', 'return_type': 'void'},
\    'merge_with': { 'signature': ' $other', 'return_type': 'void'},
\    'merge_originals_with': { 'signature': ' $other', 'return_type': 'void'},
\  },
\},
\'gettext_translations': {
\  'name': 'Gettext_Translations',
\  'properties': {
\    '$entries': {'initializer': 'array', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'gettext_select_plural_form': { 'signature': ' $count', 'return_type': 'void'},
\    'nplurals_and_expression_from_header': { 'signature': ' $header', 'return_type': 'void'},
\    'make_plural_form_function': { 'signature': ' $nplurals,  $expression', 'return_type': 'void'},
\    'parenthesize_plural_exression': { 'signature': 'string $expression', 'return_type': 'string'},
\    'make_headers': { 'signature': ' $translation', 'return_type': 'void'},
\    'set_header': { 'signature': ' $header,  $value', 'return_type': 'void'},
\    'add_entry': { 'signature': ' $entry', 'return_type': 'bool'},
\    'add_entry_or_merge': { 'signature': ' $entry', 'return_type': 'void'},
\    'set_headers': { 'signature': ' $headers', 'return_type': 'void'},
\    'get_header': { 'signature': ' $header', 'return_type': 'void'},
\    'translate_entry': { 'signature': ' $entry', 'return_type': 'void'},
\    'translate': { 'signature': ' $singular,  $context', 'return_type': 'void'},
\    'select_plural_form': { 'signature': 'integer $count', 'return_type': 'void'},
\    'get_plural_forms_count': { 'signature': 'void', 'return_type': 'void'},
\    'translate_plural': { 'signature': ' $singular,  $plural,  $count,  $context', 'return_type': 'void'},
\    'merge_with': { 'signature': ' $other', 'return_type': 'void'},
\    'merge_originals_with': { 'signature': ' $other', 'return_type': 'void'},
\  },
\},
\'noop_translations': {
\  'name': 'NOOP_Translations',
\  'properties': {
\    '$entries': {'initializer': 'array', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'add_entry': { 'signature': ' $entry', 'return_type': 'void'},
\    'set_header': { 'signature': ' $header,  $value', 'return_type': 'void'},
\    'set_headers': { 'signature': ' $headers', 'return_type': 'void'},
\    'get_header': { 'signature': ' $header', 'return_type': 'void'},
\    'translate_entry': { 'signature': ' $entry', 'return_type': 'void'},
\    'translate': { 'signature': ' $singular,  $context', 'return_type': 'void'},
\    'select_plural_form': { 'signature': ' $count', 'return_type': 'void'},
\    'get_plural_forms_count': { 'signature': 'void', 'return_type': 'void'},
\    'translate_plural': { 'signature': ' $singular,  $plural,  $count,  $context', 'return_type': 'void'},
\    'merge_with': { 'signature': ' $other', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_xmlrpc_server'] = {
\'wp_xmlrpc_server': {
\  'name': 'wp_xmlrpc_server',
\  'properties': {
\    '$data': {'initializer': '', 'type': ''},
\    '$callbacks': {'initializer': 'array', 'type': ''},
\    '$message': {'initializer': '', 'type': ''},
\    '$capabilities': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': '\wp_xmlrpc_server'},
\    'serve_request': { 'signature': 'void', 'return_type': 'void'},
\    'sayHello': { 'signature': 'array $args', 'return_type': 'string'},
\    'addTwoNumbers': { 'signature': 'array $args', 'return_type': 'int'},
\    'login': { 'signature': 'string $username, string $password', 'return_type': 'mixed'},
\    'login_pass_ok': { 'signature': 'string $username, string $password', 'return_type': 'bool'},
\    'escape': { 'signature': 'string|array $data', 'return_type': 'string|array'},
\    'get_custom_fields': { 'signature': 'int $post_id', 'return_type': 'array'},
\    'set_custom_fields': { 'signature': 'int $post_id, array $fields', 'return_type': 'void'},
\    'initialise_blog_option_info': { 'signature': 'void', 'return_type': 'void'},
\    'wp_getUsersBlogs': { 'signature': 'array $args', 'return_type': '\array.'},
\    'wp_newPost': { 'signature': 'array $args', 'return_type': 'string'},
\    'wp_editPost': { 'signature': 'array $args', 'return_type': 'true'},
\    'wp_deletePost': { 'signature': 'array $args', 'return_type': 'true'},
\    'wp_getPost': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getPosts': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_newTerm': { 'signature': 'array $args', 'return_type': 'string'},
\    'wp_editTerm': { 'signature': 'array $args', 'return_type': 'bool'},
\    'wp_deleteTerm': { 'signature': 'array $args', 'return_type': 'boolean|\IXR_Error'},
\    'wp_getTerm': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getTerms': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getTaxonomy': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getTaxonomies': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getUser': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getUsers': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getProfile': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_editProfile': { 'signature': 'array $args', 'return_type': 'bool'},
\    'wp_getPage': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getPages': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_newPage': { 'signature': 'array $args', 'return_type': '\unknown'},
\    'wp_deletePage': { 'signature': 'array $args', 'return_type': 'bool'},
\    'wp_editPage': { 'signature': 'array $args', 'return_type': '\unknown'},
\    'wp_getPageList': { 'signature': 'array $args', 'return_type': '\unknown'},
\    'wp_getAuthors': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getTags': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_newCategory': { 'signature': 'array $args', 'return_type': 'int'},
\    'wp_deleteCategory': { 'signature': 'array $args', 'return_type': 'mixed'},
\    'wp_suggestCategories': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getComment': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getComments': { 'signature': 'array $args', 'return_type': '\array.'},
\    'wp_deleteComment': { 'signature': 'array $args', 'return_type': 'mixed'},
\    'wp_editComment': { 'signature': ' $args', 'return_type': 'bool'},
\    'wp_newComment': { 'signature': 'array $args', 'return_type': 'mixed'},
\    'wp_getCommentStatusList': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getCommentCount': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getPostStatusList': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getPageStatusList': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getPageTemplates': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getOptions': { 'signature': 'array $args', 'return_type': 'array'},
\    '_getOptions': { 'signature': 'array $options', 'return_type': 'array'},
\    'wp_setOptions': { 'signature': 'array $args', 'return_type': '\unknown'},
\    'wp_getMediaItem': { 'signature': 'array $args', 'return_type': '\array.'},
\    'wp_getMediaLibrary': { 'signature': 'array $args', 'return_type': '\array.'},
\    'wp_getPostFormats': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getPostType': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getPostTypes': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_getRevisions': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_restoreRevision': { 'signature': 'array $args', 'return_type': 'bool'},
\    'blogger_getUsersBlogs': { 'signature': 'array $args', 'return_type': 'array'},
\    '_multisite_getUsersBlogs': { 'signature': ' $args', 'return_type': 'void'},
\    'blogger_getUserInfo': { 'signature': 'array $args', 'return_type': 'array'},
\    'blogger_getPost': { 'signature': 'array $args', 'return_type': 'array'},
\    'blogger_getRecentPosts': { 'signature': 'array $args', 'return_type': 'array'},
\    'blogger_getTemplate': { 'signature': ' $args', 'return_type': 'void'},
\    'blogger_setTemplate': { 'signature': ' $args', 'return_type': 'void'},
\    'blogger_newPost': { 'signature': 'array $args', 'return_type': 'int'},
\    'blogger_editPost': { 'signature': 'array $args', 'return_type': 'bool'},
\    'blogger_deletePost': { 'signature': 'array $args', 'return_type': 'bool'},
\    'mw_newPost': { 'signature': 'array $args', 'return_type': 'int'},
\    'add_enclosure_if_new': { 'signature': ' $post_ID,  $enclosure', 'return_type': 'void'},
\    'attach_uploads': { 'signature': 'int $post_ID, string $post_content', 'return_type': 'void'},
\    'mw_editPost': { 'signature': 'array $args', 'return_type': 'bool'},
\    'mw_getPost': { 'signature': 'array $args', 'return_type': 'array'},
\    'mw_getRecentPosts': { 'signature': 'array $args', 'return_type': 'array'},
\    'mw_getCategories': { 'signature': 'array $args', 'return_type': 'array'},
\    'mw_newMediaObject': { 'signature': 'array $args', 'return_type': 'array'},
\    'mt_getRecentPostTitles': { 'signature': 'array $args', 'return_type': 'array'},
\    'mt_getCategoryList': { 'signature': 'array $args', 'return_type': 'array'},
\    'mt_getPostCategories': { 'signature': 'array $args', 'return_type': 'array'},
\    'mt_setPostCategories': { 'signature': 'array $args', 'return_type': 'bool'},
\    'mt_supportedMethods': { 'signature': 'array $args', 'return_type': 'array'},
\    'mt_supportedTextFilters': { 'signature': 'array $args', 'return_type': 'void'},
\    'mt_getTrackbackPings': { 'signature': 'array $args', 'return_type': 'mixed'},
\    'mt_publishPost': { 'signature': 'array $args', 'return_type': 'int'},
\    'pingback_ping': { 'signature': 'array $args', 'return_type': 'array'},
\    'pingback_extensions_getPingbacks': { 'signature': 'array $args', 'return_type': 'array'},
\    'IXR_Server': { 'signature': ' $callbacks,  $data,  $wait', 'return_type': 'void'},
\    'serve': { 'signature': ' $data', 'return_type': 'void'},
\    'call': { 'signature': ' $methodname,  $args', 'return_type': 'void'},
\    'error': { 'signature': ' $error,  $message', 'return_type': 'void'},
\    'output': { 'signature': ' $xml', 'return_type': 'void'},
\    'hasMethod': { 'signature': ' $method', 'return_type': 'void'},
\    'setCapabilities': { 'signature': 'void', 'return_type': 'void'},
\    'getCapabilities': { 'signature': ' $args', 'return_type': 'void'},
\    'setCallbacks': { 'signature': 'void', 'return_type': 'void'},
\    'listMethods': { 'signature': ' $args', 'return_type': 'void'},
\    'multiCall': { 'signature': ' $methodcalls', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_post_template'] = {
\'walker_page': {
\  'name': 'Walker_Page',
\  'properties': {
\    '$tree_type': {'initializer': 'page', 'type': 'string'},
\    '$db_fields': {'initializer': 'array', 'type': 'array'},
\    '$max_pages': {'initializer': '1', 'type': 'int'},
\  },
\  'methods': {
\    'start_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'start_el': { 'signature': 'string $output, object $page, int $depth, array $args, int $current_page', 'return_type': 'void'},
\    'end_el': { 'signature': 'string $output, object $page, int $depth, array $args', 'return_type': 'void'},
\    'display_element': { 'signature': 'object $element, array $children_elements, int $max_depth, int $depth, array $args, string $output', 'return_type': 'null'},
\    'walk': { 'signature': 'array $elements, int $max_depth', 'return_type': 'string'},
\    'paged_walk': { 'signature': ' $elements, int $max_depth, int $page_num,  $per_page', 'return_type': 'string'},
\    'get_number_of_root_elements': { 'signature': ' $elements', 'return_type': 'void'},
\    'unset_children': { 'signature': ' $e,  $children_elements', 'return_type': 'void'},
\  },
\},
\'walker_pagedropdown': {
\  'name': 'Walker_PageDropdown',
\  'properties': {
\    '$tree_type': {'initializer': 'page', 'type': 'string'},
\    '$db_fields': {'initializer': 'array', 'type': 'array'},
\    '$max_pages': {'initializer': '1', 'type': 'int'},
\  },
\  'methods': {
\    'start_el': { 'signature': 'string $output, object $page, int $depth, array $args, int $id', 'return_type': 'void'},
\    'start_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_el': { 'signature': 'string $output, object $object, int $depth, array $args', 'return_type': 'void'},
\    'display_element': { 'signature': 'object $element, array $children_elements, int $max_depth, int $depth, array $args, string $output', 'return_type': 'null'},
\    'walk': { 'signature': 'array $elements, int $max_depth', 'return_type': 'string'},
\    'paged_walk': { 'signature': ' $elements, int $max_depth, int $page_num,  $per_page', 'return_type': 'string'},
\    'get_number_of_root_elements': { 'signature': ' $elements', 'return_type': 'void'},
\    'unset_children': { 'signature': ' $e,  $children_elements', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_comment_template'] = {
\'walker_comment': {
\  'name': 'Walker_Comment',
\  'properties': {
\    '$tree_type': {'initializer': 'comment', 'type': 'string'},
\    '$db_fields': {'initializer': 'array', 'type': 'array'},
\    '$max_pages': {'initializer': '1', 'type': 'int'},
\  },
\  'methods': {
\    'start_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'display_element': { 'signature': 'object $element, array $children_elements, int $max_depth, int $depth, array $args, string $output', 'return_type': 'null'},
\    'start_el': { 'signature': 'string $output, object $comment, int $depth, array $args,  $id', 'return_type': 'void'},
\    'end_el': { 'signature': 'string $output, object $comment, int $depth, array $args', 'return_type': 'void'},
\    'walk': { 'signature': 'array $elements, int $max_depth', 'return_type': 'string'},
\    'paged_walk': { 'signature': ' $elements, int $max_depth, int $page_num,  $per_page', 'return_type': 'string'},
\    'get_number_of_root_elements': { 'signature': ' $elements', 'return_type': 'void'},
\    'unset_children': { 'signature': ' $e,  $children_elements', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_video_matroska'] = {
\'getid3_matroska': {
\  'name': 'getid3_matroska',
\  'static_properties': {
\    '$hide_clusters': {'initializer': 'true', 'type': ''},
\    '$parse_whole_file': {'initializer': 'false', 'type': ''},
\  },
\  'static_methods': {
\    'TargetTypeValue': { 'signature': ' $target_type', 'return_type': 'void'},
\    'BlockLacingType': { 'signature': ' $lacingtype', 'return_type': 'void'},
\    'CodecIDtoCommonName': { 'signature': ' $codecid', 'return_type': 'void'},
\    'displayUnit': { 'signature': ' $value', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_renderer'] = {
\'text_diff_renderer': {
\  'name': 'Text_Diff_Renderer',
\  'properties': {
\    '$_leading_context_lines': {'initializer': '0', 'type': ''},
\    '$_trailing_context_lines': {'initializer': '0', 'type': ''},
\  },
\  'methods': {
\    'Text_Diff_Renderer': { 'signature': ' $params', 'return_type': 'void'},
\    'getParams': { 'signature': 'void', 'return_type': 'array'},
\    'render': { 'signature': '\Text_Diff $diff', 'return_type': 'string'},
\    '_block': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen,  $edits', 'return_type': 'void'},
\    '_startDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_endDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_blockHeader': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen', 'return_type': 'void'},
\    '_startBlock': { 'signature': ' $header', 'return_type': 'void'},
\    '_endBlock': { 'signature': 'void', 'return_type': 'void'},
\    '_lines': { 'signature': ' $lines,  $prefix', 'return_type': 'void'},
\    '_context': { 'signature': ' $lines', 'return_type': 'void'},
\    '_added': { 'signature': ' $lines', 'return_type': 'void'},
\    '_deleted': { 'signature': ' $lines', 'return_type': 'void'},
\    '_changed': { 'signature': ' $orig,  $final', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_comment'] = {
\'wp_comment_query': {
\  'name': 'WP_Comment_Query',
\  'properties': {
\    '$meta_query': {'initializer': 'false', 'type': 'object'},
\    '$date_query': {'initializer': 'false', 'type': 'object'},
\  },
\  'methods': {
\    'query': { 'signature': 'string|array $query_vars', 'return_type': 'int|array'},
\    'get_search_sql': { 'signature': 'string $string, array $cols', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_customize_setting'] = {
\'wp_customize_setting': {
\  'name': 'WP_Customize_Setting',
\  'properties': {
\    '$manager': {'initializer': '', 'type': ''},
\    '$id': {'initializer': '', 'type': ''},
\    '$type': {'initializer': 'theme_mod', 'type': ''},
\    '$capability': {'initializer': 'edit_theme_options', 'type': ''},
\    '$theme_supports': {'initializer': '', 'type': ''},
\    '$default': {'initializer': '', 'type': ''},
\    '$transport': {'initializer': 'refresh', 'type': ''},
\    '$sanitize_callback': {'initializer': '', 'type': ''},
\    '$sanitize_js_callback': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': '\WP_Customize_Setting'},
\    'preview': { 'signature': 'void', 'return_type': 'void'},
\    '_preview_filter': { 'signature': 'mixed $original', 'return_type': 'mixed'},
\    'save': { 'signature': 'void', 'return_type': 'bool'},
\    'post_value': { 'signature': 'mixed $default', 'return_type': 'mixed'},
\    'sanitize': { 'signature': 'mixed $value', 'return_type': 'mixed'},
\    'value': { 'signature': 'void', 'return_type': 'mixed'},
\    'js_value': { 'signature': 'void', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\'wp_customize_filter_setting': {
\  'name': 'WP_Customize_Filter_Setting',
\  'properties': {
\    '$manager': {'initializer': '', 'type': ''},
\    '$id': {'initializer': '', 'type': ''},
\    '$type': {'initializer': 'theme_mod', 'type': ''},
\    '$capability': {'initializer': 'edit_theme_options', 'type': ''},
\    '$theme_supports': {'initializer': '', 'type': ''},
\    '$default': {'initializer': '', 'type': ''},
\    '$transport': {'initializer': 'refresh', 'type': ''},
\    '$sanitize_callback': {'initializer': '', 'type': ''},
\    '$sanitize_js_callback': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'update': { 'signature': ' $value', 'return_type': 'void'},
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': '\WP_Customize_Setting'},
\    'preview': { 'signature': 'void', 'return_type': 'void'},
\    '_preview_filter': { 'signature': 'mixed $original', 'return_type': 'mixed'},
\    'save': { 'signature': 'void', 'return_type': 'bool'},
\    'post_value': { 'signature': 'mixed $default', 'return_type': 'mixed'},
\    'sanitize': { 'signature': 'mixed $value', 'return_type': 'mixed'},
\    'value': { 'signature': 'void', 'return_type': 'mixed'},
\    'js_value': { 'signature': 'void', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\'wp_customize_header_image_setting': {
\  'name': 'WP_Customize_Header_Image_Setting',
\  'properties': {
\    '$id': {'initializer': 'header_image_data', 'type': ''},
\    '$manager': {'initializer': '', 'type': ''},
\    '$type': {'initializer': 'theme_mod', 'type': ''},
\    '$capability': {'initializer': 'edit_theme_options', 'type': ''},
\    '$theme_supports': {'initializer': '', 'type': ''},
\    '$default': {'initializer': '', 'type': ''},
\    '$transport': {'initializer': 'refresh', 'type': ''},
\    '$sanitize_callback': {'initializer': '', 'type': ''},
\    '$sanitize_js_callback': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'update': { 'signature': 'mixed $value', 'return_type': 'void'},
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': '\WP_Customize_Setting'},
\    'preview': { 'signature': 'void', 'return_type': 'void'},
\    '_preview_filter': { 'signature': 'mixed $original', 'return_type': 'mixed'},
\    'save': { 'signature': 'void', 'return_type': 'bool'},
\    'post_value': { 'signature': 'mixed $default', 'return_type': 'mixed'},
\    'sanitize': { 'signature': 'mixed $value', 'return_type': 'mixed'},
\    'value': { 'signature': 'void', 'return_type': 'mixed'},
\    'js_value': { 'signature': 'void', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\'wp_customize_background_image_setting': {
\  'name': 'WP_Customize_Background_Image_Setting',
\  'properties': {
\    '$id': {'initializer': 'background_image_thumb', 'type': ''},
\    '$manager': {'initializer': '', 'type': ''},
\    '$type': {'initializer': 'theme_mod', 'type': ''},
\    '$capability': {'initializer': 'edit_theme_options', 'type': ''},
\    '$theme_supports': {'initializer': '', 'type': ''},
\    '$default': {'initializer': '', 'type': ''},
\    '$transport': {'initializer': 'refresh', 'type': ''},
\    '$sanitize_callback': {'initializer': '', 'type': ''},
\    '$sanitize_js_callback': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'update': { 'signature': 'mixed $value', 'return_type': 'void'},
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': '\WP_Customize_Setting'},
\    'preview': { 'signature': 'void', 'return_type': 'void'},
\    '_preview_filter': { 'signature': 'mixed $original', 'return_type': 'mixed'},
\    'save': { 'signature': 'void', 'return_type': 'bool'},
\    'post_value': { 'signature': 'mixed $default', 'return_type': 'mixed'},
\    'sanitize': { 'signature': 'mixed $value', 'return_type': 'mixed'},
\    'value': { 'signature': 'void', 'return_type': 'mixed'},
\    'js_value': { 'signature': 'void', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_editor'] = {
\'_wp_editors': {
\  'name': '_WP_Editors',
\  'static_properties': {
\    '$mce_locale': {'initializer': '', 'type': ''},
\  },
\  'static_methods': {
\    'parse_settings': { 'signature': ' $editor_id,  $settings', 'return_type': 'void'},
\    'editor': { 'signature': 'string $content, string $editor_id, array $settings', 'return_type': 'void'},
\    'editor_settings': { 'signature': ' $editor_id,  $set', 'return_type': 'void'},
\    'enqueue_scripts': { 'signature': 'void', 'return_type': 'void'},
\    'editor_js': { 'signature': 'void', 'return_type': 'void'},
\    'wp_fullscreen_html': { 'signature': 'void', 'return_type': 'void'},
\    'wp_link_query': { 'signature': 'array $args', 'return_type': 'array'},
\    'wp_link_dialog': { 'signature': 'void', 'return_type': 'void'},
\  },
\  'methods': {
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_dependencies'] = {
\'wp_dependencies': {
\  'name': 'WP_Dependencies',
\  'properties': {
\    '$registered': {'initializer': 'array', 'type': 'array'},
\    '$queue': {'initializer': 'array', 'type': 'array'},
\    '$to_do': {'initializer': 'array', 'type': 'array'},
\    '$done': {'initializer': 'array', 'type': 'array'},
\    '$args': {'initializer': 'array', 'type': 'array'},
\    '$groups': {'initializer': 'array', 'type': 'array'},
\    '$group': {'initializer': '0', 'type': 'int'},
\  },
\  'methods': {
\    'do_items': { 'signature': 'mixed $handles, mixed $group', 'return_type': 'array'},
\    'do_item': { 'signature': 'string $handle', 'return_type': 'bool'},
\    'all_deps': { 'signature': 'mixed $handles, bool $recursion, mixed $group', 'return_type': 'bool'},
\    'add': { 'signature': 'string $handle, string $src, array $deps, string $ver, mixed $args', 'return_type': 'bool'},
\    'add_data': { 'signature': 'string $handle, string $key, mixed $value', 'return_type': 'bool'},
\    'get_data': { 'signature': 'string $handle, string $key', 'return_type': 'mixed'},
\    'remove': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'enqueue': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'dequeue': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'query': { 'signature': 'string $handle, string $list', 'return_type': 'bool'},
\    'set_group': { 'signature': 'string $handle, bool $recursion, mixed $group', 'return_type': 'bool'},
\  },
\},
\'_wp_dependency': {
\  'name': '_WP_Dependency',
\  'properties': {
\    '$handle': {'initializer': '', 'type': 'null'},
\    '$src': {'initializer': '', 'type': 'null'},
\    '$deps': {'initializer': 'array', 'type': 'array'},
\    '$ver': {'initializer': 'false', 'type': 'bool|string'},
\    '$args': {'initializer': 'null', 'type': 'null'},
\    '$extra': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'add_data': { 'signature': 'string $name, mixed $data', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_sanitize'] = {
\'simplepie_sanitize': {
\  'name': 'SimplePie_Sanitize',
\  'properties': {
\    '$base': {'initializer': '', 'type': ''},
\    '$remove_div': {'initializer': 'true', 'type': ''},
\    '$image_handler': {'initializer': '', 'type': ''},
\    '$strip_htmltags': {'initializer': 'array', 'type': ''},
\    '$encode_instead_of_strip': {'initializer': 'false', 'type': ''},
\    '$strip_attributes': {'initializer': 'array', 'type': ''},
\    '$strip_comments': {'initializer': 'false', 'type': ''},
\    '$output_encoding': {'initializer': 'UTF-8', 'type': ''},
\    '$enable_cache': {'initializer': 'true', 'type': ''},
\    '$cache_location': {'initializer': './cache', 'type': ''},
\    '$cache_name_function': {'initializer': 'md5', 'type': ''},
\    '$timeout': {'initializer': '10', 'type': ''},
\    '$useragent': {'initializer': '', 'type': ''},
\    '$force_fsockopen': {'initializer': 'false', 'type': ''},
\    '$replace_url_attributes': {'initializer': 'null', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'remove_div': { 'signature': ' $enable', 'return_type': 'void'},
\    'set_image_handler': { 'signature': ' $page', 'return_type': 'void'},
\    'set_registry': { 'signature': '\SimplePie_Registry $registry', 'return_type': 'void'},
\    'pass_cache_data': { 'signature': ' $enable_cache,  $cache_location,  $cache_name_function,  $cache_class', 'return_type': 'void'},
\    'pass_file_data': { 'signature': ' $file_class,  $timeout,  $useragent,  $force_fsockopen', 'return_type': 'void'},
\    'strip_htmltags': { 'signature': ' $tags', 'return_type': 'void'},
\    'encode_instead_of_strip': { 'signature': ' $encode', 'return_type': 'void'},
\    'strip_attributes': { 'signature': ' $attribs', 'return_type': 'void'},
\    'strip_comments': { 'signature': ' $strip', 'return_type': 'void'},
\    'set_output_encoding': { 'signature': ' $encoding', 'return_type': 'void'},
\    'set_url_replacements': { 'signature': 'array|null $element_attribute', 'return_type': 'void'},
\    'sanitize': { 'signature': ' $data,  $type,  $base', 'return_type': 'void'},
\    'replace_urls': { 'signature': ' $document,  $tag,  $attributes', 'return_type': 'void'},
\    'do_strip_htmltags': { 'signature': ' $match', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_post'] = {
\'wp_post': {
\  'name': 'WP_Post',
\  'static_methods': {
\    'get_instance': { 'signature': ' $post_id', 'return_type': 'void'},
\  },
\  'properties': {
\    '$ID': {'initializer': '', 'type': 'int'},
\    '$post_author': {'initializer': '0', 'type': 'string'},
\    '$post_date': {'initializer': '0000-00-00 00:00:00', 'type': 'string'},
\    '$post_date_gmt': {'initializer': '0000-00-00 00:00:00', 'type': 'string'},
\    '$post_content': {'initializer': '', 'type': 'string'},
\    '$post_title': {'initializer': '', 'type': 'string'},
\    '$post_excerpt': {'initializer': '', 'type': 'string'},
\    '$post_status': {'initializer': 'publish', 'type': 'string'},
\    '$comment_status': {'initializer': 'open', 'type': 'string'},
\    '$ping_status': {'initializer': 'open', 'type': 'string'},
\    '$post_password': {'initializer': '', 'type': 'string'},
\    '$post_name': {'initializer': '', 'type': 'string'},
\    '$to_ping': {'initializer': '', 'type': 'string'},
\    '$pinged': {'initializer': '', 'type': 'string'},
\    '$post_modified': {'initializer': '0000-00-00 00:00:00', 'type': 'string'},
\    '$post_modified_gmt': {'initializer': '0000-00-00 00:00:00', 'type': 'string'},
\    '$post_content_filtered': {'initializer': '', 'type': 'string'},
\    '$post_parent': {'initializer': '0', 'type': 'int'},
\    '$guid': {'initializer': '', 'type': 'string'},
\    '$menu_order': {'initializer': '0', 'type': 'int'},
\    '$post_type': {'initializer': 'post', 'type': 'string'},
\    '$post_mime_type': {'initializer': '', 'type': 'string'},
\    '$comment_count': {'initializer': '0', 'type': 'string'},
\    '$filter': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $post', 'return_type': 'void'},
\    '__isset': { 'signature': ' $key', 'return_type': 'void'},
\    '__get': { 'signature': ' $key', 'return_type': 'void'},
\    'filter': { 'signature': ' $filter', 'return_type': 'void'},
\    'to_array': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_file'] = {
\'simplepie_cache_file': {
\  'name': 'SimplePie_Cache_File',
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $location, string $name, string $type', 'return_type': 'void'},
\    'save': { 'signature': 'array|\SimplePie $data', 'return_type': 'bool'},
\    'load': { 'signature': 'void', 'return_type': 'array'},
\    'mtime': { 'signature': 'void', 'return_type': 'int'},
\    'touch': { 'signature': 'void', 'return_type': 'bool'},
\    'unlink': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp'] = {
\'wp': {
\  'name': 'WP',
\  'properties': {
\    '$public_query_vars': {'initializer': 'array', 'type': 'array'},
\    '$private_query_vars': {'initializer': 'array', 'type': 'array'},
\    '$extra_query_vars': {'initializer': 'array', 'type': 'array'},
\    '$query_vars': {'initializer': '', 'type': 'array'},
\    '$query_string': {'initializer': '', 'type': 'string'},
\    '$request': {'initializer': '', 'type': 'string'},
\    '$matched_rule': {'initializer': '', 'type': 'string'},
\    '$matched_query': {'initializer': '', 'type': 'string'},
\    '$did_permalink': {'initializer': 'false', 'type': 'bool'},
\  },
\  'methods': {
\    'add_query_var': { 'signature': 'string $qv', 'return_type': 'void'},
\    'set_query_var': { 'signature': 'string $key, mixed $value', 'return_type': 'void'},
\    'parse_request': { 'signature': 'array|string $extra_query_vars', 'return_type': 'void'},
\    'send_headers': { 'signature': 'void', 'return_type': 'void'},
\    'build_query_string': { 'signature': 'void', 'return_type': 'void'},
\    'register_globals': { 'signature': 'void', 'return_type': 'void'},
\    'init': { 'signature': 'void', 'return_type': 'void'},
\    'query_posts': { 'signature': 'void', 'return_type': 'void'},
\    'handle_404': { 'signature': 'void', 'return_type': 'void'},
\    'main': { 'signature': 'string|array $query_args', 'return_type': 'void'},
\  },
\},
\'wp_matchesmapregex': {
\  'name': 'WP_MatchesMapRegex',
\  'static_methods': {
\    'apply': { 'signature': 'string $subject, array $matches', 'return_type': 'string'},
\  },
\  'properties': {
\    '$_matches': {'initializer': '', 'type': 'array'},
\    '$output': {'initializer': '', 'type': 'string'},
\    '$_subject': {'initializer': '', 'type': 'string'},
\    '$_pattern': {'initializer': '(\$matches\[[1-9]+[0-9]*\])', 'type': 'string'},
\  },
\  'methods': {
\    'WP_MatchesMapRegex': { 'signature': 'string $subject, array $matches', 'return_type': '\WP_MatchesMapRegex'},
\    '_map': { 'signature': 'void', 'return_type': 'string'},
\    'callback': { 'signature': 'array $matches', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_ajax_response'] = {
\'wp_ajax_response': {
\  'name': 'WP_Ajax_Response',
\  'properties': {
\    '$responses': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string|array $args', 'return_type': '\WP_Ajax_Response'},
\    'add': { 'signature': 'string|array $args', 'return_type': 'string'},
\    'send': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_oembed'] = {
\'wp_oembed': {
\  'name': 'WP_oEmbed',
\  'properties': {
\    '$providers': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'get_html': { 'signature': 'string $url, array $args', 'return_type': 'bool|string'},
\    'discover': { 'signature': 'string $url', 'return_type': 'bool|string'},
\    'fetch': { 'signature': 'string $provider, string $url, array $args', 'return_type': 'bool|object'},
\    '_fetch_with_format': { 'signature': 'string $provider_url_with_args, string $format', 'return_type': 'bool|object'},
\    '_parse_json': { 'signature': ' $response_body', 'return_type': 'void'},
\    '_parse_xml': { 'signature': ' $response_body', 'return_type': 'void'},
\    'data2html': { 'signature': 'object $data, string $url', 'return_type': 'bool|string'},
\    '_strip_newlines': { 'signature': 'string $html, object $data, string $url', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_customize_section'] = {
\'wp_customize_section': {
\  'name': 'WP_Customize_Section',
\  'properties': {
\    '$manager': {'initializer': '', 'type': ''},
\    '$id': {'initializer': '', 'type': ''},
\    '$priority': {'initializer': '10', 'type': ''},
\    '$capability': {'initializer': 'edit_theme_options', 'type': ''},
\    '$theme_supports': {'initializer': '', 'type': ''},
\    '$title': {'initializer': '', 'type': ''},
\    '$description': {'initializer': '', 'type': ''},
\    '$controls': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': 'void'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\    'maybe_render': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_enclosure'] = {
\'simplepie_enclosure': {
\  'name': 'SimplePie_Enclosure',
\  'properties': {
\    '$bitrate': {'initializer': '', 'type': 'string'},
\    '$captions': {'initializer': '', 'type': 'array'},
\    '$categories': {'initializer': '', 'type': 'array'},
\    '$channels': {'initializer': '', 'type': 'int'},
\    '$copyright': {'initializer': '', 'type': '\SimplePie_Copyright'},
\    '$credits': {'initializer': '', 'type': 'array'},
\    '$description': {'initializer': '', 'type': 'string'},
\    '$duration': {'initializer': '', 'type': 'int'},
\    '$expression': {'initializer': '', 'type': 'string'},
\    '$framerate': {'initializer': '', 'type': 'string'},
\    '$handler': {'initializer': '', 'type': 'string'},
\    '$hashes': {'initializer': '', 'type': 'array'},
\    '$height': {'initializer': '', 'type': 'string'},
\    '$javascript': {'initializer': '', 'type': 'null'},
\    '$keywords': {'initializer': '', 'type': 'array'},
\    '$lang': {'initializer': '', 'type': 'string'},
\    '$length': {'initializer': '', 'type': 'string'},
\    '$link': {'initializer': '', 'type': 'string'},
\    '$medium': {'initializer': '', 'type': 'string'},
\    '$player': {'initializer': '', 'type': 'string'},
\    '$ratings': {'initializer': '', 'type': 'array'},
\    '$restrictions': {'initializer': '', 'type': 'array'},
\    '$samplingrate': {'initializer': '', 'type': 'string'},
\    '$thumbnails': {'initializer': '', 'type': 'array'},
\    '$title': {'initializer': '', 'type': 'string'},
\    '$type': {'initializer': '', 'type': 'string'},
\    '$width': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $link,  $type,  $length,  $javascript,  $bitrate,  $captions,  $categories,  $channels,  $copyright,  $credits,  $description,  $duration,  $expression,  $framerate,  $hashes,  $height,  $keywords,  $lang,  $medium,  $player,  $ratings,  $restrictions,  $samplingrate,  $thumbnails,  $title,  $width', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_bitrate': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_caption': { 'signature': 'int $key', 'return_type': '\SimplePie_Caption|null'},
\    'get_captions': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_category': { 'signature': 'int $key', 'return_type': '\SimplePie_Category|null'},
\    'get_categories': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_channels': { 'signature': 'void', 'return_type': 'int|null'},
\    'get_copyright': { 'signature': 'void', 'return_type': '\SimplePie_Copyright|null'},
\    'get_credit': { 'signature': 'int $key', 'return_type': '\SimplePie_Credit|null'},
\    'get_credits': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_description': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_duration': { 'signature': 'string $convert', 'return_type': 'string|int|null'},
\    'get_expression': { 'signature': 'void', 'return_type': 'string'},
\    'get_extension': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_framerate': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_handler': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_hash': { 'signature': 'int $key', 'return_type': 'string|null'},
\    'get_hashes': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_height': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_language': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_keyword': { 'signature': 'int $key', 'return_type': 'string|null'},
\    'get_keywords': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_length': { 'signature': 'void', 'return_type': 'float'},
\    'get_link': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_medium': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_player': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_rating': { 'signature': 'int $key', 'return_type': '\SimplePie_Rating|null'},
\    'get_ratings': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_restriction': { 'signature': 'int $key', 'return_type': '\SimplePie_Restriction|null'},
\    'get_restrictions': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_sampling_rate': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_size': { 'signature': 'void', 'return_type': 'float|null'},
\    'get_thumbnail': { 'signature': 'int $key', 'return_type': 'string|null'},
\    'get_thumbnails': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_title': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_type': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_width': { 'signature': 'void', 'return_type': 'string|null'},
\    'native_embed': { 'signature': 'array|string $options', 'return_type': 'string'},
\    'embed': { 'signature': 'array|string $options, bool $native', 'return_type': 'string'},
\    'get_real_type': { 'signature': 'bool $find_handler', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_capabilities'] = {
\'wp_roles': {
\  'name': 'WP_Roles',
\  'properties': {
\    '$roles': {'initializer': '', 'type': 'array'},
\    '$role_objects': {'initializer': 'array', 'type': 'array'},
\    '$role_names': {'initializer': 'array', 'type': 'array'},
\    '$role_key': {'initializer': '', 'type': 'string'},
\    '$use_db': {'initializer': 'true', 'type': 'bool'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    '_init': { 'signature': 'void', 'return_type': 'void'},
\    'reinit': { 'signature': 'void', 'return_type': 'void'},
\    'add_role': { 'signature': 'string $role, string $display_name, array $capabilities', 'return_type': '\WP_Role|null'},
\    'remove_role': { 'signature': 'string $role', 'return_type': 'void'},
\    'add_cap': { 'signature': 'string $role, string $cap, bool $grant', 'return_type': 'void'},
\    'remove_cap': { 'signature': 'string $role, string $cap', 'return_type': 'void'},
\    'get_role': { 'signature': 'string $role', 'return_type': '\WP_Role|null'},
\    'get_names': { 'signature': 'void', 'return_type': 'array'},
\    'is_role': { 'signature': 'string $role', 'return_type': 'bool'},
\  },
\},
\'wp_role': {
\  'name': 'WP_Role',
\  'properties': {
\    '$name': {'initializer': '', 'type': 'string'},
\    '$capabilities': {'initializer': '', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $role, array $capabilities', 'return_type': 'void'},
\    'add_cap': { 'signature': 'string $cap, bool $grant', 'return_type': 'void'},
\    'remove_cap': { 'signature': 'string $cap', 'return_type': 'void'},
\    'has_cap': { 'signature': 'string $cap', 'return_type': 'bool'},
\  },
\},
\'wp_user': {
\  'name': 'WP_User',
\  'static_properties': {
\  },
\  'static_methods': {
\    'get_data_by': { 'signature': 'string $field, string|int $value', 'return_type': 'object'},
\  },
\  'properties': {
\    '$data': {'initializer': '', 'type': 'array'},
\    '$ID': {'initializer': '0', 'type': 'int'},
\    '$caps': {'initializer': 'array', 'type': 'array'},
\    '$cap_key': {'initializer': '', 'type': 'string'},
\    '$roles': {'initializer': 'array', 'type': 'array'},
\    '$allcaps': {'initializer': 'array', 'type': 'array'},
\    '$filter': {'initializer': 'null', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'int|string|\stdClass|\WP_User $id, string $name, int $blog_id', 'return_type': '\WP_User'},
\    'init': { 'signature': 'object $data, int $blog_id', 'return_type': 'void'},
\    '__isset': { 'signature': ' $key', 'return_type': 'void'},
\    '__get': { 'signature': ' $key', 'return_type': 'void'},
\    '__set': { 'signature': ' $key,  $value', 'return_type': 'void'},
\    'exists': { 'signature': 'void', 'return_type': 'bool'},
\    'get': { 'signature': 'string $key', 'return_type': 'void'},
\    'has_prop': { 'signature': 'string $key', 'return_type': 'void'},
\    'to_array': { 'signature': 'void', 'return_type': 'array'},
\    '_init_caps': { 'signature': 'string $cap_key', 'return_type': 'void'},
\    'get_role_caps': { 'signature': 'void', 'return_type': 'array'},
\    'add_role': { 'signature': 'string $role', 'return_type': 'void'},
\    'remove_role': { 'signature': 'string $role', 'return_type': 'void'},
\    'set_role': { 'signature': 'string $role', 'return_type': 'void'},
\    'level_reduction': { 'signature': 'int $max, string $item', 'return_type': 'int'},
\    'update_user_level_from_caps': { 'signature': 'void', 'return_type': 'void'},
\    'add_cap': { 'signature': 'string $cap, bool $grant', 'return_type': 'void'},
\    'remove_cap': { 'signature': 'string $cap', 'return_type': 'void'},
\    'remove_all_caps': { 'signature': 'void', 'return_type': 'void'},
\    'has_cap': { 'signature': 'string|int $cap', 'return_type': 'bool'},
\    'translate_level_to_cap': { 'signature': 'int $level', 'return_type': 'string'},
\    'for_blog': { 'signature': 'int $blog_id', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_copyright'] = {
\'simplepie_copyright': {
\  'name': 'SimplePie_Copyright',
\  'properties': {
\    '$url': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $url,  $label', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_url': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_attribution': { 'signature': 'void', 'return_type': 'string|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_pluggable_deprecated'] = {
\'wp_atom_server': {
\  'name': 'wp_atom_server',
\  'static_methods': {
\    '__callStatic': { 'signature': ' $name,  $arguments', 'return_type': 'void'},
\  },
\  'methods': {
\    '__call': { 'signature': ' $name,  $arguments', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_tag_apetag'] = {
\'getid3_apetag': {
\  'name': 'getid3_apetag',
\  'properties': {
\    '$inline_attachments': {'initializer': 'true', 'type': ''},
\    '$overrideendoffset': {'initializer': '0', 'type': ''},
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'parseAPEheaderFooter': { 'signature': ' $APEheaderFooterData', 'return_type': 'void'},
\    'parseAPEtagFlags': { 'signature': ' $rawflagint', 'return_type': 'void'},
\    'APEcontentTypeFlagLookup': { 'signature': ' $contenttypeid', 'return_type': 'void'},
\    'APEtagItemIsUTF8Lookup': { 'signature': ' $itemkey', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_embed'] = {
\'wp_embed': {
\  'name': 'WP_Embed',
\  'properties': {
\    '$handlers': {'initializer': 'array', 'type': ''},
\    '$post_ID': {'initializer': '', 'type': ''},
\    '$usecache': {'initializer': 'true', 'type': ''},
\    '$linkifunknown': {'initializer': 'true', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'run_shortcode': { 'signature': 'string $content', 'return_type': 'string'},
\    'maybe_run_ajax_cache': { 'signature': 'void', 'return_type': 'void'},
\    'register_handler': { 'signature': 'string $id, string $regex, callback $callback, int $priority', 'return_type': 'void'},
\    'unregister_handler': { 'signature': 'string $id, int $priority', 'return_type': 'void'},
\    'shortcode': { 'signature': 'array $attr, string $url', 'return_type': 'string'},
\    'delete_oembed_caches': { 'signature': 'int $post_ID', 'return_type': 'void'},
\    'cache_oembed': { 'signature': 'int $post_ID', 'return_type': 'void'},
\    'autoembed': { 'signature': 'string $content', 'return_type': 'string'},
\    'autoembed_callback': { 'signature': 'array $match', 'return_type': 'string'},
\    'maybe_make_link': { 'signature': 'string $url', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_flac'] = {
\'getid3_flac': {
\  'name': 'getid3_flac',
\  'static_methods': {
\    'metaBlockTypeLookup': { 'signature': ' $blocktype', 'return_type': 'void'},
\    'applicationIDLookup': { 'signature': ' $applicationid', 'return_type': 'void'},
\    'pictureTypeLookup': { 'signature': ' $type_id', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'parseMETAdata': { 'signature': 'void', 'return_type': 'void'},
\    'parsePICTURE': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_wp_diff'] = {
\'wp_text_diff_renderer_table': {
\  'name': 'WP_Text_Diff_Renderer_Table',
\  'properties': {
\    '$_leading_context_lines': {'initializer': '10000', 'type': 'int'},
\    '$_trailing_context_lines': {'initializer': '10000', 'type': 'int'},
\    '$_diff_threshold': {'initializer': '0.6', 'type': 'float'},
\    '$inline_diff_renderer': {'initializer': 'WP_Text_Diff_Renderer_inline', 'type': 'string'},
\    '$_show_split_view': {'initializer': 'true', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'array $params', 'return_type': 'void'},
\    '_changed': { 'signature': 'array $orig, array $final', 'return_type': 'string'},
\    'interleave_changed_lines': { 'signature': '\unknown_type $orig, \unknown_type $final', 'return_type': '\unknown'},
\    'compute_string_distance': { 'signature': 'string $string1, string $string2', 'return_type': 'int'},
\    'Text_Diff_Renderer': { 'signature': ' $params', 'return_type': 'void'},
\    'getParams': { 'signature': 'void', 'return_type': 'array'},
\    'render': { 'signature': '\Text_Diff $diff', 'return_type': 'string'},
\    '_block': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen,  $edits', 'return_type': 'void'},
\    '_startDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_endDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_blockHeader': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen', 'return_type': 'void'},
\    '_startBlock': { 'signature': ' $header', 'return_type': 'void'},
\    '_endBlock': { 'signature': 'void', 'return_type': 'void'},
\    '_lines': { 'signature': ' $lines,  $prefix', 'return_type': 'void'},
\    '_context': { 'signature': ' $lines', 'return_type': 'void'},
\    '_added': { 'signature': ' $lines', 'return_type': 'void'},
\    '_deleted': { 'signature': ' $lines', 'return_type': 'void'},
\  },
\},
\'wp_text_diff_renderer_inline': {
\  'name': 'WP_Text_Diff_Renderer_inline',
\  'properties': {
\    '$_leading_context_lines': {'initializer': '0', 'type': ''},
\    '$_trailing_context_lines': {'initializer': '0', 'type': ''},
\    '$_ins_prefix': {'initializer': '<ins>', 'type': 'string'},
\    '$_ins_suffix': {'initializer': '</ins>', 'type': 'string'},
\    '$_del_prefix': {'initializer': '<del>', 'type': 'string'},
\    '$_del_suffix': {'initializer': '</del>', 'type': 'string'},
\    '$_block_header': {'initializer': '', 'type': 'string'},
\    '$_split_characters': {'initializer': 'false', 'type': 'boolean'},
\    '$_split_level': {'initializer': 'lines', 'type': 'string'},
\  },
\  'methods': {
\    '_blockHeader': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen', 'return_type': 'void'},
\    '_startBlock': { 'signature': ' $header', 'return_type': 'void'},
\    '_lines': { 'signature': ' $lines,  $prefix', 'return_type': 'void'},
\    '_added': { 'signature': ' $lines', 'return_type': 'void'},
\    '_deleted': { 'signature': ' $lines', 'return_type': 'void'},
\    '_changed': { 'signature': ' $orig,  $final', 'return_type': 'void'},
\    '_splitOnWords': { 'signature': ' $string,  $newlineEscape', 'return_type': 'void'},
\    '_encode': { 'signature': ' $string', 'return_type': 'void'},
\    'Text_Diff_Renderer': { 'signature': ' $params', 'return_type': 'void'},
\    'getParams': { 'signature': 'void', 'return_type': 'array'},
\    'render': { 'signature': '\Text_Diff $diff', 'return_type': 'string'},
\    '_block': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen,  $edits', 'return_type': 'void'},
\    '_startDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_endDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_endBlock': { 'signature': 'void', 'return_type': 'void'},
\    '_context': { 'signature': ' $lines', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_nav_menu_template'] = {
\'walker_nav_menu': {
\  'name': 'Walker_Nav_Menu',
\  'properties': {
\    '$tree_type': {'initializer': 'array', 'type': 'string'},
\    '$db_fields': {'initializer': 'array', 'type': 'array'},
\    '$max_pages': {'initializer': '1', 'type': 'int'},
\  },
\  'methods': {
\    'start_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'start_el': { 'signature': 'string $output, object $item, int $depth, array $args, int $id', 'return_type': 'void'},
\    'end_el': { 'signature': 'string $output, object $item, int $depth, array $args', 'return_type': 'void'},
\    'display_element': { 'signature': 'object $element, array $children_elements, int $max_depth, int $depth, array $args, string $output', 'return_type': 'null'},
\    'walk': { 'signature': 'array $elements, int $max_depth', 'return_type': 'string'},
\    'paged_walk': { 'signature': ' $elements, int $max_depth, int $page_num,  $per_page', 'return_type': 'string'},
\    'get_number_of_root_elements': { 'signature': ' $elements', 'return_type': 'void'},
\    'unset_children': { 'signature': ' $e,  $children_elements', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_image_editor_gd'] = {
\'wp_image_editor_gd': {
\  'name': 'WP_Image_Editor_GD',
\  'static_methods': {
\    'test': { 'signature': ' $args', 'return_type': 'boolean'},
\    'supports_mime_type': { 'signature': 'string $mime_type', 'return_type': 'boolean'},
\  },
\  'properties': {
\  },
\  'methods': {
\    '__destruct': { 'signature': 'void', 'return_type': 'void'},
\    'load': { 'signature': 'void', 'return_type': 'boolean|\WP_Error'},
\    'resize': { 'signature': 'int $max_w, int $max_h, boolean $crop', 'return_type': 'boolean|\WP_Error'},
\    'multi_resize': { 'signature': 'array $sizes', 'return_type': 'array'},
\    'crop': { 'signature': 'int $src_x, int $src_y, int $src_w, int $src_h, int $dst_w, int $dst_h, boolean $src_abs', 'return_type': 'boolean|\WP_Error'},
\    'rotate': { 'signature': 'float $angle', 'return_type': 'boolean|\WP_Error'},
\    'flip': { 'signature': 'boolean $horz, boolean $vert', 'return_type': 'void'},
\    'save': { 'signature': ' $filename, string $mime_type', 'return_type': 'array|\WP_Error'},
\    'stream': { 'signature': 'string $mime_type', 'return_type': 'void'},
\    '__construct': { 'signature': ' $file', 'return_type': 'void'},
\    'get_size': { 'signature': 'void', 'return_type': 'array'},
\    'set_quality': { 'signature': 'int $quality', 'return_type': 'boolean|\WP_Error'},
\    'generate_filename': { 'signature': 'string $suffix, string $dest_path, string $extension', 'return_type': 'string'},
\    'get_suffix': { 'signature': 'void', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_pop3'] = {
\'pop3': {
\  'name': 'POP3',
\  'properties': {
\    '$ERROR': {'initializer': '', 'type': ''},
\    '$TIMEOUT': {'initializer': '60', 'type': ''},
\    '$COUNT': {'initializer': '-1', 'type': ''},
\    '$BUFFER': {'initializer': '512', 'type': ''},
\    '$FP': {'initializer': '', 'type': ''},
\    '$MAILSERVER': {'initializer': '', 'type': ''},
\    '$DEBUG': {'initializer': 'FALSE', 'type': ''},
\    '$BANNER': {'initializer': '', 'type': ''},
\    '$ALLOWAPOP': {'initializer': 'FALSE', 'type': ''},
\  },
\  'methods': {
\    'POP3': { 'signature': ' $server,  $timeout', 'return_type': 'void'},
\    'update_timer': { 'signature': 'void', 'return_type': 'void'},
\    'connect': { 'signature': ' $server,  $port', 'return_type': 'void'},
\    'user': { 'signature': ' $user', 'return_type': 'void'},
\    'pass': { 'signature': ' $pass', 'return_type': 'void'},
\    'apop': { 'signature': ' $login,  $pass', 'return_type': 'void'},
\    'login': { 'signature': ' $login,  $pass', 'return_type': 'void'},
\    'top': { 'signature': ' $msgNum,  $numLines', 'return_type': 'void'},
\    'pop_list': { 'signature': ' $msgNum', 'return_type': 'void'},
\    'get': { 'signature': ' $msgNum', 'return_type': 'void'},
\    'last': { 'signature': ' $type', 'return_type': 'void'},
\    'reset': { 'signature': 'void', 'return_type': 'void'},
\    'send_cmd': { 'signature': ' $cmd', 'return_type': 'void'},
\    'quit': { 'signature': 'void', 'return_type': 'void'},
\    'popstat': { 'signature': 'void', 'return_type': 'void'},
\    'uidl': { 'signature': ' $msgNum', 'return_type': 'void'},
\    'delete': { 'signature': ' $msgNum', 'return_type': 'void'},
\    'is_ok': { 'signature': ' $cmd', 'return_type': 'void'},
\    'strip_clf': { 'signature': ' $text', 'return_type': 'void'},
\    'parse_banner': { 'signature': ' $server_text', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_feed'] = {
\'wp_feed_cache': {
\  'name': 'WP_Feed_Cache',
\  'static_properties': {
\  },
\  'static_methods': {
\    'get_handler': { 'signature': 'string $location, string $filename, string $extension', 'return_type': '\SimplePie_Cache_Base'},
\    'register': { 'signature': 'string $type, string $class', 'return_type': 'void'},
\    'parse_URL': { 'signature': 'string $url', 'return_type': 'array'},
\  },
\  'methods': {
\    'create': { 'signature': ' $location,  $filename,  $extension', 'return_type': 'void'},
\  },
\},
\'wp_feed_cache_transient': {
\  'name': 'WP_Feed_Cache_Transient',
\  'properties': {
\    '$name': {'initializer': '', 'type': ''},
\    '$mod_name': {'initializer': '', 'type': ''},
\    '$lifetime': {'initializer': '43200', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $location,  $filename,  $extension', 'return_type': 'void'},
\    'save': { 'signature': ' $data', 'return_type': 'void'},
\    'load': { 'signature': 'void', 'return_type': 'void'},
\    'mtime': { 'signature': 'void', 'return_type': 'void'},
\    'touch': { 'signature': 'void', 'return_type': 'void'},
\    'unlink': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_simplepie_file': {
\  'name': 'WP_SimplePie_File',
\  'properties': {
\    '$url': {'initializer': '', 'type': ''},
\    '$useragent': {'initializer': '', 'type': ''},
\    '$success': {'initializer': 'true', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\    '$body': {'initializer': '', 'type': ''},
\    '$status_code': {'initializer': '', 'type': ''},
\    '$redirects': {'initializer': '0', 'type': ''},
\    '$error': {'initializer': '', 'type': ''},
\    '$method': {'initializer': 'SIMPLEPIE_FILE_SOURCE_NONE', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $url,  $timeout,  $redirects,  $headers,  $useragent,  $force_fsockopen', 'return_type': 'void'},
\  },
\},
\'wp_simplepie_sanitize_kses': {
\  'name': 'WP_SimplePie_Sanitize_KSES',
\  'properties': {
\    '$base': {'initializer': '', 'type': ''},
\    '$remove_div': {'initializer': 'true', 'type': ''},
\    '$image_handler': {'initializer': '', 'type': ''},
\    '$strip_htmltags': {'initializer': 'array', 'type': ''},
\    '$encode_instead_of_strip': {'initializer': 'false', 'type': ''},
\    '$strip_attributes': {'initializer': 'array', 'type': ''},
\    '$strip_comments': {'initializer': 'false', 'type': ''},
\    '$output_encoding': {'initializer': 'UTF-8', 'type': ''},
\    '$enable_cache': {'initializer': 'true', 'type': ''},
\    '$cache_location': {'initializer': './cache', 'type': ''},
\    '$cache_name_function': {'initializer': 'md5', 'type': ''},
\    '$timeout': {'initializer': '10', 'type': ''},
\    '$useragent': {'initializer': '', 'type': ''},
\    '$force_fsockopen': {'initializer': 'false', 'type': ''},
\    '$replace_url_attributes': {'initializer': 'null', 'type': ''},
\  },
\  'methods': {
\    'sanitize': { 'signature': ' $data,  $type,  $base', 'return_type': 'void'},
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'remove_div': { 'signature': ' $enable', 'return_type': 'void'},
\    'set_image_handler': { 'signature': ' $page', 'return_type': 'void'},
\    'set_registry': { 'signature': '\SimplePie_Registry $registry', 'return_type': 'void'},
\    'pass_cache_data': { 'signature': ' $enable_cache,  $cache_location,  $cache_name_function,  $cache_class', 'return_type': 'void'},
\    'pass_file_data': { 'signature': ' $file_class,  $timeout,  $useragent,  $force_fsockopen', 'return_type': 'void'},
\    'strip_htmltags': { 'signature': ' $tags', 'return_type': 'void'},
\    'encode_instead_of_strip': { 'signature': ' $encode', 'return_type': 'void'},
\    'strip_attributes': { 'signature': ' $attribs', 'return_type': 'void'},
\    'strip_comments': { 'signature': ' $strip', 'return_type': 'void'},
\    'set_output_encoding': { 'signature': ' $encoding', 'return_type': 'void'},
\    'set_url_replacements': { 'signature': 'array|null $element_attribute', 'return_type': 'void'},
\    'replace_urls': { 'signature': ' $document,  $tag,  $attributes', 'return_type': 'void'},
\    'do_strip_htmltags': { 'signature': ' $match', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_category_template'] = {
\'walker_category': {
\  'name': 'Walker_Category',
\  'properties': {
\    '$tree_type': {'initializer': 'category', 'type': 'string'},
\    '$db_fields': {'initializer': 'array', 'type': 'array'},
\    '$max_pages': {'initializer': '1', 'type': 'int'},
\  },
\  'methods': {
\    'start_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'start_el': { 'signature': 'string $output, object $category, int $depth, array $args, int $id', 'return_type': 'void'},
\    'end_el': { 'signature': 'string $output, object $page, int $depth, array $args', 'return_type': 'void'},
\    'display_element': { 'signature': 'object $element, array $children_elements, int $max_depth, int $depth, array $args, string $output', 'return_type': 'null'},
\    'walk': { 'signature': 'array $elements, int $max_depth', 'return_type': 'string'},
\    'paged_walk': { 'signature': ' $elements, int $max_depth, int $page_num,  $per_page', 'return_type': 'string'},
\    'get_number_of_root_elements': { 'signature': ' $elements', 'return_type': 'void'},
\    'unset_children': { 'signature': ' $e,  $children_elements', 'return_type': 'void'},
\  },
\},
\'walker_categorydropdown': {
\  'name': 'Walker_CategoryDropdown',
\  'properties': {
\    '$tree_type': {'initializer': 'category', 'type': 'string'},
\    '$db_fields': {'initializer': 'array', 'type': 'array'},
\    '$max_pages': {'initializer': '1', 'type': 'int'},
\  },
\  'methods': {
\    'start_el': { 'signature': 'string $output, object $category, int $depth, array $args,  $id', 'return_type': 'void'},
\    'start_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_el': { 'signature': 'string $output, object $object, int $depth, array $args', 'return_type': 'void'},
\    'display_element': { 'signature': 'object $element, array $children_elements, int $max_depth, int $depth, array $args, string $output', 'return_type': 'null'},
\    'walk': { 'signature': 'array $elements, int $max_depth', 'return_type': 'string'},
\    'paged_walk': { 'signature': ' $elements, int $max_depth, int $page_num,  $per_page', 'return_type': 'string'},
\    'get_number_of_root_elements': { 'signature': ' $elements', 'return_type': 'void'},
\    'unset_children': { 'signature': ' $e,  $children_elements', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_admin_bar'] = {
\'wp_admin_bar': {
\  'name': 'WP_Admin_Bar',
\  'properties': {
\    '$user': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    '__get': { 'signature': ' $name', 'return_type': 'void'},
\    'initialize': { 'signature': 'void', 'return_type': 'void'},
\    'add_menu': { 'signature': ' $node', 'return_type': 'void'},
\    'remove_menu': { 'signature': ' $id', 'return_type': 'void'},
\    'add_node': { 'signature': 'array $args', 'return_type': 'void'},
\    'get_node': { 'signature': ' $id', 'return_type': 'object'},
\    'get_nodes': { 'signature': 'void', 'return_type': 'void'},
\    'add_group': { 'signature': 'array $args', 'return_type': 'void'},
\    'remove_node': { 'signature': ' $id', 'return_type': 'void'},
\    'render': { 'signature': 'void', 'return_type': 'void'},
\    'recursive_render': { 'signature': ' $id,  $node', 'return_type': 'void'},
\    'add_menus': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_ac3'] = {
\'getid3_ac3': {
\  'name': 'getid3_ac3',
\  'static_methods': {
\    'sampleRateCodeLookup': { 'signature': ' $fscod', 'return_type': 'void'},
\    'serviceTypeLookup': { 'signature': ' $bsmod,  $acmod', 'return_type': 'void'},
\    'audioCodingModeLookup': { 'signature': ' $acmod', 'return_type': 'void'},
\    'centerMixLevelLookup': { 'signature': ' $cmixlev', 'return_type': 'void'},
\    'surroundMixLevelLookup': { 'signature': ' $surmixlev', 'return_type': 'void'},
\    'dolbySurroundModeLookup': { 'signature': ' $dsurmod', 'return_type': 'void'},
\    'channelsEnabledLookup': { 'signature': ' $acmod,  $lfeon', 'return_type': 'void'},
\    'heavyCompression': { 'signature': ' $compre', 'return_type': 'void'},
\    'roomTypeLookup': { 'signature': ' $roomtyp', 'return_type': 'void'},
\    'frameSizeLookup': { 'signature': ' $frmsizecod,  $fscod', 'return_type': 'void'},
\    'bitrateLookup': { 'signature': ' $frmsizecod', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_exception'] = {
\'simplepie_exception': {
\  'name': 'SimplePie_Exception',
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_image_editor'] = {
\'wp_image_editor': {
\  'name': 'WP_Image_Editor',
\  'static_methods': {
\    'test': { 'signature': 'array $args', 'return_type': 'boolean'},
\    'supports_mime_type': { 'signature': 'string $mime_type', 'return_type': 'boolean'},
\  },
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': ' $file', 'return_type': 'void'},
\    'load': { 'signature': 'void', 'return_type': 'boolean|\WP_Error'},
\    'save': { 'signature': 'string $destfilename, string $mime_type', 'return_type': 'array|\WP_Error'},
\    'resize': { 'signature': 'int $max_w, int $max_h, boolean $crop', 'return_type': 'boolean|\WP_Error'},
\    'multi_resize': { 'signature': 'array $sizes', 'return_type': 'array'},
\    'crop': { 'signature': 'int $src_x, int $src_y, int $src_w, int $src_h, int $dst_w, int $dst_h, boolean $src_abs', 'return_type': 'boolean|\WP_Error'},
\    'rotate': { 'signature': 'float $angle', 'return_type': 'boolean|\WP_Error'},
\    'flip': { 'signature': 'boolean $horz, boolean $vert', 'return_type': 'boolean|\WP_Error'},
\    'stream': { 'signature': 'string $mime_type', 'return_type': 'boolean|\WP_Error'},
\    'get_size': { 'signature': 'void', 'return_type': 'array'},
\    'set_quality': { 'signature': 'int $quality', 'return_type': 'boolean|\WP_Error'},
\    'generate_filename': { 'signature': 'string $suffix, string $dest_path, string $extension', 'return_type': 'string'},
\    'get_suffix': { 'signature': 'void', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_ogg'] = {
\'getid3_ogg': {
\  'name': 'getid3_ogg',
\  'static_methods': {
\    'SpeexBandModeLookup': { 'signature': ' $mode', 'return_type': 'void'},
\    'OggPageSegmentLength': { 'signature': ' $OggInfoArray,  $SegmentNumber', 'return_type': 'void'},
\    'get_quality_from_nominal_bitrate': { 'signature': ' $nominal_bitrate', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'ParseVorbisPageHeader': { 'signature': ' $filedata,  $filedataoffset,  $oggpageinfo', 'return_type': 'void'},
\    'ParseOggPageHeader': { 'signature': 'void', 'return_type': 'void'},
\    'ParseVorbisComments': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_customize_control'] = {
\'wp_customize_control': {
\  'name': 'WP_Customize_Control',
\  'properties': {
\    '$manager': {'initializer': '', 'type': '\WP_Customize_Manager'},
\    '$id': {'initializer': '', 'type': 'string'},
\    '$settings': {'initializer': '', 'type': 'array'},
\    '$setting': {'initializer': 'default', 'type': 'string'},
\    '$priority': {'initializer': '10', 'type': 'int'},
\    '$section': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\    '$choices': {'initializer': 'array', 'type': 'array'},
\    '$json': {'initializer': 'array', 'type': 'array'},
\    '$type': {'initializer': 'text', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': 'void'},
\    'enqueue': { 'signature': 'void', 'return_type': 'void'},
\    'value': { 'signature': 'string $setting_key', 'return_type': 'mixed'},
\    'to_json': { 'signature': 'void', 'return_type': 'void'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\    'maybe_render': { 'signature': 'void', 'return_type': 'void'},
\    'get_link': { 'signature': 'string $setting_key', 'return_type': 'string'},
\    'link': { 'signature': 'string $setting_key', 'return_type': 'void'},
\  },
\},
\'wp_customize_color_control': {
\  'name': 'WP_Customize_Color_Control',
\  'properties': {
\    '$type': {'initializer': 'color', 'type': 'string'},
\    '$statuses': {'initializer': '', 'type': 'array'},
\    '$manager': {'initializer': '', 'type': '\WP_Customize_Manager'},
\    '$id': {'initializer': '', 'type': 'string'},
\    '$settings': {'initializer': '', 'type': 'array'},
\    '$setting': {'initializer': 'default', 'type': 'string'},
\    '$priority': {'initializer': '10', 'type': 'int'},
\    '$section': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\    '$choices': {'initializer': 'array', 'type': 'array'},
\    '$json': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': 'void'},
\    'enqueue': { 'signature': 'void', 'return_type': 'void'},
\    'to_json': { 'signature': 'void', 'return_type': 'void'},
\    'render_content': { 'signature': 'void', 'return_type': 'void'},
\    'value': { 'signature': 'string $setting_key', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\    'maybe_render': { 'signature': 'void', 'return_type': 'void'},
\    'get_link': { 'signature': 'string $setting_key', 'return_type': 'string'},
\    'link': { 'signature': 'string $setting_key', 'return_type': 'void'},
\  },
\},
\'wp_customize_upload_control': {
\  'name': 'WP_Customize_Upload_Control',
\  'properties': {
\    '$type': {'initializer': 'upload', 'type': ''},
\    '$removed': {'initializer': '', 'type': ''},
\    '$context': {'initializer': '', 'type': ''},
\    '$extensions': {'initializer': 'array', 'type': ''},
\    '$manager': {'initializer': '', 'type': '\WP_Customize_Manager'},
\    '$id': {'initializer': '', 'type': 'string'},
\    '$settings': {'initializer': '', 'type': 'array'},
\    '$setting': {'initializer': 'default', 'type': 'string'},
\    '$priority': {'initializer': '10', 'type': 'int'},
\    '$section': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\    '$choices': {'initializer': 'array', 'type': 'array'},
\    '$json': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    'enqueue': { 'signature': 'void', 'return_type': 'void'},
\    'to_json': { 'signature': 'void', 'return_type': 'void'},
\    'render_content': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': 'void'},
\    'value': { 'signature': 'string $setting_key', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\    'maybe_render': { 'signature': 'void', 'return_type': 'void'},
\    'get_link': { 'signature': 'string $setting_key', 'return_type': 'string'},
\    'link': { 'signature': 'string $setting_key', 'return_type': 'void'},
\  },
\},
\'wp_customize_image_control': {
\  'name': 'WP_Customize_Image_Control',
\  'properties': {
\    '$type': {'initializer': 'image', 'type': ''},
\    '$get_url': {'initializer': '', 'type': ''},
\    '$statuses': {'initializer': '', 'type': ''},
\    '$extensions': {'initializer': 'array', 'type': ''},
\    '$removed': {'initializer': '', 'type': ''},
\    '$context': {'initializer': '', 'type': ''},
\    '$manager': {'initializer': '', 'type': '\WP_Customize_Manager'},
\    '$id': {'initializer': '', 'type': 'string'},
\    '$settings': {'initializer': '', 'type': 'array'},
\    '$setting': {'initializer': 'default', 'type': 'string'},
\    '$priority': {'initializer': '10', 'type': 'int'},
\    '$section': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\    '$choices': {'initializer': 'array', 'type': 'array'},
\    '$json': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': '\WP_Customize_Manager $manager, string $id, array $args', 'return_type': 'void'},
\    'prepare_control': { 'signature': 'void', 'return_type': 'void'},
\    'to_json': { 'signature': 'void', 'return_type': 'void'},
\    'render_content': { 'signature': 'void', 'return_type': 'void'},
\    'add_tab': { 'signature': 'string $id, string $label, mixed $callback', 'return_type': 'void'},
\    'remove_tab': { 'signature': 'string $id', 'return_type': 'void'},
\    'tab_upload_new': { 'signature': 'void', 'return_type': 'void'},
\    'tab_uploaded': { 'signature': 'void', 'return_type': 'void'},
\    'print_tab_image': { 'signature': 'string $url, string $thumbnail_url', 'return_type': 'void'},
\    'enqueue': { 'signature': 'void', 'return_type': 'void'},
\    'value': { 'signature': 'string $setting_key', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\    'maybe_render': { 'signature': 'void', 'return_type': 'void'},
\    'get_link': { 'signature': 'string $setting_key', 'return_type': 'string'},
\    'link': { 'signature': 'string $setting_key', 'return_type': 'void'},
\  },
\},
\'wp_customize_background_image_control': {
\  'name': 'WP_Customize_Background_Image_Control',
\  'properties': {
\    '$type': {'initializer': 'text', 'type': 'string'},
\    '$get_url': {'initializer': '', 'type': ''},
\    '$statuses': {'initializer': '', 'type': ''},
\    '$extensions': {'initializer': 'array', 'type': ''},
\    '$removed': {'initializer': '', 'type': ''},
\    '$context': {'initializer': '', 'type': ''},
\    '$manager': {'initializer': '', 'type': '\WP_Customize_Manager'},
\    '$id': {'initializer': '', 'type': 'string'},
\    '$settings': {'initializer': '', 'type': 'array'},
\    '$setting': {'initializer': 'default', 'type': 'string'},
\    '$priority': {'initializer': '10', 'type': 'int'},
\    '$section': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\    '$choices': {'initializer': 'array', 'type': 'array'},
\    '$json': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': '\WP_Customize_Manager $manager', 'return_type': 'void'},
\    'tab_uploaded': { 'signature': 'void', 'return_type': 'void'},
\    'tab_default_background': { 'signature': 'void', 'return_type': 'void'},
\    'prepare_control': { 'signature': 'void', 'return_type': 'void'},
\    'to_json': { 'signature': 'void', 'return_type': 'void'},
\    'add_tab': { 'signature': 'string $id, string $label, mixed $callback', 'return_type': 'void'},
\    'remove_tab': { 'signature': 'string $id', 'return_type': 'void'},
\    'tab_upload_new': { 'signature': 'void', 'return_type': 'void'},
\    'print_tab_image': { 'signature': 'string $url, string $thumbnail_url', 'return_type': 'void'},
\    'enqueue': { 'signature': 'void', 'return_type': 'void'},
\    'value': { 'signature': 'string $setting_key', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\    'maybe_render': { 'signature': 'void', 'return_type': 'void'},
\    'get_link': { 'signature': 'string $setting_key', 'return_type': 'string'},
\    'link': { 'signature': 'string $setting_key', 'return_type': 'void'},
\  },
\},
\'wp_customize_header_image_control': {
\  'name': 'WP_Customize_Header_Image_Control',
\  'properties': {
\    '$type': {'initializer': 'text', 'type': 'string'},
\    '$get_url': {'initializer': '', 'type': ''},
\    '$statuses': {'initializer': '', 'type': ''},
\    '$extensions': {'initializer': 'array', 'type': ''},
\    '$removed': {'initializer': '', 'type': ''},
\    '$context': {'initializer': '', 'type': ''},
\    '$manager': {'initializer': '', 'type': '\WP_Customize_Manager'},
\    '$id': {'initializer': '', 'type': 'string'},
\    '$settings': {'initializer': '', 'type': 'array'},
\    '$setting': {'initializer': 'default', 'type': 'string'},
\    '$priority': {'initializer': '10', 'type': 'int'},
\    '$section': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\    '$choices': {'initializer': 'array', 'type': 'array'},
\    '$json': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': '\WP_Customize_Manager $manager', 'return_type': 'void'},
\    'prepare_control': { 'signature': 'void', 'return_type': 'void'},
\    'print_header_image': { 'signature': 'mixed $choice, array $header', 'return_type': 'void'},
\    'tab_uploaded': { 'signature': 'void', 'return_type': 'void'},
\    'tab_default_headers': { 'signature': 'void', 'return_type': 'void'},
\    'to_json': { 'signature': 'void', 'return_type': 'void'},
\    'add_tab': { 'signature': 'string $id, string $label, mixed $callback', 'return_type': 'void'},
\    'remove_tab': { 'signature': 'string $id', 'return_type': 'void'},
\    'tab_upload_new': { 'signature': 'void', 'return_type': 'void'},
\    'print_tab_image': { 'signature': 'string $url, string $thumbnail_url', 'return_type': 'void'},
\    'enqueue': { 'signature': 'void', 'return_type': 'void'},
\    'value': { 'signature': 'string $setting_key', 'return_type': 'mixed'},
\    'check_capabilities': { 'signature': 'void', 'return_type': 'bool'},
\    'maybe_render': { 'signature': 'void', 'return_type': 'void'},
\    'get_link': { 'signature': 'string $setting_key', 'return_type': 'string'},
\    'link': { 'signature': 'string $setting_key', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_image_editor_imagick'] = {
\'wp_image_editor_imagick': {
\  'name': 'WP_Image_Editor_Imagick',
\  'static_methods': {
\    'test': { 'signature': ' $args', 'return_type': 'boolean'},
\    'supports_mime_type': { 'signature': 'string $mime_type', 'return_type': 'boolean'},
\  },
\  'properties': {
\  },
\  'methods': {
\    '__destruct': { 'signature': 'void', 'return_type': 'void'},
\    'load': { 'signature': 'void', 'return_type': 'boolean|\WP_Error'},
\    'set_quality': { 'signature': 'int $quality', 'return_type': 'boolean|\WP_Error'},
\    'resize': { 'signature': 'int $max_w, int $max_h, boolean $crop', 'return_type': 'boolean|\WP_Error'},
\    'multi_resize': { 'signature': 'array $sizes', 'return_type': 'array'},
\    'crop': { 'signature': 'int $src_x, int $src_y, int $src_w, int $src_h, int $dst_w, int $dst_h, boolean $src_abs', 'return_type': 'boolean|\WP_Error'},
\    'rotate': { 'signature': 'float $angle', 'return_type': 'boolean|\WP_Error'},
\    'flip': { 'signature': 'boolean $horz, boolean $vert', 'return_type': 'void'},
\    'save': { 'signature': 'string $destfilename, string $mime_type', 'return_type': 'array|\WP_Error'},
\    'stream': { 'signature': 'string $mime_type', 'return_type': 'boolean|\WP_Error'},
\    '__construct': { 'signature': ' $file', 'return_type': 'void'},
\    'get_size': { 'signature': 'void', 'return_type': 'array'},
\    'generate_filename': { 'signature': 'string $suffix, string $dest_path, string $extension', 'return_type': 'string'},
\    'get_suffix': { 'signature': 'void', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_atomlib'] = {
\'atomfeed': {
\  'name': 'AtomFeed',
\  'properties': {
\    '$links': {'initializer': 'array', 'type': 'array'},
\    '$categories': {'initializer': 'array', 'type': 'array'},
\    '$entries': {'initializer': 'array', 'type': 'array'},
\  },
\},
\'atomentry': {
\  'name': 'AtomEntry',
\  'properties': {
\    '$links': {'initializer': 'array', 'type': 'array'},
\    '$categories': {'initializer': 'array', 'type': 'array'},
\  },
\},
\'atomparser': {
\  'name': 'AtomParser',
\  'properties': {
\    '$NS': {'initializer': 'http://www.w3.org/2005/Atom', 'type': ''},
\    '$ATOM_CONTENT_ELEMENTS': {'initializer': 'array', 'type': ''},
\    '$ATOM_SIMPLE_ELEMENTS': {'initializer': 'array', 'type': ''},
\    '$debug': {'initializer': 'false', 'type': ''},
\    '$depth': {'initializer': '0', 'type': ''},
\    '$indent': {'initializer': '2', 'type': ''},
\    '$in_content': {'initializer': '', 'type': ''},
\    '$ns_contexts': {'initializer': 'array', 'type': ''},
\    '$ns_decls': {'initializer': 'array', 'type': ''},
\    '$content_ns_decls': {'initializer': 'array', 'type': ''},
\    '$content_ns_contexts': {'initializer': 'array', 'type': ''},
\    '$is_xhtml': {'initializer': 'false', 'type': ''},
\    '$is_html': {'initializer': 'false', 'type': ''},
\    '$is_text': {'initializer': 'true', 'type': ''},
\    '$skipped_div': {'initializer': 'false', 'type': ''},
\    '$FILE': {'initializer': '"php://input"', 'type': ''},
\    '$feed': {'initializer': '', 'type': ''},
\    '$current': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'AtomParser': { 'signature': 'void', 'return_type': 'void'},
\    '_p': { 'signature': ' $msg', 'return_type': 'void'},
\    'error_handler': { 'signature': ' $log_level,  $log_text,  $error_file,  $error_line', 'return_type': 'void'},
\    'parse': { 'signature': 'void', 'return_type': 'void'},
\    'start_element': { 'signature': ' $parser,  $name,  $attrs', 'return_type': 'void'},
\    'end_element': { 'signature': ' $parser,  $name', 'return_type': 'void'},
\    'start_ns': { 'signature': ' $parser,  $prefix,  $uri', 'return_type': 'void'},
\    'end_ns': { 'signature': ' $parser,  $prefix', 'return_type': 'void'},
\    'cdata': { 'signature': ' $parser,  $data', 'return_type': 'void'},
\    '_default': { 'signature': ' $parser,  $data', 'return_type': 'void'},
\    'ns_to_prefix': { 'signature': ' $qname,  $attr', 'return_type': 'void'},
\    'is_declared_content_ns': { 'signature': ' $new_mapping', 'return_type': 'void'},
\    'xml_escape': { 'signature': ' $string', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_customize_manager'] = {
\'wp_customize_manager': {
\  'name': 'WP_Customize_Manager',
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'doing_ajax': { 'signature': 'void', 'return_type': 'bool'},
\    'wp_die_handler': { 'signature': 'void', 'return_type': 'string'},
\    'setup_theme': { 'signature': 'void', 'return_type': 'void'},
\    'after_setup_theme': { 'signature': 'void', 'return_type': 'void'},
\    'start_previewing_theme': { 'signature': 'void', 'return_type': 'void'},
\    'stop_previewing_theme': { 'signature': 'void', 'return_type': 'void'},
\    'theme': { 'signature': 'void', 'return_type': '\WP_Theme'},
\    'settings': { 'signature': 'void', 'return_type': 'array'},
\    'controls': { 'signature': 'void', 'return_type': 'array'},
\    'sections': { 'signature': 'void', 'return_type': 'array'},
\    'is_theme_active': { 'signature': 'void', 'return_type': 'bool'},
\    'wp_loaded': { 'signature': 'void', 'return_type': 'void'},
\    'wp_redirect_status': { 'signature': 'mixed $status', 'return_type': 'int'},
\    'post_value': { 'signature': 'mixed $setting', 'return_type': 'string'},
\    'customize_preview_init': { 'signature': 'void', 'return_type': 'void'},
\    'customize_preview_base': { 'signature': 'void', 'return_type': 'void'},
\    'customize_preview_html5': { 'signature': 'void', 'return_type': 'void'},
\    'customize_preview_settings': { 'signature': 'void', 'return_type': 'void'},
\    'customize_preview_signature': { 'signature': 'void', 'return_type': 'void'},
\    'remove_preview_signature': { 'signature': ' $return', 'return_type': 'void'},
\    'is_preview': { 'signature': 'void', 'return_type': 'bool'},
\    'get_template': { 'signature': 'void', 'return_type': 'string'},
\    'get_stylesheet': { 'signature': 'void', 'return_type': 'string'},
\    'get_template_root': { 'signature': 'void', 'return_type': 'string'},
\    'get_stylesheet_root': { 'signature': 'void', 'return_type': 'string'},
\    'current_theme': { 'signature': 'mixed $current_theme', 'return_type': 'string'},
\    'save': { 'signature': 'void', 'return_type': 'void'},
\    'add_setting': { 'signature': 'string $id, array $args', 'return_type': 'void'},
\    'get_setting': { 'signature': 'string $id', 'return_type': 'object'},
\    'remove_setting': { 'signature': 'string $id', 'return_type': 'void'},
\    'add_section': { 'signature': 'string $id, array $args', 'return_type': 'void'},
\    'get_section': { 'signature': 'string $id', 'return_type': 'object'},
\    'remove_section': { 'signature': 'string $id', 'return_type': 'void'},
\    'add_control': { 'signature': 'string $id, array $args', 'return_type': 'void'},
\    'get_control': { 'signature': 'string $id', 'return_type': 'object'},
\    'remove_control': { 'signature': 'string $id', 'return_type': 'void'},
\    'prepare_controls': { 'signature': 'void', 'return_type': 'void'},
\    'enqueue_control_scripts': { 'signature': 'void', 'return_type': 'void'},
\    'register_controls': { 'signature': 'void', 'return_type': 'void'},
\    '_sanitize_header_textcolor': { 'signature': 'string $color', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_default_widgets'] = {
\'wp_widget_pages': {
\  'name': 'WP_Widget_Pages',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_links': {
\  'name': 'WP_Widget_Links',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_search': {
\  'name': 'WP_Widget_Search',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_archives': {
\  'name': 'WP_Widget_Archives',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_meta': {
\  'name': 'WP_Widget_Meta',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_calendar': {
\  'name': 'WP_Widget_Calendar',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_text': {
\  'name': 'WP_Widget_Text',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_categories': {
\  'name': 'WP_Widget_Categories',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_recent_posts': {
\  'name': 'WP_Widget_Recent_Posts',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'flush_widget_cache': { 'signature': 'void', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_recent_comments': {
\  'name': 'WP_Widget_Recent_Comments',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'recent_comments_style': { 'signature': 'void', 'return_type': 'void'},
\    'flush_widget_cache': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_rss': {
\  'name': 'WP_Widget_RSS',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_tag_cloud': {
\  'name': 'WP_Widget_Tag_Cloud',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    '_get_current_taxonomy': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_nav_menu_widget': {
\  'name': 'WP_Nav_Menu_Widget',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'widget': { 'signature': ' $args,  $instance', 'return_type': 'void'},
\    'update': { 'signature': ' $new_instance,  $old_instance', 'return_type': 'void'},
\    'form': { 'signature': ' $instance', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_theme'] = {
\'wp_theme': {
\  'name': 'WP_Theme',
\  'static_properties': {
\  },
\  'static_methods': {
\    'get_allowed': { 'signature': 'int $blog_id', 'return_type': 'array'},
\    'get_allowed_on_network': { 'signature': 'void', 'return_type': 'array'},
\    'get_allowed_on_site': { 'signature': 'int $blog_id', 'return_type': 'array'},
\    'sort_by_name': { 'signature': ' $themes', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $theme_dir, string $theme_root, \WP_Error|null $_child', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    '__isset': { 'signature': ' $offset', 'return_type': 'void'},
\    '__get': { 'signature': ' $offset', 'return_type': 'void'},
\    'offsetSet': { 'signature': ' $offset,  $value', 'return_type': 'void'},
\    'offsetUnset': { 'signature': ' $offset', 'return_type': 'void'},
\    'offsetExists': { 'signature': ' $offset', 'return_type': 'void'},
\    'offsetGet': { 'signature': ' $offset', 'return_type': 'void'},
\    'errors': { 'signature': 'void', 'return_type': '\WP_Error|bool'},
\    'exists': { 'signature': 'void', 'return_type': 'bool'},
\    'parent': { 'signature': 'void', 'return_type': '\WP_Theme|bool'},
\    'cache_delete': { 'signature': 'void', 'return_type': 'void'},
\    'get': { 'signature': 'string $header', 'return_type': 'string'},
\    'display': { 'signature': 'string $header, bool $markup, bool $translate', 'return_type': 'string'},
\    'get_stylesheet': { 'signature': 'void', 'return_type': 'string'},
\    'get_template': { 'signature': 'void', 'return_type': 'string'},
\    'get_stylesheet_directory': { 'signature': 'void', 'return_type': 'string'},
\    'get_template_directory': { 'signature': 'void', 'return_type': 'string'},
\    'get_stylesheet_directory_uri': { 'signature': 'void', 'return_type': 'string'},
\    'get_template_directory_uri': { 'signature': 'void', 'return_type': 'string'},
\    'get_theme_root': { 'signature': 'void', 'return_type': 'string'},
\    'get_theme_root_uri': { 'signature': 'void', 'return_type': 'string'},
\    'get_screenshot': { 'signature': 'string $uri', 'return_type': 'mixed'},
\    'get_files': { 'signature': 'mixed $type, int $depth, bool $search_parent', 'return_type': 'array'},
\    'get_page_templates': { 'signature': 'void', 'return_type': 'array'},
\    'load_textdomain': { 'signature': 'void', 'return_type': 'True'},
\    'is_allowed': { 'signature': 'string $check, int $blog_id', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_user'] = {
\'wp_user_query': {
\  'name': 'WP_User_Query',
\  'properties': {
\    '$query_vars': {'initializer': 'array', 'type': 'array'},
\    '$results': {'initializer': '', 'type': 'array'},
\    '$total_users': {'initializer': '0', 'type': 'int'},
\    '$query_fields': {'initializer': '', 'type': ''},
\    '$query_from': {'initializer': '', 'type': ''},
\    '$query_where': {'initializer': '', 'type': ''},
\    '$query_orderby': {'initializer': '', 'type': ''},
\    '$query_limit': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $query', 'return_type': '\WP_User_Query'},
\    'prepare_query': { 'signature': 'void', 'return_type': 'void'},
\    'query': { 'signature': 'void', 'return_type': 'void'},
\    'get': { 'signature': 'string $query_var', 'return_type': 'mixed'},
\    'set': { 'signature': 'string $query_var, mixed $value', 'return_type': 'void'},
\    'get_search_sql': { 'signature': 'string $string, array $cols, bool $wild', 'return_type': 'string'},
\    'get_results': { 'signature': 'void', 'return_type': 'array'},
\    'get_total': { 'signature': 'void', 'return_type': 'array'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_ipv6'] = {
\'simplepie_net_ipv6': {
\  'name': 'SimplePie_Net_IPv6',
\  'static_methods': {
\    'uncompress': { 'signature': 'string $ip', 'return_type': 'string'},
\    'compress': { 'signature': 'string $ip', 'return_type': 'string'},
\    'check_ipv6': { 'signature': 'string $ip', 'return_type': 'bool'},
\    'checkIPv6': { 'signature': 'string $ip', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_tag_id3v1'] = {
\'getid3_id3v1': {
\  'name': 'getid3_id3v1',
\  'static_methods': {
\    'cutfield': { 'signature': ' $str', 'return_type': 'void'},
\    'ArrayOfGenres': { 'signature': ' $allowSCMPXextended', 'return_type': 'void'},
\    'LookupGenreName': { 'signature': ' $genreid,  $allowSCMPXextended', 'return_type': 'void'},
\    'LookupGenreID': { 'signature': ' $genre,  $allowSCMPXextended', 'return_type': 'void'},
\    'StandardiseID3v1GenreName': { 'signature': ' $OriginalGenre', 'return_type': 'void'},
\    'GenerateID3v1Tag': { 'signature': ' $title,  $artist,  $album,  $year,  $genreid,  $comment,  $track', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_spellchecker'] = {
\'spellchecker': {
\  'name': 'SpellChecker',
\  'methods': {
\    'SpellChecker': { 'signature': 'mixed $config', 'return_type': 'void'},
\    'loopback': { 'signature': 'void', 'return_type': '\{Array}'},
\    'checkWords': { 'signature': '\{String} $lang, \{Array} $words', 'return_type': '\{Array}'},
\    'getSuggestions': { 'signature': '\{String} $lang, \{String} $word', 'return_type': '\{Array}'},
\    'throwError': { 'signature': '\{String} $str', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_video_quicktime'] = {
\'getid3_quicktime': {
\  'name': 'getid3_quicktime',
\  'properties': {
\    '$ReturnAtomData': {'initializer': 'true', 'type': ''},
\    '$ParseAllPossibleAtoms': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'QuicktimeParseAtom': { 'signature': ' $atomname,  $atomsize,  $atom_data,  $baseoffset,  $atomHierarchy,  $ParseAllPossibleAtoms', 'return_type': 'void'},
\    'QuicktimeParseContainerAtom': { 'signature': ' $atom_data,  $baseoffset,  $atomHierarchy,  $ParseAllPossibleAtoms', 'return_type': 'void'},
\    'quicktime_read_mp4_descr_length': { 'signature': ' $data,  $offset', 'return_type': 'void'},
\    'QuicktimeLanguageLookup': { 'signature': ' $languageid', 'return_type': 'void'},
\    'QuicktimeVideoCodecLookup': { 'signature': ' $codecid', 'return_type': 'void'},
\    'QuicktimeAudioCodecLookup': { 'signature': ' $codecid', 'return_type': 'void'},
\    'QuicktimeDCOMLookup': { 'signature': ' $compressionid', 'return_type': 'void'},
\    'QuicktimeColorNameLookup': { 'signature': ' $colordepthid', 'return_type': 'void'},
\    'QuicktimeSTIKLookup': { 'signature': ' $stik', 'return_type': 'void'},
\    'QuicktimeIODSaudioProfileName': { 'signature': ' $audio_profile_id', 'return_type': 'void'},
\    'QuicktimeIODSvideoProfileName': { 'signature': ' $video_profile_id', 'return_type': 'void'},
\    'QuicktimeContentRatingLookup': { 'signature': ' $rtng', 'return_type': 'void'},
\    'QuicktimeStoreAccountTypeLookup': { 'signature': ' $akid', 'return_type': 'void'},
\    'QuicktimeStoreFrontCodeLookup': { 'signature': ' $sfid', 'return_type': 'void'},
\    'QuicktimeParseNikonNCTG': { 'signature': ' $atom_data', 'return_type': 'void'},
\    'CopyToAppropriateCommentsSection': { 'signature': ' $keyname,  $data,  $boxname', 'return_type': 'void'},
\    'NoNullString': { 'signature': ' $nullterminatedstring', 'return_type': 'void'},
\    'Pascal2String': { 'signature': ' $pascalstring', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_enchantspell'] = {
\'enchantspell': {
\  'name': 'EnchantSpell',
\  'methods': {
\    'checkWords': { 'signature': 'String $lang, Array $words', 'return_type': 'Array'},
\    'getSuggestions': { 'signature': 'String $lang, String $word', 'return_type': 'Array'},
\    'SpellChecker': { 'signature': 'mixed $config', 'return_type': 'void'},
\    'loopback': { 'signature': 'void', 'return_type': '\{Array}'},
\    'throwError': { 'signature': '\{String} $str', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_shell'] = {
\'text_diff_engine_shell': {
\  'name': 'Text_Diff_Engine_shell',
\  'properties': {
\    '$_diffCommand': {'initializer': 'diff', 'type': 'string'},
\  },
\  'methods': {
\    'diff': { 'signature': 'array $from_lines, array $to_lines', 'return_type': 'array'},
\    '_getLines': { 'signature': ' $text_lines,  $line_no, int $end', 'return_type': 'array'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_scripts'] = {
\'wp_scripts': {
\  'name': 'WP_Scripts',
\  'properties': {
\    '$base_url': {'initializer': '', 'type': ''},
\    '$content_url': {'initializer': '', 'type': ''},
\    '$default_version': {'initializer': '', 'type': ''},
\    '$in_footer': {'initializer': 'array', 'type': ''},
\    '$concat': {'initializer': '', 'type': ''},
\    '$concat_version': {'initializer': '', 'type': ''},
\    '$do_concat': {'initializer': 'false', 'type': ''},
\    '$print_html': {'initializer': '', 'type': ''},
\    '$print_code': {'initializer': '', 'type': ''},
\    '$ext_handles': {'initializer': '', 'type': ''},
\    '$ext_version': {'initializer': '', 'type': ''},
\    '$default_dirs': {'initializer': '', 'type': ''},
\    '$registered': {'initializer': 'array', 'type': 'array'},
\    '$queue': {'initializer': 'array', 'type': 'array'},
\    '$to_do': {'initializer': 'array', 'type': 'array'},
\    '$done': {'initializer': 'array', 'type': 'array'},
\    '$args': {'initializer': 'array', 'type': 'array'},
\    '$groups': {'initializer': 'array', 'type': 'array'},
\    '$group': {'initializer': '0', 'type': 'int'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'init': { 'signature': 'void', 'return_type': 'void'},
\    'print_scripts': { 'signature': 'mixed $handles, int $group', 'return_type': 'array'},
\    'print_scripts_l10n': { 'signature': ' $handle,  $echo', 'return_type': 'void'},
\    'print_extra_script': { 'signature': ' $handle,  $echo', 'return_type': 'void'},
\    'do_item': { 'signature': ' $handle,  $group', 'return_type': 'void'},
\    'localize': { 'signature': ' $handle,  $object_name,  $l10n', 'return_type': 'void'},
\    'set_group': { 'signature': ' $handle,  $recursion,  $group', 'return_type': 'void'},
\    'all_deps': { 'signature': ' $handles,  $recursion,  $group', 'return_type': 'void'},
\    'do_head_items': { 'signature': 'void', 'return_type': 'void'},
\    'do_footer_items': { 'signature': 'void', 'return_type': 'void'},
\    'in_default_dir': { 'signature': ' $src', 'return_type': 'void'},
\    'reset': { 'signature': 'void', 'return_type': 'void'},
\    'do_items': { 'signature': 'mixed $handles, mixed $group', 'return_type': 'array'},
\    'add': { 'signature': 'string $handle, string $src, array $deps, string $ver, mixed $args', 'return_type': 'bool'},
\    'add_data': { 'signature': 'string $handle, string $key, mixed $value', 'return_type': 'bool'},
\    'get_data': { 'signature': 'string $handle, string $key', 'return_type': 'mixed'},
\    'remove': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'enqueue': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'dequeue': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'query': { 'signature': 'string $handle, string $list', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_misc'] = {
\'simplepie_misc': {
\  'name': 'SimplePie_Misc',
\  'static_methods': {
\    'time_hms': { 'signature': ' $seconds', 'return_type': 'void'},
\    'absolutize_url': { 'signature': ' $relative,  $base', 'return_type': 'void'},
\    'get_element': { 'signature': 'string $realname, string $string', 'return_type': 'array'},
\    'element_implode': { 'signature': ' $element', 'return_type': 'void'},
\    'error': { 'signature': ' $message,  $level,  $file,  $line', 'return_type': 'void'},
\    'fix_protocol': { 'signature': ' $url,  $http', 'return_type': 'void'},
\    'parse_url': { 'signature': ' $url', 'return_type': 'void'},
\    'compress_parse_url': { 'signature': ' $scheme,  $authority,  $path,  $query,  $fragment', 'return_type': 'void'},
\    'normalize_url': { 'signature': ' $url', 'return_type': 'void'},
\    'percent_encoding_normalization': { 'signature': ' $match', 'return_type': 'void'},
\    'windows_1252_to_utf8': { 'signature': 'string $string', 'return_type': 'string'},
\    'change_encoding': { 'signature': 'string $data, string $input, string $output', 'return_type': 'string|boolean'},
\    'encoding': { 'signature': 'string $charset', 'return_type': 'string'},
\    'get_curl_version': { 'signature': 'void', 'return_type': 'void'},
\    'strip_comments': { 'signature': 'string $data', 'return_type': 'string'},
\    'parse_date': { 'signature': ' $dt', 'return_type': 'void'},
\    'entities_decode': { 'signature': 'string $data', 'return_type': 'string'},
\    'uncomment_rfc822': { 'signature': ' $string', 'return_type': 'string'},
\    'parse_mime': { 'signature': ' $mime', 'return_type': 'void'},
\    'atom_03_construct_type': { 'signature': ' $attribs', 'return_type': 'void'},
\    'atom_10_construct_type': { 'signature': ' $attribs', 'return_type': 'void'},
\    'atom_10_content_construct_type': { 'signature': ' $attribs', 'return_type': 'void'},
\    'is_isegment_nz_nc': { 'signature': ' $string', 'return_type': 'void'},
\    'space_seperated_tokens': { 'signature': ' $string', 'return_type': 'void'},
\    'codepoint_to_utf8': { 'signature': 'int $codepoint', 'return_type': 'string'},
\    'parse_str': { 'signature': 'string $str', 'return_type': 'array'},
\    'xml_encoding': { 'signature': 'string $data, \SimplePie_Registry $registry', 'return_type': 'array'},
\    'output_javascript': { 'signature': 'void', 'return_type': 'void'},
\    'get_build': { 'signature': 'void', 'return_type': 'void'},
\    'debug': { 'signature': ' $sp', 'return_type': 'void'},
\    'silence_errors': { 'signature': ' $num,  $str', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_http_ixr_client'] = {
\'wp_http_ixr_client': {
\  'name': 'WP_HTTP_IXR_Client',
\  'properties': {
\    '$server': {'initializer': '', 'type': ''},
\    '$port': {'initializer': '', 'type': ''},
\    '$path': {'initializer': '', 'type': ''},
\    '$useragent': {'initializer': '', 'type': ''},
\    '$response': {'initializer': '', 'type': ''},
\    '$message': {'initializer': 'false', 'type': ''},
\    '$debug': {'initializer': 'false', 'type': ''},
\    '$timeout': {'initializer': '', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\    '$error': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $server,  $path,  $port,  $timeout', 'return_type': 'void'},
\    'query': { 'signature': 'void', 'return_type': 'void'},
\    'IXR_Client': { 'signature': ' $server,  $path,  $port,  $timeout', 'return_type': 'void'},
\    'getResponse': { 'signature': 'void', 'return_type': 'void'},
\    'isError': { 'signature': 'void', 'return_type': 'void'},
\    'getErrorCode': { 'signature': 'void', 'return_type': 'void'},
\    'getErrorMessage': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_video_asf'] = {
\'getid3_asf': {
\  'name': 'getid3_asf',
\  'static_methods': {
\    'ASFCodecListObjectTypeLookup': { 'signature': ' $CodecListType', 'return_type': 'void'},
\    'KnownGUIDs': { 'signature': 'void', 'return_type': 'void'},
\    'GUIDname': { 'signature': ' $GUIDstring', 'return_type': 'void'},
\    'ASFIndexObjectIndexTypeLookup': { 'signature': ' $id', 'return_type': 'void'},
\    'GUIDtoBytestring': { 'signature': ' $GUIDstring', 'return_type': 'void'},
\    'BytestringToGUID': { 'signature': ' $Bytestring', 'return_type': 'void'},
\    'FILETIMEtoUNIXtime': { 'signature': ' $FILETIME,  $round', 'return_type': 'void'},
\    'WMpictureTypeLookup': { 'signature': ' $WMpictureType', 'return_type': 'void'},
\    'ASFmetadataLibraryObjectDataTypeLookup': { 'signature': ' $id', 'return_type': 'void'},
\    'TrimConvert': { 'signature': ' $string', 'return_type': 'void'},
\    'TrimTerm': { 'signature': ' $string', 'return_type': 'void'},
\  },
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': '\getID3 $getid3', 'return_type': 'void'},
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'ASF_HeaderExtensionObjectDataParse': { 'signature': ' $asf_header_extension_object_data,  $unhandled_sections', 'return_type': 'void'},
\    'ASF_WMpicture': { 'signature': ' $data', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_sniffer'] = {
\'simplepie_content_type_sniffer': {
\  'name': 'SimplePie_Content_Type_Sniffer',
\  'properties': {
\    '$file': {'initializer': '', 'type': '\SimplePie_File'},
\  },
\  'methods': {
\    '__construct': { 'signature': '\SimplePie_Content_Type_Sniffer $file', 'return_type': 'void'},
\    'get_type': { 'signature': 'void', 'return_type': 'string'},
\    'text_or_binary': { 'signature': 'void', 'return_type': 'string'},
\    'unknown': { 'signature': 'void', 'return_type': 'string'},
\    'image': { 'signature': 'void', 'return_type': 'string'},
\    'feed_or_html': { 'signature': 'void', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_getid3_lib'] = {
\'getid3_lib': {
\  'name': 'getid3_lib',
\  'static_methods': {
\    'PrintHexBytes': { 'signature': ' $string,  $hex,  $spaces,  $htmlencoding', 'return_type': 'void'},
\    'trunc': { 'signature': ' $floatnumber', 'return_type': 'void'},
\    'safe_inc': { 'signature': ' $variable,  $increment', 'return_type': 'void'},
\    'CastAsInt': { 'signature': ' $floatnum', 'return_type': 'void'},
\    'intValueSupported': { 'signature': ' $num', 'return_type': 'void'},
\    'DecimalizeFraction': { 'signature': ' $fraction', 'return_type': 'void'},
\    'DecimalBinary2Float': { 'signature': ' $binarynumerator', 'return_type': 'void'},
\    'NormalizeBinaryPoint': { 'signature': ' $binarypointnumber,  $maxbits', 'return_type': 'void'},
\    'Float2BinaryDecimal': { 'signature': ' $floatvalue', 'return_type': 'void'},
\    'Float2String': { 'signature': ' $floatvalue,  $bits', 'return_type': 'void'},
\    'LittleEndian2Float': { 'signature': ' $byteword', 'return_type': 'void'},
\    'BigEndian2Float': { 'signature': ' $byteword', 'return_type': 'void'},
\    'BigEndian2Int': { 'signature': ' $byteword,  $synchsafe,  $signed', 'return_type': 'void'},
\    'LittleEndian2Int': { 'signature': ' $byteword,  $signed', 'return_type': 'void'},
\    'BigEndian2Bin': { 'signature': ' $byteword', 'return_type': 'void'},
\    'BigEndian2String': { 'signature': ' $number,  $minbytes,  $synchsafe,  $signed', 'return_type': 'void'},
\    'Dec2Bin': { 'signature': ' $number', 'return_type': 'void'},
\    'Bin2Dec': { 'signature': ' $binstring,  $signed', 'return_type': 'void'},
\    'Bin2String': { 'signature': ' $binstring', 'return_type': 'void'},
\    'LittleEndian2String': { 'signature': ' $number,  $minbytes,  $synchsafe', 'return_type': 'void'},
\    'array_merge_clobber': { 'signature': ' $array1,  $array2', 'return_type': 'void'},
\    'array_merge_noclobber': { 'signature': ' $array1,  $array2', 'return_type': 'void'},
\    'ksort_recursive': { 'signature': ' $theArray', 'return_type': 'void'},
\    'fileextension': { 'signature': ' $filename,  $numextensions', 'return_type': 'void'},
\    'PlaytimeString': { 'signature': ' $seconds', 'return_type': 'void'},
\    'DateMac2Unix': { 'signature': ' $macdate', 'return_type': 'void'},
\    'FixedPoint8_8': { 'signature': ' $rawdata', 'return_type': 'void'},
\    'FixedPoint16_16': { 'signature': ' $rawdata', 'return_type': 'void'},
\    'FixedPoint2_30': { 'signature': ' $rawdata', 'return_type': 'void'},
\    'CreateDeepArray': { 'signature': ' $ArrayPath,  $Separator,  $Value', 'return_type': 'void'},
\    'array_max': { 'signature': ' $arraydata,  $returnkey', 'return_type': 'void'},
\    'array_min': { 'signature': ' $arraydata,  $returnkey', 'return_type': 'void'},
\    'XML2array': { 'signature': ' $XMLstring', 'return_type': 'void'},
\    'SimpleXMLelement2array': { 'signature': ' $XMLobject', 'return_type': 'void'},
\    'hash_data': { 'signature': ' $file,  $offset,  $end,  $algorithm', 'return_type': 'void'},
\    'CopyFileParts': { 'signature': ' $filename_source,  $filename_dest,  $offset,  $length', 'return_type': 'void'},
\    'iconv_fallback_int_utf8': { 'signature': ' $charval', 'return_type': 'void'},
\    'iconv_fallback_iso88591_utf8': { 'signature': ' $string,  $bom', 'return_type': 'void'},
\    'iconv_fallback_iso88591_utf16be': { 'signature': ' $string,  $bom', 'return_type': 'void'},
\    'iconv_fallback_iso88591_utf16le': { 'signature': ' $string,  $bom', 'return_type': 'void'},
\    'iconv_fallback_iso88591_utf16': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf8_iso88591': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf8_utf16be': { 'signature': ' $string,  $bom', 'return_type': 'void'},
\    'iconv_fallback_utf8_utf16le': { 'signature': ' $string,  $bom', 'return_type': 'void'},
\    'iconv_fallback_utf8_utf16': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf16be_utf8': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf16le_utf8': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf16be_iso88591': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf16le_iso88591': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf16_iso88591': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback_utf16_utf8': { 'signature': ' $string', 'return_type': 'void'},
\    'iconv_fallback': { 'signature': ' $in_charset,  $out_charset,  $string', 'return_type': 'void'},
\    'MultiByteCharString2HTML': { 'signature': ' $string,  $charset', 'return_type': 'void'},
\    'RGADnameLookup': { 'signature': ' $namecode', 'return_type': 'void'},
\    'RGADoriginatorLookup': { 'signature': ' $originatorcode', 'return_type': 'void'},
\    'RGADadjustmentLookup': { 'signature': ' $rawadjustment,  $signbit', 'return_type': 'void'},
\    'RGADgainString': { 'signature': ' $namecode,  $originatorcode,  $replaygain', 'return_type': 'void'},
\    'RGADamplitude2dB': { 'signature': ' $amplitude', 'return_type': 'void'},
\    'GetDataImageSize': { 'signature': ' $imgData,  $imageinfo', 'return_type': 'void'},
\    'ImageExtFromMime': { 'signature': ' $mime_type', 'return_type': 'void'},
\    'ImageTypesLookup': { 'signature': ' $imagetypeid', 'return_type': 'void'},
\    'CopyTagsToComments': { 'signature': ' $ThisFileInfo', 'return_type': 'void'},
\    'EmbeddedLookup': { 'signature': ' $key,  $begin,  $end,  $file,  $name', 'return_type': 'void'},
\    'IncludeDependency': { 'signature': ' $filename,  $sourcefile,  $DieOnFailure', 'return_type': 'void'},
\    'trimNullByte': { 'signature': ' $string', 'return_type': 'void'},
\    'getFileSizeSyscall': { 'signature': ' $path', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_styles'] = {
\'wp_styles': {
\  'name': 'WP_Styles',
\  'properties': {
\    '$base_url': {'initializer': '', 'type': ''},
\    '$content_url': {'initializer': '', 'type': ''},
\    '$default_version': {'initializer': '', 'type': ''},
\    '$text_direction': {'initializer': 'ltr', 'type': ''},
\    '$concat': {'initializer': '', 'type': ''},
\    '$concat_version': {'initializer': '', 'type': ''},
\    '$do_concat': {'initializer': 'false', 'type': ''},
\    '$print_html': {'initializer': '', 'type': ''},
\    '$print_code': {'initializer': '', 'type': ''},
\    '$default_dirs': {'initializer': '', 'type': ''},
\    '$registered': {'initializer': 'array', 'type': 'array'},
\    '$queue': {'initializer': 'array', 'type': 'array'},
\    '$to_do': {'initializer': 'array', 'type': 'array'},
\    '$done': {'initializer': 'array', 'type': 'array'},
\    '$args': {'initializer': 'array', 'type': 'array'},
\    '$groups': {'initializer': 'array', 'type': 'array'},
\    '$group': {'initializer': '0', 'type': 'int'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'do_item': { 'signature': ' $handle', 'return_type': 'void'},
\    'add_inline_style': { 'signature': ' $handle,  $code', 'return_type': 'void'},
\    'print_inline_style': { 'signature': ' $handle,  $echo', 'return_type': 'void'},
\    'all_deps': { 'signature': ' $handles,  $recursion,  $group', 'return_type': 'void'},
\    '_css_href': { 'signature': ' $src,  $ver,  $handle', 'return_type': 'void'},
\    'in_default_dir': { 'signature': ' $src', 'return_type': 'void'},
\    'do_footer_items': { 'signature': 'void', 'return_type': 'void'},
\    'reset': { 'signature': 'void', 'return_type': 'void'},
\    'do_items': { 'signature': 'mixed $handles, mixed $group', 'return_type': 'array'},
\    'add': { 'signature': 'string $handle, string $src, array $deps, string $ver, mixed $args', 'return_type': 'bool'},
\    'add_data': { 'signature': 'string $handle, string $key, mixed $value', 'return_type': 'bool'},
\    'get_data': { 'signature': 'string $handle, string $key', 'return_type': 'mixed'},
\    'remove': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'enqueue': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'dequeue': { 'signature': 'mixed $handles', 'return_type': 'void'},
\    'query': { 'signature': 'string $handle, string $list', 'return_type': 'bool'},
\    'set_group': { 'signature': 'string $handle, bool $recursion, mixed $group', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_tag_lyrics3'] = {
\'getid3_lyrics3': {
\  'name': 'getid3_lyrics3',
\  'properties': {
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'getLyrics3Data': { 'signature': ' $endoffset,  $version,  $length', 'return_type': 'void'},
\    'Lyrics3Timestamp2Seconds': { 'signature': ' $rawtimestamp', 'return_type': 'void'},
\    'Lyrics3LyricsTimestampParse': { 'signature': ' $Lyrics3data', 'return_type': 'void'},
\    'IntString2Bool': { 'signature': ' $char', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_locator'] = {
\'simplepie_locator': {
\  'name': 'SimplePie_Locator',
\  'properties': {
\    '$useragent': {'initializer': '', 'type': ''},
\    '$timeout': {'initializer': '', 'type': ''},
\    '$file': {'initializer': '', 'type': ''},
\    '$local': {'initializer': 'array', 'type': ''},
\    '$elsewhere': {'initializer': 'array', 'type': ''},
\    '$cached_entities': {'initializer': 'array', 'type': ''},
\    '$http_base': {'initializer': '', 'type': ''},
\    '$base': {'initializer': '', 'type': ''},
\    '$base_location': {'initializer': '0', 'type': ''},
\    '$checked_feeds': {'initializer': '0', 'type': ''},
\    '$max_checked_feeds': {'initializer': '10', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': '\SimplePie_File $file,  $timeout,  $useragent,  $max_checked_feeds', 'return_type': 'void'},
\    'set_registry': { 'signature': '\SimplePie_Registry $registry', 'return_type': 'void'},
\    'find': { 'signature': ' $type,  $working', 'return_type': 'void'},
\    'is_feed': { 'signature': ' $file', 'return_type': 'void'},
\    'get_base': { 'signature': 'void', 'return_type': 'void'},
\    'autodiscovery': { 'signature': 'void', 'return_type': 'void'},
\    'get_links': { 'signature': 'void', 'return_type': 'void'},
\    'extension': { 'signature': ' $array', 'return_type': 'void'},
\    'body': { 'signature': ' $array', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_caption'] = {
\'simplepie_caption': {
\  'name': 'SimplePie_Caption',
\  'properties': {
\    '$type': {'initializer': '', 'type': 'string'},
\    '$lang': {'initializer': '', 'type': 'string'},
\    '$startTime': {'initializer': '', 'type': 'string'},
\    '$endTime': {'initializer': '', 'type': 'string'},
\    '$text': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $type,  $lang,  $startTime,  $endTime,  $text', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_endtime': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_language': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_starttime': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_text': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_type': { 'signature': 'void', 'return_type': 'string|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_phpass'] = {
\'passwordhash': {
\  'name': 'PasswordHash',
\  'properties': {
\    '$itoa64': {'initializer': '', 'type': ''},
\    '$iteration_count_log2': {'initializer': '', 'type': ''},
\    '$portable_hashes': {'initializer': '', 'type': ''},
\    '$random_state': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'PasswordHash': { 'signature': ' $iteration_count_log2,  $portable_hashes', 'return_type': 'void'},
\    'get_random_bytes': { 'signature': ' $count', 'return_type': 'void'},
\    'encode64': { 'signature': ' $input,  $count', 'return_type': 'void'},
\    'gensalt_private': { 'signature': ' $input', 'return_type': 'void'},
\    'crypt_private': { 'signature': ' $password,  $setting', 'return_type': 'void'},
\    'gensalt_extended': { 'signature': ' $input', 'return_type': 'void'},
\    'gensalt_blowfish': { 'signature': ' $input', 'return_type': 'void'},
\    'HashPassword': { 'signature': ' $password', 'return_type': 'void'},
\    'CheckPassword': { 'signature': ' $password,  $stored_hash', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_mo'] = {
\'mo': {
\  'name': 'MO',
\  'properties': {
\    '$_nplurals': {'initializer': '2', 'type': ''},
\    '$entries': {'initializer': 'array', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'import_from_file': { 'signature': 'string $filename', 'return_type': 'void'},
\    'export_to_file': { 'signature': ' $filename', 'return_type': 'void'},
\    'export': { 'signature': 'void', 'return_type': 'void'},
\    'is_entry_good_for_export': { 'signature': ' $entry', 'return_type': 'void'},
\    'export_to_file_handle': { 'signature': ' $fh', 'return_type': 'void'},
\    'export_original': { 'signature': ' $entry', 'return_type': 'void'},
\    'export_translations': { 'signature': ' $entry', 'return_type': 'void'},
\    'export_headers': { 'signature': 'void', 'return_type': 'void'},
\    'get_byteorder': { 'signature': ' $magic', 'return_type': 'void'},
\    'import_from_reader': { 'signature': ' $reader', 'return_type': 'void'},
\    'make_entry': { 'signature': 'string $original, string $translation', 'return_type': 'void'},
\    'select_plural_form': { 'signature': ' $count', 'return_type': 'void'},
\    'get_plural_forms_count': { 'signature': 'void', 'return_type': 'void'},
\    'gettext_select_plural_form': { 'signature': ' $count', 'return_type': 'void'},
\    'nplurals_and_expression_from_header': { 'signature': ' $header', 'return_type': 'void'},
\    'make_plural_form_function': { 'signature': ' $nplurals,  $expression', 'return_type': 'void'},
\    'parenthesize_plural_exression': { 'signature': 'string $expression', 'return_type': 'string'},
\    'make_headers': { 'signature': ' $translation', 'return_type': 'void'},
\    'set_header': { 'signature': 'string $header, string $value', 'return_type': 'void'},
\    'add_entry': { 'signature': ' $entry', 'return_type': 'bool'},
\    'add_entry_or_merge': { 'signature': ' $entry', 'return_type': 'void'},
\    'set_headers': { 'signature': ' $headers', 'return_type': 'void'},
\    'get_header': { 'signature': ' $header', 'return_type': 'void'},
\    'translate_entry': { 'signature': ' $entry', 'return_type': 'void'},
\    'translate': { 'signature': ' $singular,  $context', 'return_type': 'void'},
\    'translate_plural': { 'signature': ' $singular,  $plural,  $count,  $context', 'return_type': 'void'},
\    'merge_with': { 'signature': ' $other', 'return_type': 'void'},
\    'merge_originals_with': { 'signature': ' $other', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_core'] = {
\'simplepie_core': {
\  'name': 'SimplePie_Core',
\  'static_methods': {
\    'sort_items': { 'signature': '\SimplePie $a, \SimplePie $b', 'return_type': 'boolean'},
\    'merge_items': { 'signature': 'array $urls, int $start, int $end, int $limit', 'return_type': 'array'},
\  },
\  'properties': {
\    '$data': {'initializer': 'array', 'type': 'array'},
\    '$error': {'initializer': '', 'type': 'mixed'},
\    '$sanitize': {'initializer': '', 'type': 'object'},
\    '$useragent': {'initializer': 'SIMPLEPIE_USERAGENT', 'type': 'string'},
\    '$feed_url': {'initializer': '', 'type': 'string'},
\    '$file': {'initializer': '', 'type': 'object'},
\    '$raw_data': {'initializer': '', 'type': 'string'},
\    '$timeout': {'initializer': '10', 'type': 'int'},
\    '$force_fsockopen': {'initializer': 'false', 'type': 'bool'},
\    '$force_feed': {'initializer': 'false', 'type': 'bool'},
\    '$cache': {'initializer': 'true', 'type': 'bool'},
\    '$cache_duration': {'initializer': '3600', 'type': 'int'},
\    '$autodiscovery_cache_duration': {'initializer': '604800', 'type': 'int'},
\    '$cache_location': {'initializer': './cache', 'type': 'string'},
\    '$cache_name_function': {'initializer': 'md5', 'type': 'string'},
\    '$order_by_date': {'initializer': 'true', 'type': 'bool'},
\    '$input_encoding': {'initializer': 'false', 'type': 'mixed'},
\    '$autodiscovery': {'initializer': 'SIMPLEPIE_LOCATOR_ALL', 'type': 'int'},
\    '$registry': {'initializer': '', 'type': '\SimplePie_Registry'},
\    '$max_checked_feeds': {'initializer': '10', 'type': 'int'},
\    '$all_discovered_feeds': {'initializer': 'array', 'type': 'array'},
\    '$image_handler': {'initializer': '', 'type': 'string'},
\    '$multifeed_url': {'initializer': 'array', 'type': 'array'},
\    '$multifeed_objects': {'initializer': 'array', 'type': 'array'},
\    '$config_settings': {'initializer': 'null', 'type': 'array'},
\    '$item_limit': {'initializer': '0', 'type': 'integer'},
\    '$strip_attributes': {'initializer': 'array', 'type': 'array'},
\    '$strip_htmltags': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'void'},
\    '__destruct': { 'signature': 'void', 'return_type': 'void'},
\    'force_feed': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'set_feed_url': { 'signature': 'string|array $url', 'return_type': 'void'},
\    'set_file': { 'signature': ' $file', 'return_type': 'bool'},
\    'set_raw_data': { 'signature': 'string $data', 'return_type': 'void'},
\    'set_timeout': { 'signature': 'int $timeout', 'return_type': 'void'},
\    'force_fsockopen': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'enable_cache': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'set_cache_duration': { 'signature': 'int $seconds', 'return_type': 'void'},
\    'set_autodiscovery_cache_duration': { 'signature': 'int $seconds', 'return_type': 'void'},
\    'set_cache_location': { 'signature': 'string $location', 'return_type': 'void'},
\    'enable_order_by_date': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'set_input_encoding': { 'signature': 'string $encoding', 'return_type': 'void'},
\    'set_autodiscovery_level': { 'signature': 'int $level', 'return_type': 'void'},
\    'get_registry': { 'signature': 'void', 'return_type': '\SimplePie_Registry'},
\    'set_cache_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_locator_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_parser_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_file_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_sanitize_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_item_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_author_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_category_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_enclosure_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_caption_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_copyright_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_credit_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_rating_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_restriction_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_content_type_sniffer_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_source_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_useragent': { 'signature': 'string $ua', 'return_type': 'void'},
\    'set_cache_name_function': { 'signature': 'mixed $function', 'return_type': 'void'},
\    'set_stupidly_fast': { 'signature': 'bool $set', 'return_type': 'void'},
\    'set_max_checked_feeds': { 'signature': 'int $max', 'return_type': 'void'},
\    'remove_div': { 'signature': ' $enable', 'return_type': 'void'},
\    'strip_htmltags': { 'signature': ' $tags,  $encode', 'return_type': 'void'},
\    'encode_instead_of_strip': { 'signature': ' $enable', 'return_type': 'void'},
\    'strip_attributes': { 'signature': ' $attribs', 'return_type': 'void'},
\    'set_output_encoding': { 'signature': 'string $encoding', 'return_type': 'void'},
\    'strip_comments': { 'signature': ' $strip', 'return_type': 'void'},
\    'set_url_replacements': { 'signature': 'array|null $element_attribute', 'return_type': 'void'},
\    'set_image_handler': { 'signature': '\str $page, \str $qs', 'return_type': 'void'},
\    'set_item_limit': { 'signature': 'integer $limit', 'return_type': 'void'},
\    'init': { 'signature': 'void', 'return_type': 'boolean'},
\    'error': { 'signature': 'void', 'return_type': 'string|array'},
\    'get_raw_data': { 'signature': 'void', 'return_type': 'string|boolean'},
\    'get_encoding': { 'signature': 'void', 'return_type': 'string'},
\    'handle_content_type': { 'signature': 'string $mime', 'return_type': 'void'},
\    'get_type': { 'signature': 'void', 'return_type': 'int'},
\    'subscribe_url': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_feed_tags': { 'signature': 'string $namespace, string $tag', 'return_type': 'array'},
\    'get_channel_tags': { 'signature': 'string $namespace, string $tag', 'return_type': 'array'},
\    'get_image_tags': { 'signature': 'string $namespace, string $tag', 'return_type': 'array'},
\    'get_base': { 'signature': 'array $element', 'return_type': 'string'},
\    'sanitize': { 'signature': 'string $data, int $type, string $base', 'return_type': 'string'},
\    'get_title': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_category': { 'signature': 'int $key', 'return_type': '\SimplePie_Category|null'},
\    'get_categories': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_author': { 'signature': 'int $key', 'return_type': '\SimplePie_Author|null'},
\    'get_authors': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_contributor': { 'signature': 'int $key', 'return_type': '\SimplePie_Author|null'},
\    'get_contributors': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_link': { 'signature': 'int $key, string $rel', 'return_type': 'string|null'},
\    'get_links': { 'signature': 'string $rel', 'return_type': 'array|null'},
\    'get_all_discovered_feeds': { 'signature': 'void', 'return_type': 'void'},
\    'get_description': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_copyright': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_language': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_latitude': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_longitude': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_title': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_url': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_link': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_width': { 'signature': 'void', 'return_type': 'int|float|null'},
\    'get_image_height': { 'signature': 'void', 'return_type': 'int|float|null'},
\    'get_item_quantity': { 'signature': 'int $max', 'return_type': 'int'},
\    'get_item': { 'signature': 'int $key', 'return_type': '\SimplePie_Item|null'},
\    'get_items': { 'signature': 'int $start, int $end', 'return_type': 'array|null'},
\    'set_favicon_handler': { 'signature': ' $page,  $qs', 'return_type': 'void'},
\    'get_favicon': { 'signature': 'void', 'return_type': 'void'},
\    '__call': { 'signature': 'string $method, array $args', 'return_type': 'mixed'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_entry'] = {
\'translation_entry': {
\  'name': 'Translation_Entry',
\  'properties': {
\    '$is_plural': {'initializer': 'false', 'type': 'boolean'},
\    '$context': {'initializer': 'null', 'type': ''},
\    '$singular': {'initializer': 'null', 'type': ''},
\    '$plural': {'initializer': 'null', 'type': ''},
\    '$translations': {'initializer': 'array', 'type': ''},
\    '$translator_comments': {'initializer': '', 'type': ''},
\    '$extracted_comments': {'initializer': '', 'type': ''},
\    '$references': {'initializer': 'array', 'type': ''},
\    '$flags': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'Translation_Entry': { 'signature': 'array $args', 'return_type': 'void'},
\    'key': { 'signature': 'void', 'return_type': 'string|bool'},
\    'merge_with': { 'signature': ' $other', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_inline'] = {
\'text_diff_renderer_inline': {
\  'name': 'Text_Diff_Renderer_inline',
\  'properties': {
\    '$_leading_context_lines': {'initializer': '10000', 'type': 'integer'},
\    '$_trailing_context_lines': {'initializer': '10000', 'type': 'integer'},
\    '$_ins_prefix': {'initializer': '<ins>', 'type': 'string'},
\    '$_ins_suffix': {'initializer': '</ins>', 'type': 'string'},
\    '$_del_prefix': {'initializer': '<del>', 'type': 'string'},
\    '$_del_suffix': {'initializer': '</del>', 'type': 'string'},
\    '$_block_header': {'initializer': '', 'type': 'string'},
\    '$_split_characters': {'initializer': 'false', 'type': 'boolean'},
\    '$_split_level': {'initializer': 'lines', 'type': 'string'},
\  },
\  'methods': {
\    '_blockHeader': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen', 'return_type': 'void'},
\    '_startBlock': { 'signature': ' $header', 'return_type': 'void'},
\    '_lines': { 'signature': ' $lines,  $prefix,  $encode', 'return_type': 'void'},
\    '_added': { 'signature': ' $lines', 'return_type': 'void'},
\    '_deleted': { 'signature': ' $lines,  $words', 'return_type': 'void'},
\    '_changed': { 'signature': ' $orig,  $final', 'return_type': 'void'},
\    '_splitOnWords': { 'signature': ' $string,  $newlineEscape', 'return_type': 'void'},
\    '_encode': { 'signature': ' $string', 'return_type': 'void'},
\    'Text_Diff_Renderer': { 'signature': ' $params', 'return_type': 'void'},
\    'getParams': { 'signature': 'void', 'return_type': 'array'},
\    'render': { 'signature': '\Text_Diff $diff', 'return_type': 'string'},
\    '_block': { 'signature': ' $xbeg,  $xlen,  $ybeg,  $ylen,  $edits', 'return_type': 'void'},
\    '_startDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_endDiff': { 'signature': 'void', 'return_type': 'void'},
\    '_endBlock': { 'signature': 'void', 'return_type': 'void'},
\    '_context': { 'signature': ' $lines', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_item'] = {
\'simplepie_item': {
\  'name': 'SimplePie_Item',
\  'properties': {
\    '$feed': {'initializer': '', 'type': '\SimplePie'},
\    '$data': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': '\SimplePie $feed, array $data', 'return_type': 'void'},
\    'set_registry': { 'signature': '\SimplePie_Registry $registry', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    '__destruct': { 'signature': 'void', 'return_type': 'void'},
\    'get_item_tags': { 'signature': 'string $namespace, string $tag', 'return_type': 'array'},
\    'get_base': { 'signature': 'array $element', 'return_type': 'string'},
\    'sanitize': { 'signature': 'string $data, int $type, string $base', 'return_type': 'string'},
\    'get_feed': { 'signature': 'void', 'return_type': '\SimplePie'},
\    'get_id': { 'signature': 'boolean $hash', 'return_type': 'string'},
\    'get_title': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_description': { 'signature': 'boolean $description_only', 'return_type': 'string|null'},
\    'get_content': { 'signature': 'boolean $content_only', 'return_type': 'string|null'},
\    'get_category': { 'signature': 'int $key', 'return_type': '\SimplePie_Category|null'},
\    'get_categories': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_author': { 'signature': 'int $key', 'return_type': '\SimplePie_Author|null'},
\    'get_contributor': { 'signature': 'int $key', 'return_type': '\SimplePie_Author|null'},
\    'get_contributors': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_authors': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_copyright': { 'signature': 'void', 'return_type': 'string'},
\    'get_date': { 'signature': 'string $date_format', 'return_type': 'int|string|null'},
\    'get_updated_date': { 'signature': 'string $date_format', 'return_type': 'int|string|null'},
\    'get_local_date': { 'signature': 'string $date_format', 'return_type': 'int|string|null'},
\    'get_gmdate': { 'signature': 'string $date_format', 'return_type': 'int|string|null'},
\    'get_updated_gmdate': { 'signature': 'string $date_format', 'return_type': 'int|string|null'},
\    'get_permalink': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_link': { 'signature': 'int $key, string $rel', 'return_type': 'string|null'},
\    'get_links': { 'signature': 'string $rel', 'return_type': 'array|null'},
\    'get_enclosure': { 'signature': 'int $key,  $prefer', 'return_type': '\SimplePie_Enclosure|null'},
\    'get_enclosures': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_latitude': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_longitude': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_source': { 'signature': 'void', 'return_type': '\SimplePie_Source|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_date'] = {
\'wp_date_query': {
\  'name': 'WP_Date_Query',
\  'properties': {
\    '$queries': {'initializer': 'array', 'type': 'array'},
\    '$relation': {'initializer': 'AND', 'type': 'string'},
\    '$column': {'initializer': 'post_date', 'type': 'string'},
\    '$compare': {'initializer': '=', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'array $date_query, array $default_column', 'return_type': 'void'},
\    'get_compare': { 'signature': 'array $query', 'return_type': 'string'},
\    'validate_column': { 'signature': 'string $column', 'return_type': 'string'},
\    'get_sql': { 'signature': 'void', 'return_type': 'string'},
\    'build_value': { 'signature': 'string $compare, string|array $value', 'return_type': 'string|int|false'},
\    'build_mysql_datetime': { 'signature': 'string|array $datetime,  $default_to_max', 'return_type': 'string|false'},
\    'build_time_query': { 'signature': 'string $column, string $compare, int|null $hour, int|null $minute, int|null $second', 'return_type': 'string|false'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_getid3'] = {
\'getid3': {
\  'name': 'getID3',
\  'properties': {
\    '$encoding': {'initializer': 'UTF-8', 'type': ''},
\    '$encoding_id3v1': {'initializer': 'ISO-8859-1', 'type': ''},
\    '$option_tag_id3v1': {'initializer': 'true', 'type': ''},
\    '$option_tag_id3v2': {'initializer': 'true', 'type': ''},
\    '$option_tag_lyrics3': {'initializer': 'true', 'type': ''},
\    '$option_tag_apetag': {'initializer': 'true', 'type': ''},
\    '$option_tags_process': {'initializer': 'true', 'type': ''},
\    '$option_tags_html': {'initializer': 'true', 'type': ''},
\    '$option_extra_info': {'initializer': 'true', 'type': ''},
\    '$option_save_attachments': {'initializer': 'true', 'type': ''},
\    '$option_md5_data': {'initializer': 'false', 'type': ''},
\    '$option_md5_data_source': {'initializer': 'false', 'type': ''},
\    '$option_sha1_data': {'initializer': 'false', 'type': ''},
\    '$option_max_2gb_check': {'initializer': 'null', 'type': ''},
\    '$option_fread_buffer_size': {'initializer': '32768', 'type': ''},
\    '$filename': {'initializer': '', 'type': ''},
\    '$fp': {'initializer': '', 'type': ''},
\    '$info': {'initializer': '', 'type': ''},
\    '$tempdir': {'initializer': 'GETID3_TEMP_DIR', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'version': { 'signature': 'void', 'return_type': 'void'},
\    'fread_buffer_size': { 'signature': 'void', 'return_type': 'void'},
\    'setOption': { 'signature': ' $optArray', 'return_type': 'void'},
\    'openfile': { 'signature': ' $filename', 'return_type': 'void'},
\    'analyze': { 'signature': ' $filename', 'return_type': 'void'},
\    'error': { 'signature': ' $message', 'return_type': 'void'},
\    'warning': { 'signature': ' $message', 'return_type': 'void'},
\    'GetFileFormatArray': { 'signature': 'void', 'return_type': 'void'},
\    'GetFileFormat': { 'signature': ' $filedata,  $filename', 'return_type': 'void'},
\    'CharConvert': { 'signature': ' $array,  $encoding', 'return_type': 'void'},
\    'HandleAllTags': { 'signature': 'void', 'return_type': 'void'},
\    'getHashdata': { 'signature': ' $algorithm', 'return_type': 'void'},
\    'ChannelsBitratePlaytimeCalculations': { 'signature': 'void', 'return_type': 'void'},
\    'CalculateCompressionRatioVideo': { 'signature': 'void', 'return_type': 'void'},
\    'CalculateCompressionRatioAudio': { 'signature': 'void', 'return_type': 'void'},
\    'CalculateReplayGain': { 'signature': 'void', 'return_type': 'void'},
\    'ProcessAudioStreams': { 'signature': 'void', 'return_type': 'void'},
\    'getid3_tempnam': { 'signature': 'void', 'return_type': 'void'},
\    'include_module': { 'signature': ' $name', 'return_type': 'void'},
\  },
\},
\'getid3_handler': {
\  'name': 'getid3_handler',
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\'getid3_exception': {
\  'name': 'getid3_exception',
\  'properties': {
\    '$message': {'initializer': '', 'type': ''},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_iri'] = {
\'simplepie_iri': {
\  'name': 'SimplePie_IRI',
\  'static_methods': {
\    'absolutize': { 'signature': '\IRI|string $base, \IRI|string $relative', 'return_type': '\IRI|false'},
\  },
\  'properties': {
\  },
\  'methods': {
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    '__set': { 'signature': 'string $name, mixed $value', 'return_type': 'void'},
\    '__get': { 'signature': 'string $name', 'return_type': 'mixed'},
\    '__isset': { 'signature': 'string $name', 'return_type': 'bool'},
\    '__unset': { 'signature': 'string $name', 'return_type': 'void'},
\    '__construct': { 'signature': 'string $iri', 'return_type': 'void'},
\    'is_valid': { 'signature': 'void', 'return_type': 'bool'},
\    'set_iri': { 'signature': 'string $iri', 'return_type': 'bool'},
\    'set_scheme': { 'signature': 'string $scheme', 'return_type': 'bool'},
\    'set_authority': { 'signature': 'string $authority', 'return_type': 'bool'},
\    'set_userinfo': { 'signature': 'string $iuserinfo', 'return_type': 'bool'},
\    'set_host': { 'signature': 'string $ihost', 'return_type': 'bool'},
\    'set_port': { 'signature': 'string $port', 'return_type': 'bool'},
\    'set_path': { 'signature': 'string $ipath', 'return_type': 'bool'},
\    'set_query': { 'signature': 'string $iquery', 'return_type': 'bool'},
\    'set_fragment': { 'signature': 'string $ifragment', 'return_type': 'bool'},
\    'to_uri': { 'signature': ' $string', 'return_type': 'string'},
\    'get_iri': { 'signature': 'void', 'return_type': 'string'},
\    'get_uri': { 'signature': 'void', 'return_type': 'string'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_json'] = {
\'services_json': {
\  'name': 'Services_JSON',
\  'properties': {
\    '$_mb_strlen': {'initializer': 'false', 'type': ''},
\    '$_mb_substr': {'initializer': 'false', 'type': ''},
\    '$_mb_convert_encoding': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    'Services_JSON': { 'signature': 'int $use', 'return_type': 'void'},
\    'utf162utf8': { 'signature': 'string $utf16', 'return_type': 'string'},
\    'utf82utf16': { 'signature': 'string $utf8', 'return_type': 'string'},
\    'encode': { 'signature': 'mixed $var', 'return_type': 'mixed'},
\    'encodeUnsafe': { 'signature': 'mixed $var', 'return_type': 'mixed'},
\    '_encode': { 'signature': 'mixed $var', 'return_type': 'mixed'},
\    'name_value': { 'signature': 'string $name, mixed $value', 'return_type': 'string'},
\    'reduce_string': { 'signature': 'mixed $str', 'return_type': 'string'},
\    'decode': { 'signature': 'string $str', 'return_type': 'mixed'},
\    'isError': { 'signature': ' $data,  $code', 'return_type': 'void'},
\    'strlen8': { 'signature': ' $str', 'return_type': 'integer'},
\    'substr8': { 'signature': ' $string,  $start,  $length', 'return_type': 'integer'},
\  },
\},
\'services_json_error': {
\  'name': 'Services_JSON_Error',
\  'methods': {
\    'Services_JSON_Error': { 'signature': ' $message,  $code,  $mode,  $options,  $userinfo', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_logger'] = {
\'moxiecode_logger': {
\  'name': 'Moxiecode_Logger',
\  'properties': {
\    '$_path': {'initializer': '', 'type': ''},
\    '$_filename': {'initializer': '', 'type': ''},
\    '$_maxSize': {'initializer': '', 'type': ''},
\    '$_maxFiles': {'initializer': '', 'type': ''},
\    '$_maxSizeBytes': {'initializer': '', 'type': ''},
\    '$_level': {'initializer': '', 'type': ''},
\    '$_format': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'Moxiecode_Logger': { 'signature': 'void', 'return_type': 'void'},
\    'setLevel': { 'signature': 'int $level', 'return_type': 'void'},
\    'getLevel': { 'signature': 'void', 'return_type': 'int'},
\    'setPath': { 'signature': ' $path', 'return_type': 'void'},
\    'getPath': { 'signature': 'void', 'return_type': 'void'},
\    'setFileName': { 'signature': ' $file_name', 'return_type': 'void'},
\    'getFileName': { 'signature': 'void', 'return_type': 'void'},
\    'setFormat': { 'signature': ' $format', 'return_type': 'void'},
\    'getFormat': { 'signature': 'void', 'return_type': 'void'},
\    'setMaxSize': { 'signature': ' $size', 'return_type': 'void'},
\    'getMaxSize': { 'signature': 'void', 'return_type': 'void'},
\    'setMaxFiles': { 'signature': ' $max_files', 'return_type': 'void'},
\    'getMaxFiles': { 'signature': 'void', 'return_type': 'void'},
\    'debug': { 'signature': ' $msg', 'return_type': 'void'},
\    'info': { 'signature': ' $msg', 'return_type': 'void'},
\    'warn': { 'signature': ' $msg', 'return_type': 'void'},
\    'error': { 'signature': ' $msg', 'return_type': 'void'},
\    'fatal': { 'signature': ' $msg', 'return_type': 'void'},
\    'isDebugEnabled': { 'signature': 'void', 'return_type': 'void'},
\    'isInfoEnabled': { 'signature': 'void', 'return_type': 'void'},
\    'isWarnEnabled': { 'signature': 'void', 'return_type': 'void'},
\    'isErrorEnabled': { 'signature': 'void', 'return_type': 'void'},
\    'isFatalEnabled': { 'signature': 'void', 'return_type': 'void'},
\    '_logMsg': { 'signature': ' $level,  $message', 'return_type': 'void'},
\    'toOSPath': { 'signature': 'String $path', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_walker'] = {
\'walker': {
\  'name': 'Walker',
\  'properties': {
\    '$tree_type': {'initializer': '', 'type': 'string'},
\    '$db_fields': {'initializer': '', 'type': 'array'},
\    '$max_pages': {'initializer': '1', 'type': 'int'},
\  },
\  'methods': {
\    'start_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'end_lvl': { 'signature': 'string $output, int $depth, array $args', 'return_type': 'void'},
\    'start_el': { 'signature': 'string $output, object $object, int $depth, array $args, int $current_object_id', 'return_type': 'void'},
\    'end_el': { 'signature': 'string $output, object $object, int $depth, array $args', 'return_type': 'void'},
\    'display_element': { 'signature': 'object $element, array $children_elements, int $max_depth, int $depth, array $args, string $output', 'return_type': 'null'},
\    'walk': { 'signature': 'array $elements, int $max_depth', 'return_type': 'string'},
\    'paged_walk': { 'signature': ' $elements, int $max_depth, int $page_num,  $per_page', 'return_type': 'string'},
\    'get_number_of_root_elements': { 'signature': ' $elements', 'return_type': 'void'},
\    'unset_children': { 'signature': ' $e,  $children_elements', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_pspell'] = {
\'pspell': {
\  'name': 'PSpell',
\  'methods': {
\    'checkWords': { 'signature': '\{String} $lang, \{Array} $words', 'return_type': '\{Array}'},
\    'getSuggestions': { 'signature': '\{String} $lang, \{String} $word', 'return_type': '\{Array}'},
\    '_getPLink': { 'signature': ' $lang', 'return_type': 'void'},
\    'SpellChecker': { 'signature': 'mixed $config', 'return_type': 'void'},
\    'loopback': { 'signature': 'void', 'return_type': '\{Array}'},
\    'throwError': { 'signature': '\{String} $str', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_parser'] = {
\'simplepie_xml_declaration_parser': {
\  'name': 'SimplePie_XML_Declaration_Parser',
\  'properties': {
\    '$version': {'initializer': '1.0', 'type': 'string'},
\    '$encoding': {'initializer': 'UTF-8', 'type': 'string'},
\    '$standalone': {'initializer': 'false', 'type': 'bool'},
\    '$state': {'initializer': 'before_version_name', 'type': 'string'},
\    '$data': {'initializer': '', 'type': 'string'},
\    '$data_length': {'initializer': '0', 'type': 'int'},
\    '$position': {'initializer': '0', 'type': 'int'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $data', 'return_type': 'void'},
\    'parse': { 'signature': 'void', 'return_type': 'bool'},
\    'has_data': { 'signature': 'void', 'return_type': 'bool'},
\    'skip_whitespace': { 'signature': 'void', 'return_type': 'int'},
\    'get_value': { 'signature': 'void', 'return_type': 'void'},
\    'before_version_name': { 'signature': 'void', 'return_type': 'void'},
\    'version_name': { 'signature': 'void', 'return_type': 'void'},
\    'version_equals': { 'signature': 'void', 'return_type': 'void'},
\    'version_value': { 'signature': 'void', 'return_type': 'void'},
\    'encoding_name': { 'signature': 'void', 'return_type': 'void'},
\    'encoding_equals': { 'signature': 'void', 'return_type': 'void'},
\    'encoding_value': { 'signature': 'void', 'return_type': 'void'},
\    'standalone_name': { 'signature': 'void', 'return_type': 'void'},
\    'standalone_equals': { 'signature': 'void', 'return_type': 'void'},
\    'standalone_value': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_po'] = {
\'po': {
\  'name': 'PO',
\  'properties': {
\    '$comments_before_headers': {'initializer': '', 'type': ''},
\    '$entries': {'initializer': 'array', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'export_headers': { 'signature': 'void', 'return_type': 'string'},
\    'export_entries': { 'signature': 'void', 'return_type': 'string'},
\    'export': { 'signature': 'bool $include_headers', 'return_type': 'string'},
\    'export_to_file': { 'signature': 'string $filename, bool $include_headers', 'return_type': 'bool'},
\    'set_comment_before_headers': { 'signature': ' $text', 'return_type': 'void'},
\    'poify': { 'signature': 'string $string', 'return_type': 'string'},
\    'unpoify': { 'signature': 'string $string', 'return_type': 'string'},
\    'prepend_each_line': { 'signature': 'string $string, string $with', 'return_type': 'void'},
\    'comment_block': { 'signature': 'string $text, string $char', 'return_type': 'void'},
\    'export_entry': { 'signature': ' $entry', 'return_type': 'string|bool'},
\    'import_from_file': { 'signature': ' $filename', 'return_type': 'void'},
\    'read_entry': { 'signature': ' $f,  $lineno', 'return_type': 'void'},
\    'read_line': { 'signature': ' $f,  $action', 'return_type': 'void'},
\    'add_comment_to_entry': { 'signature': ' $entry,  $po_comment_line', 'return_type': 'void'},
\    'trim_quotes': { 'signature': ' $s', 'return_type': 'void'},
\    'gettext_select_plural_form': { 'signature': ' $count', 'return_type': 'void'},
\    'nplurals_and_expression_from_header': { 'signature': ' $header', 'return_type': 'void'},
\    'make_plural_form_function': { 'signature': ' $nplurals,  $expression', 'return_type': 'void'},
\    'parenthesize_plural_exression': { 'signature': 'string $expression', 'return_type': 'string'},
\    'make_headers': { 'signature': ' $translation', 'return_type': 'void'},
\    'set_header': { 'signature': 'string $header, string $value', 'return_type': 'void'},
\    'add_entry': { 'signature': ' $entry', 'return_type': 'bool'},
\    'add_entry_or_merge': { 'signature': ' $entry', 'return_type': 'void'},
\    'set_headers': { 'signature': ' $headers', 'return_type': 'void'},
\    'get_header': { 'signature': ' $header', 'return_type': 'void'},
\    'translate_entry': { 'signature': ' $entry', 'return_type': 'void'},
\    'translate': { 'signature': ' $singular,  $context', 'return_type': 'void'},
\    'select_plural_form': { 'signature': 'integer $count', 'return_type': 'void'},
\    'get_plural_forms_count': { 'signature': 'void', 'return_type': 'void'},
\    'translate_plural': { 'signature': ' $singular,  $plural,  $count,  $context', 'return_type': 'void'},
\    'merge_with': { 'signature': ' $other', 'return_type': 'void'},
\    'merge_originals_with': { 'signature': ' $other', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_meta'] = {
\'wp_meta_query': {
\  'name': 'WP_Meta_Query',
\  'properties': {
\    '$queries': {'initializer': 'array', 'type': 'array'},
\    '$relation': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'array $meta_query', 'return_type': 'void'},
\    'parse_query_vars': { 'signature': 'array $qv', 'return_type': 'void'},
\    'get_cast_for_type': { 'signature': 'string $type', 'return_type': 'string'},
\    'get_sql': { 'signature': 'string $type, string $primary_table, string $primary_id_column, object $context', 'return_type': '\array('},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_http'] = {
\'wp_http': {
\  'name': 'WP_Http',
\  'static_methods': {
\    'processResponse': { 'signature': 'string $strResponse', 'return_type': 'array'},
\    'processHeaders': { 'signature': 'string|array $headers, string $url', 'return_type': 'array'},
\    'buildCookieHeader': { 'signature': 'array $r', 'return_type': 'void'},
\    'chunkTransferDecode': { 'signature': 'string $body', 'return_type': 'string'},
\    'make_absolute_url': { 'signature': ' $maybe_relative_path,  $url', 'return_type': 'void'},
\    'handle_redirects': { 'signature': 'string $url, array $args, array $response', 'return_type': 'false|object'},
\    'is_ip_address': { 'signature': 'string $maybe_ip', 'return_type': 'integer|bool'},
\  },
\  'methods': {
\    'request': { 'signature': 'string $url, \str|array $args', 'return_type': 'array|object'},
\    '_get_first_available_transport': { 'signature': 'array $args, string $url', 'return_type': 'string|bool'},
\    'post': { 'signature': 'string $url, \str|array $args', 'return_type': 'array|object'},
\    'get': { 'signature': 'string $url, \str|array $args', 'return_type': 'array|object'},
\    'head': { 'signature': 'string $url, \str|array $args', 'return_type': 'array|object'},
\    'block_request': { 'signature': 'string $uri', 'return_type': 'bool'},
\  },
\},
\'wp_http_streams': {
\  'name': 'WP_Http_Streams',
\  'static_methods': {
\    'verify_ssl_certificate': { 'signature': '\stream $stream, string $host', 'return_type': 'bool'},
\    'test': { 'signature': ' $args', 'return_type': 'boolean'},
\  },
\  'methods': {
\    'request': { 'signature': 'string $url, string|array $args', 'return_type': 'array'},
\  },
\},
\'wp_http_fsockopen': {
\  'name': 'WP_HTTP_Fsockopen',
\},
\'wp_http_curl': {
\  'name': 'WP_Http_Curl',
\  'static_methods': {
\    'test': { 'signature': ' $args', 'return_type': 'boolean'},
\  },
\  'properties': {
\  },
\  'methods': {
\    'request': { 'signature': 'string $url, \str|array $args', 'return_type': 'array'},
\  },
\},
\'wp_http_proxy': {
\  'name': 'WP_HTTP_Proxy',
\  'methods': {
\    'is_enabled': { 'signature': 'void', 'return_type': 'bool'},
\    'use_authentication': { 'signature': 'void', 'return_type': 'bool'},
\    'host': { 'signature': 'void', 'return_type': 'string'},
\    'port': { 'signature': 'void', 'return_type': 'string'},
\    'username': { 'signature': 'void', 'return_type': 'string'},
\    'password': { 'signature': 'void', 'return_type': 'string'},
\    'authentication': { 'signature': 'void', 'return_type': 'string'},
\    'authentication_header': { 'signature': 'void', 'return_type': 'string'},
\    'send_through_proxy': { 'signature': 'string $uri', 'return_type': 'bool'},
\  },
\},
\'wp_http_cookie': {
\  'name': 'WP_Http_Cookie',
\  'properties': {
\    '$name': {'initializer': '', 'type': 'string'},
\    '$value': {'initializer': '', 'type': 'string'},
\    '$expires': {'initializer': '', 'type': 'string'},
\    '$path': {'initializer': '', 'type': 'string'},
\    '$domain': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string|array $data, string $requested_url', 'return_type': 'void'},
\    'test': { 'signature': 'string $url', 'return_type': 'boolean'},
\    'getHeaderValue': { 'signature': 'void', 'return_type': 'string'},
\    'getFullHeader': { 'signature': 'void', 'return_type': 'string'},
\  },
\},
\'wp_http_encoding': {
\  'name': 'WP_Http_Encoding',
\  'static_methods': {
\    'compress': { 'signature': 'string $raw, int $level, string $supports', 'return_type': 'string|bool'},
\    'decompress': { 'signature': 'string $compressed, int $length', 'return_type': 'string|bool'},
\    'compatible_gzinflate': { 'signature': 'string $gzData', 'return_type': 'string|bool'},
\    'accept_encoding': { 'signature': ' $url,  $args', 'return_type': 'string'},
\    'content_encoding': { 'signature': 'void', 'return_type': 'string'},
\    'should_decode': { 'signature': 'array|string $headers', 'return_type': 'bool'},
\    'is_available': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_file'] = {
\'simplepie_file': {
\  'name': 'SimplePie_File',
\  'properties': {
\    '$url': {'initializer': '', 'type': ''},
\    '$useragent': {'initializer': '', 'type': ''},
\    '$success': {'initializer': 'true', 'type': ''},
\    '$headers': {'initializer': 'array', 'type': ''},
\    '$body': {'initializer': '', 'type': ''},
\    '$status_code': {'initializer': '', 'type': ''},
\    '$redirects': {'initializer': '0', 'type': ''},
\    '$error': {'initializer': '', 'type': ''},
\    '$method': {'initializer': 'SIMPLEPIE_FILE_SOURCE_NONE', 'type': ''},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $url,  $timeout,  $redirects,  $headers,  $useragent,  $force_fsockopen', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_streams'] = {
\'pomo_reader': {
\  'name': 'POMO_Reader',
\  'properties': {
\    '$endian': {'initializer': 'little', 'type': ''},
\    '$_post': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'POMO_Reader': { 'signature': 'void', 'return_type': 'void'},
\    'setEndian': { 'signature': 'mixed $endian', 'return_type': 'void'},
\    'readint32': { 'signature': 'void', 'return_type': 'mixed'},
\    'readint32array': { 'signature': ' $count', 'return_type': 'mixed'},
\    'substr': { 'signature': ' $string,  $start,  $length', 'return_type': 'void'},
\    'strlen': { 'signature': ' $string', 'return_type': 'void'},
\    'str_split': { 'signature': ' $string,  $chunk_size', 'return_type': 'void'},
\    'pos': { 'signature': 'void', 'return_type': 'void'},
\    'is_resource': { 'signature': 'void', 'return_type': 'void'},
\    'close': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'pomo_filereader': {
\  'name': 'POMO_FileReader',
\  'properties': {
\    '$endian': {'initializer': 'little', 'type': ''},
\    '$_post': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'POMO_FileReader': { 'signature': ' $filename', 'return_type': 'void'},
\    'read': { 'signature': ' $bytes', 'return_type': 'void'},
\    'seekto': { 'signature': ' $pos', 'return_type': 'void'},
\    'is_resource': { 'signature': 'void', 'return_type': 'void'},
\    'feof': { 'signature': 'void', 'return_type': 'void'},
\    'close': { 'signature': 'void', 'return_type': 'void'},
\    'read_all': { 'signature': 'void', 'return_type': 'void'},
\    'POMO_Reader': { 'signature': 'void', 'return_type': 'void'},
\    'setEndian': { 'signature': 'mixed $endian', 'return_type': 'void'},
\    'readint32': { 'signature': 'void', 'return_type': 'mixed'},
\    'readint32array': { 'signature': ' $count', 'return_type': 'mixed'},
\    'substr': { 'signature': ' $string,  $start,  $length', 'return_type': 'void'},
\    'strlen': { 'signature': ' $string', 'return_type': 'void'},
\    'str_split': { 'signature': ' $string,  $chunk_size', 'return_type': 'void'},
\    'pos': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'pomo_stringreader': {
\  'name': 'POMO_StringReader',
\  'properties': {
\    '$_str': {'initializer': '', 'type': ''},
\    '$endian': {'initializer': 'little', 'type': ''},
\    '$_post': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'POMO_StringReader': { 'signature': ' $str', 'return_type': 'void'},
\    'read': { 'signature': ' $bytes', 'return_type': 'void'},
\    'seekto': { 'signature': ' $pos', 'return_type': 'void'},
\    'length': { 'signature': 'void', 'return_type': 'void'},
\    'read_all': { 'signature': 'void', 'return_type': 'void'},
\    'POMO_Reader': { 'signature': 'void', 'return_type': 'void'},
\    'setEndian': { 'signature': 'mixed $endian', 'return_type': 'void'},
\    'readint32': { 'signature': 'void', 'return_type': 'mixed'},
\    'readint32array': { 'signature': ' $count', 'return_type': 'mixed'},
\    'substr': { 'signature': ' $string,  $start,  $length', 'return_type': 'void'},
\    'strlen': { 'signature': ' $string', 'return_type': 'void'},
\    'str_split': { 'signature': ' $string,  $chunk_size', 'return_type': 'void'},
\    'pos': { 'signature': 'void', 'return_type': 'void'},
\    'is_resource': { 'signature': 'void', 'return_type': 'void'},
\    'close': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'pomo_cachedfilereader': {
\  'name': 'POMO_CachedFileReader',
\  'properties': {
\    '$_str': {'initializer': '', 'type': ''},
\    '$endian': {'initializer': 'little', 'type': ''},
\    '$_post': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'POMO_CachedFileReader': { 'signature': ' $filename', 'return_type': 'void'},
\    'POMO_StringReader': { 'signature': ' $str', 'return_type': 'void'},
\    'read': { 'signature': ' $bytes', 'return_type': 'void'},
\    'seekto': { 'signature': ' $pos', 'return_type': 'void'},
\    'length': { 'signature': 'void', 'return_type': 'void'},
\    'read_all': { 'signature': 'void', 'return_type': 'void'},
\    'POMO_Reader': { 'signature': 'void', 'return_type': 'void'},
\    'setEndian': { 'signature': 'mixed $endian', 'return_type': 'void'},
\    'readint32': { 'signature': 'void', 'return_type': 'mixed'},
\    'readint32array': { 'signature': ' $count', 'return_type': 'mixed'},
\    'substr': { 'signature': ' $string,  $start,  $length', 'return_type': 'void'},
\    'strlen': { 'signature': ' $string', 'return_type': 'void'},
\    'str_split': { 'signature': ' $string,  $chunk_size', 'return_type': 'void'},
\    'pos': { 'signature': 'void', 'return_type': 'void'},
\    'is_resource': { 'signature': 'void', 'return_type': 'void'},
\    'close': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'pomo_cachedintfilereader': {
\  'name': 'POMO_CachedIntFileReader',
\  'properties': {
\    '$_str': {'initializer': '', 'type': ''},
\    '$endian': {'initializer': 'little', 'type': ''},
\    '$_post': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'POMO_CachedIntFileReader': { 'signature': ' $filename', 'return_type': 'void'},
\    'POMO_CachedFileReader': { 'signature': ' $filename', 'return_type': 'void'},
\    'POMO_StringReader': { 'signature': ' $str', 'return_type': 'void'},
\    'read': { 'signature': ' $bytes', 'return_type': 'void'},
\    'seekto': { 'signature': ' $pos', 'return_type': 'void'},
\    'length': { 'signature': 'void', 'return_type': 'void'},
\    'read_all': { 'signature': 'void', 'return_type': 'void'},
\    'POMO_Reader': { 'signature': 'void', 'return_type': 'void'},
\    'setEndian': { 'signature': 'mixed $endian', 'return_type': 'void'},
\    'readint32': { 'signature': 'void', 'return_type': 'mixed'},
\    'readint32array': { 'signature': ' $count', 'return_type': 'mixed'},
\    'substr': { 'signature': ' $string,  $start,  $length', 'return_type': 'void'},
\    'strlen': { 'signature': ' $string', 'return_type': 'void'},
\    'str_split': { 'signature': ' $string,  $chunk_size', 'return_type': 'void'},
\    'pos': { 'signature': 'void', 'return_type': 'void'},
\    'is_resource': { 'signature': 'void', 'return_type': 'void'},
\    'close': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_audio_mp3'] = {
\'getid3_mp3': {
\  'name': 'getid3_mp3',
\  'static_methods': {
\    'MPEGaudioVersionArray': { 'signature': 'void', 'return_type': 'void'},
\    'MPEGaudioLayerArray': { 'signature': 'void', 'return_type': 'void'},
\    'MPEGaudioBitrateArray': { 'signature': 'void', 'return_type': 'void'},
\    'MPEGaudioFrequencyArray': { 'signature': 'void', 'return_type': 'void'},
\    'MPEGaudioChannelModeArray': { 'signature': 'void', 'return_type': 'void'},
\    'MPEGaudioModeExtensionArray': { 'signature': 'void', 'return_type': 'void'},
\    'MPEGaudioEmphasisArray': { 'signature': 'void', 'return_type': 'void'},
\    'MPEGaudioHeaderBytesValid': { 'signature': ' $head4,  $allowBitrate15', 'return_type': 'void'},
\    'MPEGaudioHeaderValid': { 'signature': ' $rawarray,  $echoerrors,  $allowBitrate15', 'return_type': 'void'},
\    'MPEGaudioHeaderDecode': { 'signature': ' $Header4Bytes', 'return_type': 'void'},
\    'MPEGaudioFrameLength': { 'signature': ' $bitrate,  $version,  $layer,  $padding,  $samplerate', 'return_type': 'void'},
\    'ClosestStandardMP3Bitrate': { 'signature': ' $bit_rate', 'return_type': 'void'},
\    'XingVBRidOffset': { 'signature': ' $version,  $channelmode', 'return_type': 'void'},
\    'LAMEvbrMethodLookup': { 'signature': ' $VBRmethodID', 'return_type': 'void'},
\    'LAMEmiscStereoModeLookup': { 'signature': ' $StereoModeID', 'return_type': 'void'},
\    'LAMEmiscSourceSampleFrequencyLookup': { 'signature': ' $SourceSampleFrequencyID', 'return_type': 'void'},
\    'LAMEsurroundInfoLookup': { 'signature': ' $SurroundInfoID', 'return_type': 'void'},
\    'LAMEpresetUsedLookup': { 'signature': ' $LAMEtag', 'return_type': 'void'},
\  },
\  'properties': {
\    '$allow_bruteforce': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'GuessEncoderOptions': { 'signature': 'void', 'return_type': 'void'},
\    'decodeMPEGaudioHeader': { 'signature': ' $offset,  $info,  $recursivesearch,  $ScanAsCBR,  $FastMPEGheaderScan', 'return_type': 'void'},
\    'RecursiveFrameScanning': { 'signature': ' $offset,  $nextframetestoffset,  $ScanAsCBR', 'return_type': 'void'},
\    'FreeFormatFrameLength': { 'signature': ' $offset,  $deepscan', 'return_type': 'void'},
\    'getOnlyMPEGaudioInfoBruteForce': { 'signature': 'void', 'return_type': 'void'},
\    'getOnlyMPEGaudioInfo': { 'signature': ' $avdataoffset,  $BitrateHistogram', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_author'] = {
\'simplepie_author': {
\  'name': 'SimplePie_Author',
\  'properties': {
\    '$name': {'initializer': '', 'type': 'string'},
\    '$link': {'initializer': '', 'type': 'string'},
\    '$email': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $name, string $link, string $email', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_name': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_link': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_email': { 'signature': 'void', 'return_type': 'string|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_locale'] = {
\'wp_locale': {
\  'name': 'WP_Locale',
\  'properties': {
\    '$weekday': {'initializer': '', 'type': 'array'},
\    '$weekday_initial': {'initializer': '', 'type': 'array'},
\    '$weekday_abbrev': {'initializer': '', 'type': 'array'},
\    '$month': {'initializer': '', 'type': 'array'},
\    '$month_abbrev': {'initializer': '', 'type': 'array'},
\    '$meridiem': {'initializer': '', 'type': 'array'},
\    '$text_direction': {'initializer': 'ltr', 'type': 'string'},
\  },
\  'methods': {
\    'init': { 'signature': 'void', 'return_type': 'void'},
\    'rtl_src_admin_notice': { 'signature': 'void', 'return_type': 'void'},
\    'get_weekday': { 'signature': 'int $weekday_number', 'return_type': 'string'},
\    'get_weekday_initial': { 'signature': 'string $weekday_name', 'return_type': 'string'},
\    'get_weekday_abbrev': { 'signature': 'string $weekday_name', 'return_type': 'string'},
\    'get_month': { 'signature': 'string|int $month_number', 'return_type': 'string'},
\    'get_month_abbrev': { 'signature': 'string $month_name', 'return_type': 'string'},
\    'get_meridiem': { 'signature': 'string $meridiem', 'return_type': 'string'},
\    'register_globals': { 'signature': 'void', 'return_type': 'void'},
\    '__construct': { 'signature': 'void', 'return_type': '\WP_Locale'},
\    'is_rtl': { 'signature': 'void', 'return_type': 'bool'},
\    '_strings_for_pot': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_simplepie'] = {
\'simplepie': {
\  'name': 'SimplePie',
\  'static_methods': {
\    'sort_items': { 'signature': '\SimplePie $a, \SimplePie $b', 'return_type': 'boolean'},
\    'merge_items': { 'signature': 'array $urls, int $start, int $end, int $limit', 'return_type': 'array'},
\  },
\  'properties': {
\    '$data': {'initializer': 'array', 'type': 'array'},
\    '$error': {'initializer': '', 'type': 'mixed'},
\    '$sanitize': {'initializer': '', 'type': 'object'},
\    '$useragent': {'initializer': 'SIMPLEPIE_USERAGENT', 'type': 'string'},
\    '$feed_url': {'initializer': '', 'type': 'string'},
\    '$file': {'initializer': '', 'type': 'object'},
\    '$raw_data': {'initializer': '', 'type': 'string'},
\    '$timeout': {'initializer': '10', 'type': 'int'},
\    '$force_fsockopen': {'initializer': 'false', 'type': 'bool'},
\    '$force_feed': {'initializer': 'false', 'type': 'bool'},
\    '$cache': {'initializer': 'true', 'type': 'bool'},
\    '$cache_duration': {'initializer': '3600', 'type': 'int'},
\    '$autodiscovery_cache_duration': {'initializer': '604800', 'type': 'int'},
\    '$cache_location': {'initializer': './cache', 'type': 'string'},
\    '$cache_name_function': {'initializer': 'md5', 'type': 'string'},
\    '$order_by_date': {'initializer': 'true', 'type': 'bool'},
\    '$input_encoding': {'initializer': 'false', 'type': 'mixed'},
\    '$autodiscovery': {'initializer': 'SIMPLEPIE_LOCATOR_ALL', 'type': 'int'},
\    '$registry': {'initializer': '', 'type': '\SimplePie_Registry'},
\    '$max_checked_feeds': {'initializer': '10', 'type': 'int'},
\    '$all_discovered_feeds': {'initializer': 'array', 'type': 'array'},
\    '$image_handler': {'initializer': '', 'type': 'string'},
\    '$multifeed_url': {'initializer': 'array', 'type': 'array'},
\    '$multifeed_objects': {'initializer': 'array', 'type': 'array'},
\    '$config_settings': {'initializer': 'null', 'type': 'array'},
\    '$item_limit': {'initializer': '0', 'type': 'integer'},
\    '$strip_attributes': {'initializer': 'array', 'type': 'array'},
\    '$strip_htmltags': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'void'},
\    '__destruct': { 'signature': 'void', 'return_type': 'void'},
\    'force_feed': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'set_feed_url': { 'signature': 'string|array $url', 'return_type': 'void'},
\    'set_file': { 'signature': ' $file', 'return_type': 'bool'},
\    'set_raw_data': { 'signature': 'string $data', 'return_type': 'void'},
\    'set_timeout': { 'signature': 'int $timeout', 'return_type': 'void'},
\    'force_fsockopen': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'enable_cache': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'set_cache_duration': { 'signature': 'int $seconds', 'return_type': 'void'},
\    'set_autodiscovery_cache_duration': { 'signature': 'int $seconds', 'return_type': 'void'},
\    'set_cache_location': { 'signature': 'string $location', 'return_type': 'void'},
\    'enable_order_by_date': { 'signature': 'bool $enable', 'return_type': 'void'},
\    'set_input_encoding': { 'signature': 'string $encoding', 'return_type': 'void'},
\    'set_autodiscovery_level': { 'signature': 'int $level', 'return_type': 'void'},
\    'get_registry': { 'signature': 'void', 'return_type': '\SimplePie_Registry'},
\    'set_cache_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_locator_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_parser_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_file_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_sanitize_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_item_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_author_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_category_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_enclosure_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_caption_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_copyright_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_credit_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_rating_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_restriction_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_content_type_sniffer_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_source_class': { 'signature': ' $class', 'return_type': 'void'},
\    'set_useragent': { 'signature': 'string $ua', 'return_type': 'void'},
\    'set_cache_name_function': { 'signature': 'mixed $function', 'return_type': 'void'},
\    'set_stupidly_fast': { 'signature': 'bool $set', 'return_type': 'void'},
\    'set_max_checked_feeds': { 'signature': 'int $max', 'return_type': 'void'},
\    'remove_div': { 'signature': ' $enable', 'return_type': 'void'},
\    'strip_htmltags': { 'signature': ' $tags,  $encode', 'return_type': 'void'},
\    'encode_instead_of_strip': { 'signature': ' $enable', 'return_type': 'void'},
\    'strip_attributes': { 'signature': ' $attribs', 'return_type': 'void'},
\    'set_output_encoding': { 'signature': 'string $encoding', 'return_type': 'void'},
\    'strip_comments': { 'signature': ' $strip', 'return_type': 'void'},
\    'set_url_replacements': { 'signature': 'array|null $element_attribute', 'return_type': 'void'},
\    'set_image_handler': { 'signature': '\str $page, \str $qs', 'return_type': 'void'},
\    'set_item_limit': { 'signature': 'integer $limit', 'return_type': 'void'},
\    'init': { 'signature': 'void', 'return_type': 'boolean'},
\    'error': { 'signature': 'void', 'return_type': 'string|array'},
\    'get_raw_data': { 'signature': 'void', 'return_type': 'string|boolean'},
\    'get_encoding': { 'signature': 'void', 'return_type': 'string'},
\    'handle_content_type': { 'signature': 'string $mime', 'return_type': 'void'},
\    'get_type': { 'signature': 'void', 'return_type': 'int'},
\    'subscribe_url': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_feed_tags': { 'signature': 'string $namespace, string $tag', 'return_type': 'array'},
\    'get_channel_tags': { 'signature': 'string $namespace, string $tag', 'return_type': 'array'},
\    'get_image_tags': { 'signature': 'string $namespace, string $tag', 'return_type': 'array'},
\    'get_base': { 'signature': 'array $element', 'return_type': 'string'},
\    'sanitize': { 'signature': 'string $data, int $type, string $base', 'return_type': 'string'},
\    'get_title': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_category': { 'signature': 'int $key', 'return_type': '\SimplePie_Category|null'},
\    'get_categories': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_author': { 'signature': 'int $key', 'return_type': '\SimplePie_Author|null'},
\    'get_authors': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_contributor': { 'signature': 'int $key', 'return_type': '\SimplePie_Author|null'},
\    'get_contributors': { 'signature': 'void', 'return_type': 'array|null'},
\    'get_link': { 'signature': 'int $key, string $rel', 'return_type': 'string|null'},
\    'get_links': { 'signature': 'string $rel', 'return_type': 'array|null'},
\    'get_all_discovered_feeds': { 'signature': 'void', 'return_type': 'void'},
\    'get_description': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_copyright': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_language': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_latitude': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_longitude': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_title': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_url': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_link': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_image_width': { 'signature': 'void', 'return_type': 'int|float|null'},
\    'get_image_height': { 'signature': 'void', 'return_type': 'int|float|null'},
\    'get_item_quantity': { 'signature': 'int $max', 'return_type': 'int'},
\    'get_item': { 'signature': 'int $key', 'return_type': '\SimplePie_Item|null'},
\    'get_items': { 'signature': 'int $start, int $end', 'return_type': 'array|null'},
\    'set_favicon_handler': { 'signature': ' $page,  $qs', 'return_type': 'void'},
\    'get_favicon': { 'signature': 'void', 'return_type': 'void'},
\    '__call': { 'signature': 'string $method, array $args', 'return_type': 'mixed'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_parser'] = {
\'simplepie_parser': {
\  'name': 'SimplePie_Parser',
\  'properties': {
\    '$error_code': {'initializer': '', 'type': ''},
\    '$error_string': {'initializer': '', 'type': ''},
\    '$current_line': {'initializer': '', 'type': ''},
\    '$current_column': {'initializer': '', 'type': ''},
\    '$current_byte': {'initializer': '', 'type': ''},
\    '$separator': {'initializer': ' ', 'type': ''},
\    '$namespace': {'initializer': 'array', 'type': ''},
\    '$element': {'initializer': 'array', 'type': ''},
\    '$xml_base': {'initializer': 'array', 'type': ''},
\    '$xml_base_explicit': {'initializer': 'array', 'type': ''},
\    '$xml_lang': {'initializer': 'array', 'type': ''},
\    '$data': {'initializer': 'array', 'type': ''},
\    '$datas': {'initializer': 'array', 'type': ''},
\    '$current_xhtml_construct': {'initializer': '-1', 'type': ''},
\    '$encoding': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'set_registry': { 'signature': '\SimplePie_Registry $registry', 'return_type': 'void'},
\    'parse': { 'signature': ' $data,  $encoding', 'return_type': 'void'},
\    'get_error_code': { 'signature': 'void', 'return_type': 'void'},
\    'get_error_string': { 'signature': 'void', 'return_type': 'void'},
\    'get_current_line': { 'signature': 'void', 'return_type': 'void'},
\    'get_current_column': { 'signature': 'void', 'return_type': 'void'},
\    'get_current_byte': { 'signature': 'void', 'return_type': 'void'},
\    'get_data': { 'signature': 'void', 'return_type': 'void'},
\    'tag_open': { 'signature': ' $parser,  $tag,  $attributes', 'return_type': 'void'},
\    'cdata': { 'signature': ' $parser,  $cdata', 'return_type': 'void'},
\    'tag_close': { 'signature': ' $parser,  $tag', 'return_type': 'void'},
\    'split_ns': { 'signature': ' $string', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_module_tag_id3v2'] = {
\'getid3_id3v2': {
\  'name': 'getid3_id3v2',
\  'static_methods': {
\    'LanguageLookup': { 'signature': ' $languagecode,  $casesensitive', 'return_type': 'void'},
\    'ETCOEventLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'SYTLContentTypeLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'APICPictureTypeLookup': { 'signature': ' $index,  $returnarray', 'return_type': 'void'},
\    'COMRReceivedAsLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'RVA2ChannelTypeLookup': { 'signature': ' $index', 'return_type': 'void'},
\    'FrameNameLongLookup': { 'signature': ' $framename', 'return_type': 'void'},
\    'FrameNameShortLookup': { 'signature': ' $framename', 'return_type': 'void'},
\    'TextEncodingTerminatorLookup': { 'signature': ' $encoding', 'return_type': 'void'},
\    'TextEncodingNameLookup': { 'signature': ' $encoding', 'return_type': 'void'},
\    'IsValidID3v2FrameName': { 'signature': ' $framename,  $id3v2majorversion', 'return_type': 'void'},
\    'IsANumber': { 'signature': ' $numberstring,  $allowdecimal,  $allownegative', 'return_type': 'void'},
\    'IsValidDateStampString': { 'signature': ' $datestamp', 'return_type': 'void'},
\    'ID3v2HeaderLength': { 'signature': ' $majorversion', 'return_type': 'void'},
\  },
\  'properties': {
\    '$StartingOffset': {'initializer': '0', 'type': ''},
\  },
\  'methods': {
\    'Analyze': { 'signature': 'void', 'return_type': 'void'},
\    'ParseID3v2GenreString': { 'signature': ' $genrestring', 'return_type': 'void'},
\    'ParseID3v2Frame': { 'signature': ' $parsedFrame', 'return_type': 'void'},
\    'DeUnsynchronise': { 'signature': ' $data', 'return_type': 'void'},
\    'LookupExtendedHeaderRestrictionsTagSizeLimits': { 'signature': ' $index', 'return_type': 'void'},
\    'LookupExtendedHeaderRestrictionsTextEncodings': { 'signature': ' $index', 'return_type': 'void'},
\    'LookupExtendedHeaderRestrictionsTextFieldSize': { 'signature': ' $index', 'return_type': 'void'},
\    'LookupExtendedHeaderRestrictionsImageEncoding': { 'signature': ' $index', 'return_type': 'void'},
\    'LookupExtendedHeaderRestrictionsImageSizeSize': { 'signature': ' $index', 'return_type': 'void'},
\    'LookupCurrencyUnits': { 'signature': ' $currencyid', 'return_type': 'void'},
\    'LookupCurrencyCountry': { 'signature': ' $currencyid', 'return_type': 'void'},
\    '__construct': { 'signature': '\getID3 $getid3,  $call_module', 'return_type': 'void'},
\    'AnalyzeString': { 'signature': ' $string', 'return_type': 'void'},
\    'setStringMode': { 'signature': ' $string', 'return_type': 'void'},
\    'saveAttachment': { 'signature': ' $name,  $offset,  $length,  $image_mime', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_date'] = {
\'simplepie_parse_date': {
\  'name': 'SimplePie_Parse_Date',
\  'static_methods': {
\    'get': { 'signature': 'void', 'return_type': 'void'},
\  },
\  'properties': {
\    '$date': {'initializer': '', 'type': 'string'},
\    '$day': {'initializer': 'array', 'type': 'array'},
\    '$month': {'initializer': 'array', 'type': 'array'},
\    '$timezone': {'initializer': 'array', 'type': 'array'},
\    '$day_pcre': {'initializer': '', 'type': 'string'},
\    '$month_pcre': {'initializer': '', 'type': 'string'},
\    '$built_in': {'initializer': 'array', 'type': 'array'},
\    '$user': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': 'void'},
\    'parse': { 'signature': 'string $date', 'return_type': 'int'},
\    'add_callback': { 'signature': 'callback $callback', 'return_type': 'void'},
\    'date_w3cdtf': { 'signature': ' $date', 'return_type': 'int'},
\    'remove_rfc2822_comments': { 'signature': ' $string', 'return_type': 'string'},
\    'date_rfc2822': { 'signature': ' $date', 'return_type': 'int'},
\    'date_rfc850': { 'signature': ' $date', 'return_type': 'int'},
\    'date_asctime': { 'signature': ' $date', 'return_type': 'int'},
\    'date_strtotime': { 'signature': ' $date', 'return_type': 'int'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_json'] = {
\'moxiecode_jsonreader': {
\  'name': 'Moxiecode_JSONReader',
\  'properties': {
\    '$_data': {'initializer': '', 'type': ''},
\    '$_len': {'initializer': '', 'type': ''},
\    '$_pos': {'initializer': '', 'type': ''},
\    '$_value': {'initializer': '', 'type': ''},
\    '$_token': {'initializer': '', 'type': ''},
\    '$_location': {'initializer': '', 'type': ''},
\    '$_lastLocations': {'initializer': '', 'type': ''},
\    '$_needProp': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'Moxiecode_JSONReader': { 'signature': ' $data', 'return_type': 'void'},
\    'getToken': { 'signature': 'void', 'return_type': 'void'},
\    'getLocation': { 'signature': 'void', 'return_type': 'void'},
\    'getTokenName': { 'signature': 'void', 'return_type': 'void'},
\    'getValue': { 'signature': 'void', 'return_type': 'void'},
\    'readToken': { 'signature': 'void', 'return_type': 'void'},
\    '_readBool': { 'signature': ' $chr', 'return_type': 'void'},
\    '_readNull': { 'signature': 'void', 'return_type': 'void'},
\    '_readString': { 'signature': ' $quote', 'return_type': 'void'},
\    '_int2utf8': { 'signature': ' $int', 'return_type': 'void'},
\    '_readNumber': { 'signature': ' $start', 'return_type': 'void'},
\    'readAway': { 'signature': 'void', 'return_type': 'void'},
\    'read': { 'signature': ' $len', 'return_type': 'void'},
\    'skip': { 'signature': ' $len', 'return_type': 'void'},
\    'peek': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'moxiecode_json': {
\  'name': 'Moxiecode_JSON',
\  'methods': {
\    'Moxiecode_JSON': { 'signature': 'void', 'return_type': 'void'},
\    'decode': { 'signature': ' $input', 'return_type': 'void'},
\    'readValue': { 'signature': ' $reader', 'return_type': 'void'},
\    'addArray': { 'signature': ' $key', 'return_type': 'void'},
\    'getDelim': { 'signature': ' $index,  $reader', 'return_type': 'void'},
\    'encode': { 'signature': ' $input', 'return_type': 'void'},
\    'encodeString': { 'signature': ' $input', 'return_type': 'void'},
\    '_utf82utf16': { 'signature': ' $utf8', 'return_type': 'void'},
\    '_encodeArray': { 'signature': ' $input', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_category'] = {
\'simplepie_category': {
\  'name': 'SimplePie_Category',
\  'properties': {
\    '$term': {'initializer': '', 'type': 'string'},
\    '$scheme': {'initializer': '', 'type': 'string'},
\    '$label': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $term, string $scheme, string $label', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_term': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_scheme': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_label': { 'signature': 'void', 'return_type': 'string|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_googlespell'] = {
\'googlespell': {
\  'name': 'GoogleSpell',
\  'methods': {
\    'checkWords': { 'signature': '\{String} $lang, \{Array} $words', 'return_type': '\{Array}'},
\    'getSuggestions': { 'signature': '\{String} $lang, \{String} $word', 'return_type': '\{Array}'},
\    'SpellChecker': { 'signature': 'mixed $config', 'return_type': 'void'},
\    'loopback': { 'signature': 'void', 'return_type': '\{Array}'},
\    'throwError': { 'signature': '\{String} $str', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_widgets'] = {
\'wp_widget': {
\  'name': 'WP_Widget',
\  'properties': {
\    '$id_base': {'initializer': '', 'type': ''},
\    '$name': {'initializer': '', 'type': ''},
\    '$widget_options': {'initializer': '', 'type': ''},
\    '$control_options': {'initializer': '', 'type': ''},
\    '$number': {'initializer': 'false', 'type': ''},
\    '$id': {'initializer': 'false', 'type': ''},
\    '$updated': {'initializer': 'false', 'type': ''},
\  },
\  'methods': {
\    'widget': { 'signature': 'array $args, array $instance', 'return_type': 'void'},
\    'update': { 'signature': 'array $new_instance, array $old_instance', 'return_type': 'array'},
\    'form': { 'signature': 'array $instance', 'return_type': 'void'},
\    '__construct': { 'signature': 'string $id_base, string $name, array $widget_options, array $control_options', 'return_type': 'void'},
\    'WP_Widget': { 'signature': ' $id_base,  $name,  $widget_options,  $control_options', 'return_type': 'void'},
\    'get_field_name': { 'signature': 'string $field_name', 'return_type': 'string'},
\    'get_field_id': { 'signature': 'string $field_name', 'return_type': 'string'},
\    '_register': { 'signature': 'void', 'return_type': 'void'},
\    '_set': { 'signature': ' $number', 'return_type': 'void'},
\    '_get_display_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_update_callback': { 'signature': 'void', 'return_type': 'void'},
\    '_get_form_callback': { 'signature': 'void', 'return_type': 'void'},
\    'display_callback': { 'signature': ' $args,  $widget_args', 'return_type': 'void'},
\    'update_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    'form_callback': { 'signature': ' $widget_args', 'return_type': 'void'},
\    '_register_one': { 'signature': ' $number', 'return_type': 'void'},
\    'save_settings': { 'signature': ' $settings', 'return_type': 'void'},
\    'get_settings': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\'wp_widget_factory': {
\  'name': 'WP_Widget_Factory',
\  'properties': {
\    '$widgets': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'WP_Widget_Factory': { 'signature': 'void', 'return_type': 'void'},
\    'register': { 'signature': ' $widget_class', 'return_type': 'void'},
\    'unregister': { 'signature': ' $widget_class', 'return_type': 'void'},
\    '_register_widgets': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_credit'] = {
\'simplepie_credit': {
\  'name': 'SimplePie_Credit',
\  'properties': {
\    '$role': {'initializer': '', 'type': 'string'},
\    '$scheme': {'initializer': '', 'type': 'string'},
\    '$name': {'initializer': '', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': ' $role,  $scheme,  $name', 'return_type': 'void'},
\    '__toString': { 'signature': 'void', 'return_type': 'string'},
\    'get_role': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_scheme': { 'signature': 'void', 'return_type': 'string|null'},
\    'get_name': { 'signature': 'void', 'return_type': 'string|null'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_memcache'] = {
\'simplepie_cache_memcache': {
\  'name': 'SimplePie_Cache_Memcache',
\  'properties': {
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $location, string $name, string $type', 'return_type': 'void'},
\    'save': { 'signature': 'array|\SimplePie $data', 'return_type': 'bool'},
\    'load': { 'signature': 'void', 'return_type': 'array'},
\    'mtime': { 'signature': 'void', 'return_type': 'int'},
\    'touch': { 'signature': 'void', 'return_type': 'bool'},
\    'unlink': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_string'] = {
\'text_diff_engine_string': {
\  'name': 'Text_Diff_Engine_string',
\  'methods': {
\    'diff': { 'signature': 'string $diff, string $mode', 'return_type': 'array'},
\    'parseUnifiedDiff': { 'signature': 'array $diff', 'return_type': 'array'},
\    'parseContextDiff': { 'signature': 'array $diff', 'return_type': 'array'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_rss'] = {
\'magpierss': {
\  'name': 'MagpieRSS',
\  'properties': {
\    '$parser': {'initializer': '', 'type': ''},
\    '$current_item': {'initializer': 'array', 'type': ''},
\    '$items': {'initializer': 'array', 'type': ''},
\    '$channel': {'initializer': 'array', 'type': ''},
\    '$textinput': {'initializer': 'array', 'type': ''},
\    '$image': {'initializer': 'array', 'type': ''},
\    '$feed_type': {'initializer': '', 'type': ''},
\    '$feed_version': {'initializer': '', 'type': ''},
\    '$stack': {'initializer': 'array', 'type': ''},
\    '$inchannel': {'initializer': 'false', 'type': ''},
\    '$initem': {'initializer': 'false', 'type': ''},
\    '$incontent': {'initializer': 'false', 'type': ''},
\    '$intextinput': {'initializer': 'false', 'type': ''},
\    '$inimage': {'initializer': 'false', 'type': ''},
\    '$current_field': {'initializer': '', 'type': ''},
\    '$current_namespace': {'initializer': 'false', 'type': ''},
\    '$_CONTENT_CONSTRUCTS': {'initializer': 'array', 'type': ''},
\  },
\  'methods': {
\    'MagpieRSS': { 'signature': ' $source', 'return_type': 'void'},
\    'feed_start_element': { 'signature': ' $p,  $element,  $attrs', 'return_type': 'void'},
\    'feed_cdata': { 'signature': ' $p,  $text', 'return_type': 'void'},
\    'feed_end_element': { 'signature': ' $p,  $el', 'return_type': 'void'},
\    'concat': { 'signature': ' $str1,  $str2', 'return_type': 'void'},
\    'append_content': { 'signature': ' $text', 'return_type': 'void'},
\    'append': { 'signature': ' $el,  $text', 'return_type': 'void'},
\    'normalize': { 'signature': 'void', 'return_type': 'void'},
\    'is_rss': { 'signature': 'void', 'return_type': 'void'},
\    'is_atom': { 'signature': 'void', 'return_type': 'void'},
\    'map_attrs': { 'signature': ' $k,  $v', 'return_type': 'void'},
\    'error': { 'signature': ' $errormsg,  $lvl', 'return_type': 'void'},
\  },
\},
\'rsscache': {
\  'name': 'RSSCache',
\  'properties': {
\    '$BASE_CACHE': {'initializer': '', 'type': ''},
\    '$MAX_AGE': {'initializer': '43200', 'type': ''},
\    '$ERROR': {'initializer': '', 'type': ''},
\  },
\  'methods': {
\    'RSSCache': { 'signature': ' $base,  $age', 'return_type': 'void'},
\    'set': { 'signature': ' $url,  $rss', 'return_type': 'void'},
\    'get': { 'signature': ' $url', 'return_type': 'void'},
\    'check_cache': { 'signature': ' $url', 'return_type': 'void'},
\    'serialize': { 'signature': ' $rss', 'return_type': 'void'},
\    'unserialize': { 'signature': ' $data', 'return_type': 'void'},
\    'file_name': { 'signature': ' $url', 'return_type': 'void'},
\    'error': { 'signature': ' $errormsg,  $lvl', 'return_type': 'void'},
\    'debug': { 'signature': ' $debugmsg,  $lvl', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_entities'] = {
\'simplepie_decode_html_entities': {
\  'name': 'SimplePie_Decode_HTML_Entities',
\  'properties': {
\    '$data': {'initializer': '', 'type': 'string'},
\    '$consumed': {'initializer': '', 'type': 'string'},
\    '$position': {'initializer': '0', 'type': 'int'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string $data', 'return_type': 'void'},
\    'parse': { 'signature': 'void', 'return_type': 'string'},
\    'consume': { 'signature': 'void', 'return_type': 'mixed'},
\    'consume_range': { 'signature': 'string $chars', 'return_type': 'mixed'},
\    'unconsume': { 'signature': 'void', 'return_type': 'void'},
\    'entity': { 'signature': 'void', 'return_type': 'void'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_cache'] = {
\'wp_object_cache': {
\  'name': 'WP_Object_Cache',
\  'properties': {
\    '$cache': {'initializer': 'array', 'type': 'array'},
\    '$cache_hits': {'initializer': '0', 'type': 'int'},
\    '$cache_misses': {'initializer': '0', 'type': 'int'},
\    '$global_groups': {'initializer': 'array', 'type': 'array'},
\    '$blog_prefix': {'initializer': '', 'type': 'int'},
\  },
\  'methods': {
\    'add': { 'signature': 'int|string $key, mixed $data, string $group, int $expire', 'return_type': 'bool'},
\    'add_global_groups': { 'signature': 'array $groups', 'return_type': 'void'},
\    'decr': { 'signature': 'int|string $key, int $offset, string $group', 'return_type': 'false|int'},
\    'delete': { 'signature': 'int|string $key, string $group, bool $force', 'return_type': 'bool'},
\    'flush': { 'signature': 'void', 'return_type': 'bool'},
\    'get': { 'signature': 'int|string $key, string $group, string $force,  $found', 'return_type': 'bool|mixed'},
\    'incr': { 'signature': 'int|string $key, int $offset, string $group', 'return_type': 'false|int'},
\    'replace': { 'signature': 'int|string $key, mixed $data, string $group, int $expire', 'return_type': 'bool'},
\    'reset': { 'signature': 'void', 'return_type': 'void'},
\    'set': { 'signature': 'int|string $key, mixed $data, string $group, int $expire', 'return_type': 'bool'},
\    'stats': { 'signature': 'void', 'return_type': 'void'},
\    'switch_to_blog': { 'signature': 'int $blog_id', 'return_type': 'void'},
\    '__construct': { 'signature': 'void', 'return_type': 'null|\WP_Object_Cache'},
\    '__destruct': { 'signature': 'void', 'return_type': 'bool'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_smtp'] = {
\'smtp': {
\  'name': 'SMTP',
\  'properties': {
\    '$SMTP_PORT': {'initializer': '25', 'type': ''},
\    '$CRLF': {'initializer': '"\r\n"', 'type': ''},
\    '$do_debug': {'initializer': '', 'type': ''},
\    '$Debugoutput': {'initializer': '"echo"', 'type': 'string'},
\    '$do_verp': {'initializer': 'false', 'type': ''},
\    '$Timeout': {'initializer': '15', 'type': 'int'},
\    '$Timelimit': {'initializer': '30', 'type': 'int'},
\    '$Version': {'initializer': '5.2.4', 'type': 'string'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'void', 'return_type': '\SMTP'},
\    'Connect': { 'signature': 'string $host, int $port, int $tval', 'return_type': 'bool'},
\    'StartTLS': { 'signature': 'void', 'return_type': 'bool'},
\    'Authenticate': { 'signature': 'string $username, string $password, string $authtype, string $realm, string $workstation', 'return_type': 'bool'},
\    'Connected': { 'signature': 'void', 'return_type': 'bool'},
\    'Close': { 'signature': 'void', 'return_type': 'void'},
\    'Data': { 'signature': 'string $msg_data', 'return_type': 'bool'},
\    'Hello': { 'signature': 'string $host', 'return_type': 'bool'},
\    'Mail': { 'signature': 'string $from', 'return_type': 'bool'},
\    'Quit': { 'signature': 'bool $close_on_error', 'return_type': 'bool'},
\    'Recipient': { 'signature': 'string $to', 'return_type': 'bool'},
\    'Reset': { 'signature': 'void', 'return_type': 'bool'},
\    'SendAndMail': { 'signature': 'string $from', 'return_type': 'bool'},
\    'Turn': { 'signature': 'void', 'return_type': 'bool'},
\    'getError': { 'signature': 'void', 'return_type': 'array'},
\  },
\},
\}

let g:phpcomplete_builtin['classes']['wp_class_wp_error'] = {
\'wp_error': {
\  'name': 'WP_Error',
\  'properties': {
\    '$errors': {'initializer': 'array', 'type': 'array'},
\    '$error_data': {'initializer': 'array', 'type': 'array'},
\  },
\  'methods': {
\    '__construct': { 'signature': 'string|int $code, string $message, mixed $data', 'return_type': '\WP_Error'},
\    'get_error_codes': { 'signature': 'void', 'return_type': 'array'},
\    'get_error_code': { 'signature': 'void', 'return_type': 'string|int'},
\    'get_error_messages': { 'signature': 'string|int $code', 'return_type': 'array'},
\    'get_error_message': { 'signature': 'string|int $code', 'return_type': 'string'},
\    'get_error_data': { 'signature': 'string|int $code', 'return_type': 'mixed'},
\    'add': { 'signature': 'string|int $code, string $message, mixed $data', 'return_type': 'void'},
\    'add_data': { 'signature': 'mixed $data, string|int $code', 'return_type': 'void'},
\  },
\},
\}


" Function Modules "
let g:wordpress_active_function_extensions = [
\ 'wp_script_loader',
\ 'wp_post_formats',
\ 'wp_http',
\ 'wp_cron',
\ 'wp_rewrite',
\ 'wp_ms_blogs',
\ 'wp_taxonomy',
\ 'wp_query',
\ 'wp_functions_wp_scripts',
\ 'wp_media',
\ 'wp_formatting',
\ 'wp_admin_bar',
\ 'wp_post_template',
\ 'wp_comment_template',
\ 'wp_general_template',
\ 'wp_template',
\ 'wp_comment',
\ 'wp_media_template',
\ 'wp_post',
\ 'wp_author_template',
\ 'wp_category',
\ 'wp_l10n',
\ 'wp_link_template',
\ 'wp_pluggable',
\ 'wp_capabilities',
\ 'wp_option',
\ 'wp_nav_menu_template',
\ 'wp_ms_load',
\ 'wp_class_pop3',
\ 'wp_category_template',
\ 'wp_kses',
\ 'wp_deprecated',
\ 'wp_class_wp_customize_manager',
\ 'wp_default_widgets',
\ 'wp_wp_langs',
\ 'wp_user',
\ 'wp_canonical',
\ 'wp_load',
\ 'wp_wp_tinymce',
\ 'wp_update',
\ 'wp_plugin',
\ 'wp_ms_functions',
\ 'wp_default_constants',
\ 'wp_ms_default_constants',
\ 'wp_functions',
\ 'wp_theme',
\ 'wp_vars',
\ 'wp_compat',
\ 'wp_bookmark',
\ 'wp_functions_wp_styles',
\ 'wp_feed',
\ 'wp_meta',
\ 'wp_locale',
\ 'wp_class_simplepie',
\ 'wp_nav_menu',
\ 'wp_general',
\ 'wp_googlespell',
\ 'wp_widgets',
\ 'wp_rss',
\ 'wp_revision',
\ 'wp_cache',
\ 'wp_post_thumbnail_template',
\ 'wp_shortcodes',
\ 'wp_class_wp_error',
\ 'wp_bookmark_template',
\]

" Class Modules "
let g:wordpress_active_class_extensions = [
\ 'wp_xdiff',
\ 'wp_parser',
\ 'wp_class_ixr',
\ 'wp_registry',
\ 'wp_cache',
\ 'wp_class_snoopy',
\ 'wp_rewrite',
\ 'wp_class_phpmailer',
\ 'wp_pspellshell',
\ 'wp_source',
\ 'wp_db',
\ 'wp_taxonomy',
\ 'wp_query',
\ 'wp_module_audio_dts',
\ 'wp_wp_db',
\ 'wp_module_audio_video_flv',
\ 'wp_diff',
\ 'wp_mysql',
\ 'wp_restriction',
\ 'wp_module_audio_video_riff',
\ 'wp_native',
\ 'wp_gzdecode',
\ 'wp_rating',
\ 'wp_translations',
\ 'wp_class_wp_xmlrpc_server',
\ 'wp_post_template',
\ 'wp_comment_template',
\ 'wp_module_audio_video_matroska',
\ 'wp_renderer',
\ 'wp_comment',
\ 'wp_class_wp_customize_setting',
\ 'wp_class_wp_editor',
\ 'wp_class_wp_dependencies',
\ 'wp_sanitize',
\ 'wp_post',
\ 'wp_file',
\ 'wp_class_wp',
\ 'wp_class_wp_ajax_response',
\ 'wp_class_oembed',
\ 'wp_class_wp_customize_section',
\ 'wp_enclosure',
\ 'wp_capabilities',
\ 'wp_copyright',
\ 'wp_pluggable_deprecated',
\ 'wp_module_tag_apetag',
\ 'wp_class_wp_embed',
\ 'wp_module_audio_flac',
\ 'wp_wp_diff',
\ 'wp_nav_menu_template',
\ 'wp_class_wp_image_editor_gd',
\ 'wp_class_pop3',
\ 'wp_class_feed',
\ 'wp_category_template',
\ 'wp_class_wp_admin_bar',
\ 'wp_module_audio_ac3',
\ 'wp_exception',
\ 'wp_class_wp_image_editor',
\ 'wp_module_audio_ogg',
\ 'wp_class_wp_customize_control',
\ 'wp_class_wp_image_editor_imagick',
\ 'wp_atomlib',
\ 'wp_class_wp_customize_manager',
\ 'wp_default_widgets',
\ 'wp_class_wp_theme',
\ 'wp_user',
\ 'wp_ipv6',
\ 'wp_module_tag_id3v1',
\ 'wp_spellchecker',
\ 'wp_module_audio_video_quicktime',
\ 'wp_enchantspell',
\ 'wp_shell',
\ 'wp_class_wp_scripts',
\ 'wp_misc',
\ 'wp_class_wp_http_ixr_client',
\ 'wp_module_audio_video_asf',
\ 'wp_sniffer',
\ 'wp_getid3_lib',
\ 'wp_class_wp_styles',
\ 'wp_module_tag_lyrics3',
\ 'wp_locator',
\ 'wp_caption',
\ 'wp_class_phpass',
\ 'wp_mo',
\ 'wp_core',
\ 'wp_entry',
\ 'wp_inline',
\ 'wp_item',
\ 'wp_date',
\ 'wp_getid3',
\ 'wp_iri',
\ 'wp_class_json',
\ 'wp_logger',
\ 'wp_class_wp_walker',
\ 'wp_pspell',
\ 'wp_parser',
\ 'wp_po',
\ 'wp_meta',
\ 'wp_class_http',
\ 'wp_file',
\ 'wp_streams',
\ 'wp_module_audio_mp3',
\ 'wp_author',
\ 'wp_locale',
\ 'wp_class_simplepie',
\ 'wp_parser',
\ 'wp_module_tag_id3v2',
\ 'wp_date',
\ 'wp_json',
\ 'wp_category',
\ 'wp_googlespell',
\ 'wp_widgets',
\ 'wp_credit',
\ 'wp_memcache',
\ 'wp_string',
\ 'wp_rss',
\ 'wp_entities',
\ 'wp_cache',
\ 'wp_class_smtp',
\ 'wp_class_wp_error',
\]

" Merge extensions with phpcomplete
let g:phpcomplete_active_function_extensions += g:wordpress_active_function_extensions
let g:phpcomplete_active_class_extensions += g:wordpress_active_class_extensions

" Done
let g:wordpress_vim_phpcomplete_extensions_loaded = 1
